<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Shoewann&#39;s Personal Blog</title>
  
  <subtitle>记录 &amp; 分享</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://shoewann0402.github.io/"/>
  <updated>2020-03-17T09:49:34.948Z</updated>
  <id>https://shoewann0402.github.io/</id>
  
  <author>
    <name>Shoewann</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Android 11 (R) 分区存储</title>
    <link href="https://shoewann0402.github.io/2020/03/17/android-R-scoped-storage/"/>
    <id>https://shoewann0402.github.io/2020/03/17/android-R-scoped-storage/</id>
    <published>2020-03-17T09:16:50.000Z</published>
    <updated>2020-03-17T09:49:34.948Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>Android 在 Q 上引入了分区存储，对外部存储访问收拢了宽裕的权限，对存储数据文件的读写进行了限制，那么 Android R 上又有哪些变化呢 ?</p></blockquote><p>本文就让我们一起来了解一下 , Let’s go ~</p><hr><a id="more"></a><p>讲 <strong>R</strong> 上分区存储变化之前，我们先来回顾一下 <strong>Q</strong> 上相关内容</p><p><img alt="scoped-storage-on-android-11.png" data-src="/images/scoped-storage-on-android-11.png"></p><h2 id="Android-10-Q-先回顾"><a href="#Android-10-Q-先回顾" class="headerlink" title="Android 10 / Q 先回顾"></a>Android 10 / Q 先回顾</h2><p>Android中存储可以分为两大类: 私有存储和共享存储</p><blockquote><ul><li><strong>私有存储 (Private Storage)</strong> : 每个应用在内部存储种都拥有自己的私有目录(<code>/data/data/packageName</code>)，其它应用看不到，彼此也无法访问到该目录</li></ul></blockquote><blockquote><ul><li><strong>共享存储 (Shared Storage)</strong> : 除了私有存储以外，其他的一切都被认定是共享存储，比如媒体集 (<code>Media Collection</code>) 和 <code>SD卡外部应用存储目录</code></li></ul></blockquote><h3 id="一、导火线"><a href="#一、导火线" class="headerlink" title="一、导火线"></a>一、导火线</h3><p>在分区存储之前，某些应用中，即使功能很简单，大部分都不需要这么宽泛的权限。<br>这就使得某些应用程序</p><p>1、<strong>乱占空间</strong> ：各种各样的文件散布在磁盘的各个地方，当用户卸载应用之后，这些被遗弃的 “<strong>孤儿</strong>“ 被滞留在原地，无家可归，占用了磁盘空间，最终结果就会导致<strong>磁盘不足</strong><br>2、<strong>随意读取用户的数据</strong><br>3、<strong>随意读取应用的数据</strong></p><p>因此 ——  <strong>分区存储</strong> Baby 诞生了 ~</p><p>它的降临 , <strong>限制</strong>了过于宽泛的 <strong>存储权限</strong></p><p>成长的同时, 在 Android 10 / Q 上它需要遵循三个原则 ：</p><blockquote><ul><li>更好的文件属性 : 系统应用知道什么文件属于哪一个app,让用户更加容易管理他们自己的文件。当app被卸载了，被应用创建的内容，除非用户希望保留，否则不应该保留下来。</li><li>用户的数据安全 ：当用户下载文件，比如敏感的电子邮件附件，这些文件对大多数应用程序都不应该可见</li><li>应用的数据安全 ：当app将特定于应用程序的文件写入外部存储时，其他应用程序不应该可见这些文件</li></ul></blockquote><h3 id="二、规则点"><a href="#二、规则点" class="headerlink" title="二、规则点"></a>二、规则点</h3><blockquote><ul><li>应用访问自己的应用目录不受限制 ( 包括<code>内部和外部</code> ) <strong>无需任何权限</strong></li><li>应用向媒体集和下载目录提供文件，如果您要想保存图片、视频、音频、文档，<strong>无需任何权限</strong></li><li>不再提供宽泛的共享存储 ( <code>Share Storage</code> ), 读写存储权限只能访问提供的媒体集 ( <code>图片集</code>、<code>视频集</code>、<code>音频集</code> )</li><li>位置元数据限制，获取图片上的位置等信息需要请求权限，如果不请求权限，读取图片的信息的时候，位置元数据将会被删除</li><li>读取<strong>PDF</strong>或<strong>其他类型</strong>的文件，需要调用<strong>系统的文件选择器</strong> ( <code>Storage Access Framerwork API</code> )</li><li>在媒体集或应用目录之外，写任何文件都需要<strong>系统的文件选择器</strong>, 这样用户能选择并确认将文件存在哪里</li><li><strong>requestLegacyExternalStorage</strong> 开关值，在清单文件配置,如果开启了，存储权限就会像之前版本中的Android一样运作</li></ul></blockquote><h3 id="三、详细说明"><a href="#三、详细说明" class="headerlink" title="三、详细说明"></a>三、详细说明</h3><h4 id="1-媒体文件集"><a href="#1-媒体文件集" class="headerlink" title="1. 媒体文件集"></a>1. 媒体文件集</h4><blockquote><p>用于和其它应用分享媒体文件(图片、音频、视频文件)</p></blockquote><p>Android 10 中，自己的App无需任何权限就能向媒体集添加文件，同时您也可以编辑和删除您自己添加的媒体文件。</p><p>如果你要读取并操作并非您的应用所创建的媒体文件，就需要读取外部存储权限，如果用户没有同意，您的应用将无法编辑和删除并非您的应用所创建的媒体文件。</p><p>这样一来，您的应用想编辑和删除媒体文件时，用户就能获得完整的控制权</p><h4 id="2-下载文件集"><a href="#2-下载文件集" class="headerlink" title="2. 下载文件集"></a>2. 下载文件集</h4><blockquote><p>用于和其它应用分享非媒体文件(非图片、非音频、非视频文件)</p></blockquote><p>下载文件集，和媒体文件集一样，您无需请求任何权限就能在这个集中添加、编辑、删除非媒体文件。</p><p>与媒体文件不同的是，即使有读取外部存储权限, 也是不允许您访问由其他应用创建添加的非媒体文件。想要取得权限，您需要通过调用 <strong>Storage Access Framerwork API</strong>，启动系统文件选择器，让用户可以进行选择可以访问哪些文件和目录。</p><p>如果用户允许您访问一个文件，那么这个权限将是完整的权限，你无需其他额外的任何权限，就可以任意的读取、编辑删除媒体文件和非媒体文件。</p><p>这样一来，用户就能获得完整的控制权，更好的管理应用在何时访问敏感的非媒体文件</p><h4 id="3-限制位置元数据"><a href="#3-限制位置元数据" class="headerlink" title="3. 限制位置元数据"></a>3. 限制位置元数据</h4><blockquote><p>对媒体文件中敏感的元数据进行了访问权限的限制，主要限制位置元数据</p></blockquote><p>可以在应用获取那些其他应用创建添加的媒体文件的时候，直接删除这些元数据</p><p>如果想要获取图片的位置信息，需要声明请求权限 <strong><code>ACCESS_MEDIA_LOCATION</code></strong> ，用户在Settings UI里看不到这个权限, 但是它属于运行时权限，所以必须要在Manifest里声明该权限 , 并在运行时同时请求该权限和读取外部存储权限</p><p>MediaStore.setRequireOriginal() : 获取当前磁盘的体积容量</p><h4 id="4-媒体文件访问路径"><a href="#4-媒体文件访问路径" class="headerlink" title="4. 媒体文件访问路径"></a>4. 媒体文件访问路径</h4><blockquote><p>Android 10 锁定了公共目录文件路径的权限。</p></blockquote><p>所有的应用都尽量继续使用<strong>MediaStore</strong>，因为后台文件路径 [ <code>/sdcard/DCIM/xxx.JPG</code> ] 请求或使用文件路径[ <code>/sdcard/DCIM/xxx.JPG</code> ]进行I/O流请求都是代理给 <strong>MediaStore</strong> 类的</p><p><strong>不建议直接使用媒体文件访问路径 [ /sdcard/DCIM/xxx.JPG ] ，应用的性能会略有下降</strong></p><h4 id="5-MediaStore-的强制性"><a href="#5-MediaStore-的强制性" class="headerlink" title="5. MediaStore 的强制性"></a>5. MediaStore 的强制性</h4><blockquote><p>文件需要在适当的目录进行创建，</p></blockquote><p>媒体文件需要媒体目录进行创建, 不能在图片目录创建音频文件，如果您想访问由其他应用创建的媒体文件，您就要请求外部存储读取权限。如果您没有获得媒体位置权限，就仍然会在读取由其他应用创建的媒体文件时，被系统拿掉位置信息。</p><p>当然，非媒体文件必须在Downloads下创建，所有Dowonloads目录下也只能创建像PDF或其它的非媒体文件</p><p>读取由其他应用创建的非媒体文件，也将需要 <strong>Storage Access Framerwork API</strong></p><h3 id="四、总结"><a href="#四、总结" class="headerlink" title="四、总结"></a>四、总结</h3><blockquote><ul><li>特定于应用的目录 –&gt; 无需权限 –&gt; 访问方法 getExternalFilesDir() –&gt; 卸载应用时移除文件</li><li>媒体集合(照片、视频、音频) –&gt; 需要权限READ_EXTERNAL_STORAGE(仅当访问其他应用的文件时) –&gt; 访问方法 MediaStore –&gt; 卸载应用时不移除文件</li><li>下载内容（文档和电子书籍）–&gt; 无需权限 –&gt; 存储访问框架（加载系统的文件选择器）–&gt;卸载应用时不移除文件</li></ul></blockquote><h2 id="Android-R-再出发"><a href="#Android-R-再出发" class="headerlink" title="Android R 再出发"></a>Android R 再出发</h2><h3 id="一、变化"><a href="#一、变化" class="headerlink" title="一、变化"></a>一、变化</h3><h4 id="1-分区存储强制执行"><a href="#1-分区存储强制执行" class="headerlink" title="1. 分区存储强制执行"></a>1. 分区存储强制执行</h4><p><strong>requestLegacyExternalStorage</strong> 是为了给开发人员更多的测试时间，在Android 10上设置的一个开关值</p><p>在 Android 11 上发生了变更</p><blockquote><ul><li>目标版本 <code>API &lt; = 29 时</code>, 应用仍可请求 <span class="exturl" data-url="aHR0cHM6Ly9kZXZlbG9wZXIuYW5kcm9pZC5nb29nbGUuY24vcmVmZXJlbmNlL2FuZHJvaWQvUi5hdHRyI3JlcXVlc3RMZWdhY3lFeHRlcm5hbFN0b3JhZ2U=" title="https://developer.android.google.cn/reference/android/R.attr#requestLegacyExternalStorage">requestLegacyExternalStorage<i class="fa fa-external-link"></i></span> 属性。应用可以利用此标记暂时停用与分区存储相关的变更，例如授予对不同目录和不同类型的媒体文件的访问权限。</li></ul></blockquote><blockquote><ul><li>目标版本 <code>API &gt; 29</code>，将无法使用 <strong>requestLegacyExternalStorage</strong>，而且也没有其他标记可以提供该停用功能。</li></ul></blockquote><h4 id="2-媒体文件访问权限"><a href="#2-媒体文件访问权限" class="headerlink" title="2. 媒体文件访问权限"></a>2. 媒体文件访问权限</h4><p>为了在保证用户隐私的同时可以更轻松地访问媒体，Android 11 增加了以下功能。</p><p>(1) 执行批量操作</p><p><span class="exturl" data-url="aHR0cHM6Ly9kZXZlbG9wZXIuYW5kcm9pZC5nb29nbGUuY24vcmVmZXJlbmNlL2FuZHJvaWQvcHJvdmlkZXIvTWVkaWFTdG9yZQ==" title="https://developer.android.google.cn/reference/android/provider/MediaStore">MediaStore API<i class="fa fa-external-link"></i></span> 新增方法</p><table><thead><tr><th>方法</th><th>说明</th></tr></thead><tbody><tr><td><span class="exturl" data-url="aHR0cHM6Ly9kZXZlbG9wZXIuYW5kcm9pZC5nb29nbGUuY24vcmVmZXJlbmNlL2FuZHJvaWQvcHJvdmlkZXIvTWVkaWFTdG9yZSNjcmVhdGVEZWxldGVSZXF1ZXN0KGFuZHJvaWQuY29udGVudC5Db250ZW50UmVzb2x2ZXIsJTIwamF2YS51dGlsLkNvbGxlY3Rpb24lM0NhbmRyb2lkLm5ldC5VcmklM0Up" title="https://developer.android.google.cn/reference/android/provider/MediaStore#createDeleteRequest(android.content.ContentResolver,%20java.util.Collection%3Candroid.net.Uri%3E)">createWriteRequest<i class="fa fa-external-link"></i></span> (ContentResolver, Collection<uri>)</uri></td><td>用户向应用授予对指定媒体文件组的写入访问权限的请求。</td></tr><tr><td><span class="exturl" data-url="aHR0cHM6Ly9kZXZlbG9wZXIuYW5kcm9pZC5nb29nbGUuY24vcmVmZXJlbmNlL2FuZHJvaWQvcHJvdmlkZXIvTWVkaWFTdG9yZSNjcmVhdGVGYXZvcml0ZVJlcXVlc3QoYW5kcm9pZC5jb250ZW50LkNvbnRlbnRSZXNvbHZlciwlMjBqYXZhLnV0aWwuQ29sbGVjdGlvbiUzQ2FuZHJvaWQubmV0LlVyaSUzRSwlMjBib29sZWFuKQ==" title="https://developer.android.google.cn/reference/android/provider/MediaStore#createFavoriteRequest(android.content.ContentResolver,%20java.util.Collection%3Candroid.net.Uri%3E,%20boolean)">createFavoriteRequest<i class="fa fa-external-link"></i></span> (ContentResolver, Collection<uri>, boolean)</uri></td><td>用户将设备上指定的媒体文件标记为“收藏”的请求。对该文件具有读取访问权限的任何应用都可以看到用户已将该文件标记为“收藏”。</td></tr><tr><td><span class="exturl" data-url="aHR0cHM6Ly9kZXZlbG9wZXIuYW5kcm9pZC5nb29nbGUuY24vcmVmZXJlbmNlL2FuZHJvaWQvcHJvdmlkZXIvTWVkaWFTdG9yZSNjcmVhdGVUcmFzaFJlcXVlc3QoYW5kcm9pZC5jb250ZW50LkNvbnRlbnRSZXNvbHZlciwlMjBqYXZhLnV0aWwuQ29sbGVjdGlvbiUzQ2FuZHJvaWQubmV0LlVyaSUzRSwlMjBib29sZWFuKQ==" title="https://developer.android.google.cn/reference/android/provider/MediaStore#createTrashRequest(android.content.ContentResolver,%20java.util.Collection%3Candroid.net.Uri%3E,%20boolean)">createTrashRequest<i class="fa fa-external-link"></i></span> (ContentResolver, Collection<uri>, boolean)</uri></td><td>用户将指定的媒体文件放入设备垃圾箱的请求。垃圾箱中的内容在特定时间段（默认为 7 天）后会永久删除。</td></tr><tr><td><span class="exturl" data-url="aHR0cHM6Ly9kZXZlbG9wZXIuYW5kcm9pZC5nb29nbGUuY24vcmVmZXJlbmNlL2FuZHJvaWQvcHJvdmlkZXIvTWVkaWFTdG9yZSNjcmVhdGVXcml0ZVJlcXVlc3QoYW5kcm9pZC5jb250ZW50LkNvbnRlbnRSZXNvbHZlciwlMjBqYXZhLnV0aWwuQ29sbGVjdGlvbiUzQ2FuZHJvaWQubmV0LlVyaSUzRSk=" title="https://developer.android.google.cn/reference/android/provider/MediaStore#createWriteRequest(android.content.ContentResolver,%20java.util.Collection%3Candroid.net.Uri%3E)">createDeleteRequest<i class="fa fa-external-link"></i></span> (ContentResolver, Collection<uri>)</uri></td><td>用户立即永久删除指定的媒体文件（而不是先将其放入垃圾箱）的请求。</td></tr></tbody></table><p>系统在调用以上任何一个方法后，会构建一个 <span class="exturl" data-url="aHR0cHM6Ly9kZXZlbG9wZXIuYW5kcm9pZC5nb29nbGUuY24vcmVmZXJlbmNlL2FuZHJvaWQvYXBwL1BlbmRpbmdJbnRlbnQ=" title="https://developer.android.google.cn/reference/android/app/PendingIntent">PendingIntent<i class="fa fa-external-link"></i></span> 对象。应用调用此 intent 后，用户会看到一个对话框，请求用户同意应用更新或删除指定的媒体文件。</p><p>(2) 使用原始路径访问文件</p><p>从 Android 11 开始，具有 <span class="exturl" data-url="aHR0cHM6Ly9kZXZlbG9wZXIuYW5kcm9pZC5nb29nbGUuY24vcmVmZXJlbmNlL2FuZHJvaWQvTWFuaWZlc3QucGVybWlzc2lvbiNSRUFEX0VYVEVSTkFMX1NUT1JBR0U=" title="https://developer.android.google.cn/reference/android/Manifest.permission#READ_EXTERNAL_STORAGE">READ_EXTERNAL_STORAGE<i class="fa fa-external-link"></i></span> 权限的应用可以使用直接文件路径（如：  /sdcard/DCIM/xxx.JPG` 的格式）和原生库来读取设备的媒体文件。通过这项新功能，应用可以更顺畅地使用第三方媒体库。</p><blockquote><p> 注意：使用直接路径和原生库保存媒体文件时，应用的性能会略有下降。请尽可能改用 <span class="exturl" data-url="aHR0cHM6Ly9kZXZlbG9wZXIuYW5kcm9pZC5nb29nbGUuY24vdHJhaW5pbmcvZGF0YS1zdG9yYWdlL3NoYXJlZC9tZWRpYQ==" title="https://developer.android.google.cn/training/data-storage/shared/media">MediaStore API<i class="fa fa-external-link"></i></span>。</p></blockquote><p>(3) 测试原始文件路径访问</p><blockquote><p>要激活此功能以进行测试，请执行以下操作：</p><ol><li>打开系统设置。</li><li>导航到 <strong>系统</strong> &gt; <strong>开发者选项</strong> &gt; <strong>功能标记</strong>。</li><li>找到 <code>settings_fuse</code> 并启用。<code>settings_fuse</code> 下的说明现在应显示为 <code>true</code>。</li><li>重启设备。</li></ol></blockquote><h4 id="3-文件和目录访问限制"><a href="#3-文件和目录访问限制" class="headerlink" title="3. 文件和目录访问限制"></a>3. 文件和目录访问限制</h4><p>以下是以下是存储访问框架 ( SAF: Storage Access Framerwork API ) 相关的变更</p><h5 id="1-访问目录"><a href="#1-访问目录" class="headerlink" title="(1) 访问目录"></a>(1) 访问目录</h5><p>您无法再使用 <span class="exturl" data-url="aHR0cHM6Ly9kZXZlbG9wZXIuYW5kcm9pZC5nb29nbGUuY24vcmVmZXJlbmNlL2FuZHJvaWQvY29udGVudC9JbnRlbnQjQUNUSU9OX09QRU5fRE9DVU1FTlRfVFJFRQ==" title="https://developer.android.google.cn/reference/android/content/Intent#ACTION_OPEN_DOCUMENT_TREE">ACTION_OPEN_DOCUMENT_TREE<i class="fa fa-external-link"></i></span> intent 操作来请求访问以下目录：</p><blockquote><ul><li>Downloads 根目录</li><li>设备制造商认为可靠的各个 SD 卡卷的根目录，无论该卡是模拟卡还是可移除的卡。</li></ul></blockquote><h5 id="2-访问文件"><a href="#2-访问文件" class="headerlink" title="(2) 访问文件"></a>(2) 访问文件</h5><p>您无法再使用 ACTION_OPEN_DOCUMENT_TREE 或 <span class="exturl" data-url="aHR0cHM6Ly9kZXZlbG9wZXIuYW5kcm9pZC5nb29nbGUuY24vcmVmZXJlbmNlL2FuZHJvaWQvY29udGVudC9JbnRlbnQjQUNUSU9OX09QRU5fRE9DVU1FTlQ=" title="https://developer.android.google.cn/reference/android/content/Intent#ACTION_OPEN_DOCUMENT">ACTION_OPEN_DOCUMENT<i class="fa fa-external-link"></i></span> intent 操作来请求用户从以下目录中选择单独的文件：</p><blockquote><ul><li><code>Android/data/</code> 目录及其所有子目录。</li><li><code>Android/obb/</code> 目录及其所有子目录</li></ul></blockquote><h5 id="3-测试变更"><a href="#3-测试变更" class="headerlink" title="(3) 测试变更"></a>(3) 测试变更</h5><p>要测试此行为变更，请在应用的清单文件中将 <code>requestLegacyExternalStorage</code> 的值设置为 <code>false</code>。您可通过执行以下操作来确认行为变更是否已对应用生效：</p><blockquote><ul><li>通过 <code>ACTION_OPEN_DOCUMENT_TREE</code> 操作调用 intent。检查 <code>Downloads</code> 目录是否显示并呈灰显状态。</li><li>通过 <code>ACTION_OPEN_DOCUMENT</code> 操作调用 intent。检查 <code>Android/data/</code> 和 <code>Android/obb/</code> 目录是否都不显示。</li></ul></blockquote><h4 id="4-权限"><a href="#4-权限" class="headerlink" title="4. 权限"></a>4. 权限</h4><blockquote><p>在 Android 11 上，您会看到两种权限请求的字符串，这个取决于应用的目标 SDK 版本, 如果目标版本在 Android 11，那么只请求在外部存储中访问媒体文件，如果是其他目标版本,那么将显示的是旧版本的权限请求字符串</p></blockquote><h5 id="1-以任何版本为目标平台"><a href="#1-以任何版本为目标平台" class="headerlink" title="(1) 以任何版本为目标平台"></a>(1) 以任何版本为目标平台</h5><p>不管应用的目标 SDK 版本是什么，以下变更均会在 Android 11 中生效：</p><blockquote><ul><li><strong>存储</strong> 运行时权限已重命名为 <strong>文件</strong> 和 <strong>媒体</strong>。</li><li>如果应用未选择停用<span class="exturl" data-url="aHR0cHM6Ly9kZXZlbG9wZXIuYW5kcm9pZC5nb29nbGUuY24vdHJhaW5pbmcvZGF0YS1zdG9yYWdlI3Njb3BlZC1zdG9yYWdl" title="https://developer.android.google.cn/training/data-storage#scoped-storage">分区存储<i class="fa fa-external-link"></i></span>，并且请求 <span class="exturl" data-url="aHR0cHM6Ly9kZXZlbG9wZXIuYW5kcm9pZC5nb29nbGUuY24vcmVmZXJlbmNlL2FuZHJvaWQvTWFuaWZlc3QucGVybWlzc2lvbiNSRUFEX0VYVEVSTkFMX1NUT1JBR0U=" title="https://developer.android.google.cn/reference/android/Manifest.permission#READ_EXTERNAL_STORAGE">READ_EXTERNAL_STORAGE<i class="fa fa-external-link"></i></span> 权限，则用户会看到不同于 Android 10 的对话框。该对话框会指示应用正在请求访问照片、视频、音频剪辑和文件。在系统设置的<strong>设置</strong> &gt; <strong>隐私</strong> &gt; <strong>权限管理器</strong> &gt; <strong>文件和媒体</strong>页面中，如果已授予权限，应用会列在<strong>允许存储所有文件</strong>下。</li></ul></blockquote><h5 id="2-以-Android-11-为目标平台"><a href="#2-以-Android-11-为目标平台" class="headerlink" title="(2) 以 Android 11 为目标平台"></a>(2) 以 Android 11 为目标平台</h5><p>则 <code>WRITE_EXTERNAL_STORAGE</code> 权限和 <code>WRITE_MEDIA_STORAGE</code>特许权限将不再提供任何其他访问权限。</p><h4 id="5-所有文件访问权限"><a href="#5-所有文件访问权限" class="headerlink" title="5. 所有文件访问权限"></a>5. 所有文件访问权限</h4><p>像文件管理操作或备份和还原操作等需要访问大量的文件,通过执行以下操作，这些应用可以获得”所有文件访问权限”：</p><blockquote><ul><li>声明 <code>MANAGE_EXTERNAL_STORAGE</code> 权限</li><li>将用户引导至系统设置页面，在该页面上，用户可以对应用启用<strong>授予所有文件的管理权限</strong>选项</li></ul></blockquote><p>简单说，像这种文件管理器、备份及存储类应用。你需要在 Google Play Developer Console上填写声明表格说明为什么需要改权限，提交之后会被审核是否加入白名单，一旦加入成功以后，您的应用就可以向用户索要权限了，如果用户也同意您应用的访问权限请求，MadiaStore 访问将不再过滤，包括非媒体库文件。但是获得此权限的应用仍然无法访问这些目录在存储卷上显示为 <code>Android/data/</code>的子目录，也就是属于其他应用的应用专属目录。</p><p><code>MANAGE_EXTERNAL_STORAGE</code> 权限允许应用访问共享的存储空间中的潜在敏感数据。</p><h3 id="二、示例"><a href="#二、示例" class="headerlink" title="二、示例"></a>二、示例</h3><p><img alt="scoped-storage-on-android-11-1.png" data-src="/images/scoped-storage-on-android-11-1.png"></p><p>按照上面 Q ~ R 这一些列规则点，我们可以将示例进行分类如下</p><blockquote><ul><li>按照系统版本分类：Android Q 、 Android R</li><li>按照分区存储分类：媒体文件集 、下载文件集、App应用程序专属特定目录</li><li>按照文件归属分类：自己应用和其他应用</li><li>按照文件类型分类：媒体集（图片、视频、音频 .etc）、非媒体（PDF,DOC,XLS .etc）</li><li>按照操作行为分类：增、删、改、查</li></ul></blockquote><p>那么接下来示例，我将会按照以上的<code>5大分类</code>，结合两个版本代码简单说明</p><p>然后呢？我们该怎么做？</p><p>其实逻辑代码我们可以简化理解这么去定义</p><blockquote><ul><li>一个 <code>Media</code> 操作类：包括了（图片、视频、音频）他们3类分别的增、删、改、查</li><li>一个 <code>Download</code> 操作类：包括了非媒体的增、删、改、查</li><li>一个<code>Assets</code>操作类：负责从asset下拷贝文件到本地演示</li></ul></blockquote><p>开发环境：</p><blockquote><ul><li>Android Studio 4.1 canary 2</li><li>Android R 模拟器 / 真机</li></ul></blockquote><h4 id="Media-类"><a href="#Media-类" class="headerlink" title="Media 类"></a>Media 类</h4><p>[MyMediaCollection.kt]</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br><span class="line">287</span><br><span class="line">288</span><br><span class="line">289</span><br><span class="line">290</span><br><span class="line">291</span><br><span class="line">292</span><br><span class="line">293</span><br><span class="line">294</span><br><span class="line">295</span><br><span class="line">296</span><br><span class="line">297</span><br><span class="line">298</span><br><span class="line">299</span><br><span class="line">300</span><br><span class="line">301</span><br><span class="line">302</span><br><span class="line">303</span><br><span class="line">304</span><br><span class="line">305</span><br><span class="line">306</span><br><span class="line">307</span><br><span class="line">308</span><br><span class="line">309</span><br><span class="line">310</span><br><span class="line">311</span><br><span class="line">312</span><br><span class="line">313</span><br><span class="line">314</span><br><span class="line">315</span><br><span class="line">316</span><br><span class="line">317</span><br><span class="line">318</span><br><span class="line">319</span><br><span class="line">320</span><br><span class="line">321</span><br><span class="line">322</span><br><span class="line">323</span><br><span class="line">324</span><br><span class="line">325</span><br><span class="line">326</span><br><span class="line">327</span><br><span class="line">328</span><br><span class="line">329</span><br><span class="line">330</span><br><span class="line">331</span><br><span class="line">332</span><br><span class="line">333</span><br><span class="line">334</span><br><span class="line">335</span><br><span class="line">336</span><br><span class="line">337</span><br><span class="line">338</span><br><span class="line">339</span><br><span class="line">340</span><br><span class="line">341</span><br><span class="line">342</span><br><span class="line">343</span><br><span class="line">344</span><br><span class="line">345</span><br><span class="line">346</span><br><span class="line">347</span><br><span class="line">348</span><br><span class="line">349</span><br><span class="line">350</span><br><span class="line">351</span><br><span class="line">352</span><br><span class="line">353</span><br><span class="line">354</span><br><span class="line">355</span><br><span class="line">356</span><br><span class="line">357</span><br><span class="line">358</span><br><span class="line">359</span><br><span class="line">360</span><br><span class="line">361</span><br><span class="line">362</span><br><span class="line">363</span><br><span class="line">364</span><br><span class="line">365</span><br><span class="line">366</span><br><span class="line">367</span><br><span class="line">368</span><br><span class="line">369</span><br><span class="line">370</span><br><span class="line">371</span><br><span class="line">372</span><br><span class="line">373</span><br><span class="line">374</span><br><span class="line">375</span><br><span class="line">376</span><br><span class="line">377</span><br><span class="line">378</span><br><span class="line">379</span><br><span class="line">380</span><br><span class="line">381</span><br><span class="line">382</span><br><span class="line">383</span><br><span class="line">384</span><br><span class="line">385</span><br><span class="line">386</span><br><span class="line">387</span><br><span class="line">388</span><br><span class="line">389</span><br><span class="line">390</span><br><span class="line">391</span><br><span class="line">392</span><br><span class="line">393</span><br><span class="line">394</span><br><span class="line">395</span><br><span class="line">396</span><br><span class="line">397</span><br><span class="line">398</span><br><span class="line">399</span><br><span class="line">400</span><br><span class="line">401</span><br><span class="line">402</span><br><span class="line">403</span><br><span class="line">404</span><br><span class="line">405</span><br><span class="line">406</span><br><span class="line">407</span><br><span class="line">408</span><br><span class="line">409</span><br><span class="line">410</span><br><span class="line">411</span><br><span class="line">412</span><br><span class="line">413</span><br><span class="line">414</span><br><span class="line">415</span><br><span class="line">416</span><br><span class="line">417</span><br><span class="line">418</span><br><span class="line">419</span><br><span class="line">420</span><br><span class="line">421</span><br><span class="line">422</span><br><span class="line">423</span><br><span class="line">424</span><br><span class="line">425</span><br><span class="line">426</span><br><span class="line">427</span><br><span class="line">428</span><br><span class="line">429</span><br><span class="line">430</span><br><span class="line">431</span><br><span class="line">432</span><br><span class="line">433</span><br><span class="line">434</span><br><span class="line">435</span><br><span class="line">436</span><br><span class="line">437</span><br><span class="line">438</span><br><span class="line">439</span><br><span class="line">440</span><br><span class="line">441</span><br><span class="line">442</span><br><span class="line">443</span><br><span class="line">444</span><br><span class="line">445</span><br><span class="line">446</span><br><span class="line">447</span><br><span class="line">448</span><br><span class="line">449</span><br><span class="line">450</span><br><span class="line">451</span><br><span class="line">452</span><br><span class="line">453</span><br><span class="line">454</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyMediaCollection</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//图片实体类</span></span><br><span class="line">    <span class="keyword">data</span> <span class="class"><span class="keyword">class</span> <span class="title">ImageBean</span></span>(</span><br><span class="line">        <span class="keyword">val</span> uri: Uri,</span><br><span class="line">        <span class="keyword">val</span> name: String,</span><br><span class="line">        <span class="keyword">val</span> mimeType: String,</span><br><span class="line">        <span class="keyword">val</span> size: <span class="built_in">Int</span></span><br><span class="line">    )</span><br><span class="line"></span><br><span class="line">    <span class="comment">//视频实体类</span></span><br><span class="line">    <span class="keyword">data</span> <span class="class"><span class="keyword">class</span> <span class="title">VideoBean</span></span>(</span><br><span class="line">        <span class="keyword">val</span> uri: Uri,</span><br><span class="line">        <span class="keyword">val</span> name: String,</span><br><span class="line">        <span class="keyword">val</span> mimeType: String,</span><br><span class="line">        <span class="keyword">val</span> duration: <span class="built_in">Int</span>,</span><br><span class="line">        <span class="keyword">val</span> size: <span class="built_in">Int</span></span><br><span class="line">    )</span><br><span class="line"></span><br><span class="line">    <span class="comment">//音频实体类</span></span><br><span class="line">    <span class="keyword">data</span> <span class="class"><span class="keyword">class</span> <span class="title">AudioBean</span></span>(</span><br><span class="line">        <span class="keyword">val</span> uri: Uri,</span><br><span class="line">        <span class="keyword">val</span> name: String,</span><br><span class="line">        <span class="keyword">val</span> mimeType: String,</span><br><span class="line">        <span class="keyword">val</span> duration: <span class="built_in">Int</span>,</span><br><span class="line">        <span class="keyword">val</span> size: <span class="built_in">Int</span></span><br><span class="line">    )</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Query [ 图片媒体集 ] 包括： DCIM/ 和 Pictures/ 目录</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">fun</span> <span class="title">queryImageCollection</span><span class="params">(context: <span class="type">Context</span>)</span></span>: MutableList&lt;ImageBean&gt; &#123;</span><br><span class="line">        Log.d(TAG, <span class="string">"########### 图片媒体集 ############"</span>)</span><br><span class="line">        <span class="keyword">val</span> imageBeanList = mutableListOf&lt;ImageBean&gt;()</span><br><span class="line">        <span class="comment">//定义内容解析器</span></span><br><span class="line">        <span class="keyword">val</span> contentResolver = context.contentResolver</span><br><span class="line">        <span class="comment">//指定查询的列名</span></span><br><span class="line">        <span class="keyword">val</span> photoColumns = arrayOf(</span><br><span class="line">            MediaStore.Images.Media._ID,</span><br><span class="line">            MediaStore.Images.Media.TITLE,</span><br><span class="line">            MediaStore.Images.Media.MIME_TYPE,</span><br><span class="line">            MediaStore.Images.Media.SIZE</span><br><span class="line">        )</span><br><span class="line">        <span class="keyword">val</span> cursor = contentResolver.query(</span><br><span class="line">            MediaStore.Images.Media.EXTERNAL_CONTENT_URI, <span class="comment">//指定查询哪张表的URI</span></span><br><span class="line">            photoColumns, <span class="comment">// 指定查询的列明</span></span><br><span class="line">            <span class="literal">null</span>, <span class="comment">//指定where的约束条件</span></span><br><span class="line">            <span class="literal">null</span>, <span class="comment">//为where中的占位符提供具体的值</span></span><br><span class="line">            <span class="literal">null</span> <span class="comment">// 指定查询结果的排序方式</span></span><br><span class="line">        )</span><br><span class="line"></span><br><span class="line">        <span class="keyword">val</span> count = cursor!!.count</span><br><span class="line">        Log.d(TAG, <span class="string">"imageCollection count: --&gt; <span class="variable">$count</span>"</span>)</span><br><span class="line"></span><br><span class="line">        cursor.use &#123;</span><br><span class="line">            <span class="keyword">while</span> (cursor.moveToNext()) &#123;</span><br><span class="line">                <span class="keyword">val</span> id = cursor.getString(cursor.getColumnIndexOrThrow(MediaStore.Images.Media._ID))</span><br><span class="line">                <span class="keyword">val</span> title =</span><br><span class="line">                    cursor.getString(cursor.getColumnIndexOrThrow(MediaStore.Images.Media.TITLE))</span><br><span class="line">                <span class="keyword">val</span> mimeType =</span><br><span class="line">                    cursor.getString(cursor.getColumnIndexOrThrow(MediaStore.Images.Media.MIME_TYPE))</span><br><span class="line">                <span class="keyword">val</span> size =</span><br><span class="line">                    cursor.getString(cursor.getColumnIndexOrThrow(MediaStore.Images.Media.SIZE))</span><br><span class="line">                <span class="keyword">val</span> contentUri = ContentUris.withAppendedId(</span><br><span class="line">                    MediaStore.Images.Media.EXTERNAL_CONTENT_URI,</span><br><span class="line">                    cursor.getLong(cursor.getColumnIndex(BaseColumns._ID))</span><br><span class="line">                )</span><br><span class="line">                Log.d(</span><br><span class="line">                    TAG,</span><br><span class="line">                    <span class="string">"imageCollection id =<span class="variable">$id</span>\ntitle = <span class="variable">$title</span>\nmime_type: =<span class="variable">$mimeType</span>\nsize: =\t<span class="variable">$size</span>\ncontentUri: =\t<span class="variable">$contentUri</span>\n"</span></span><br><span class="line">                )</span><br><span class="line">                <span class="keyword">val</span> imageBean = ImageBean(</span><br><span class="line">                    uri = contentUri,</span><br><span class="line">                    name = title,</span><br><span class="line">                    mimeType = mimeType,</span><br><span class="line">                    size = size.toInt()</span><br><span class="line">                )</span><br><span class="line">                imageBeanList += imageBean</span><br><span class="line"></span><br><span class="line">            &#125;</span><br><span class="line">            cursor.close()</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> imageBeanList</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Query [ 视频媒体集 ] 包括： DCIM/, Movies/, 和 Pictures/ 目录</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">fun</span> <span class="title">queryVideoCollection</span><span class="params">(context: <span class="type">Context</span>)</span></span>: MutableList&lt;VideoBean&gt; &#123;</span><br><span class="line">        Log.d(TAG, <span class="string">"########### 视频媒体集 ############"</span>)</span><br><span class="line">        <span class="keyword">val</span> videoBeanList = mutableListOf&lt;VideoBean&gt;()</span><br><span class="line">        <span class="keyword">val</span> contentResolver = context.contentResolver</span><br><span class="line">        <span class="keyword">val</span> videoColumns = arrayOf(</span><br><span class="line">            MediaStore.Video.Media._ID,</span><br><span class="line">            MediaStore.Video.Media.TITLE,</span><br><span class="line">            MediaStore.Video.Media.DURATION,</span><br><span class="line">            MediaStore.Video.Media.MIME_TYPE,</span><br><span class="line">            MediaStore.Video.Media.SIZE</span><br><span class="line">        )</span><br><span class="line">        <span class="keyword">val</span> cursor = contentResolver.query(</span><br><span class="line">            MediaStore.Video.Media.EXTERNAL_CONTENT_URI,</span><br><span class="line">            videoColumns,</span><br><span class="line">            <span class="literal">null</span>,</span><br><span class="line">            <span class="literal">null</span>,</span><br><span class="line">            <span class="literal">null</span></span><br><span class="line">        )</span><br><span class="line"></span><br><span class="line">        <span class="keyword">val</span> count = cursor!!.count</span><br><span class="line">        Log.d(TAG, <span class="string">"videoCollection count: --&gt; <span class="variable">$count</span>"</span>)</span><br><span class="line"></span><br><span class="line">        cursor.use &#123;</span><br><span class="line">            <span class="keyword">while</span> (cursor.moveToNext()) &#123;</span><br><span class="line">                <span class="keyword">val</span> id = cursor.getString(cursor.getColumnIndexOrThrow(MediaStore.Video.Media._ID))</span><br><span class="line">                <span class="keyword">val</span> title =</span><br><span class="line">                    cursor.getString(cursor.getColumnIndexOrThrow(MediaStore.Video.Media.TITLE))</span><br><span class="line">                <span class="keyword">val</span> mimeType =</span><br><span class="line">                    cursor.getString(cursor.getColumnIndexOrThrow(MediaStore.Video.Media.MIME_TYPE))</span><br><span class="line">                <span class="keyword">val</span> duration =</span><br><span class="line">                    cursor.getInt(cursor.getColumnIndexOrThrow(MediaStore.Video.Media.DURATION))</span><br><span class="line">                <span class="keyword">val</span> size =</span><br><span class="line">                    cursor.getInt(cursor.getColumnIndexOrThrow(MediaStore.Video.Media.SIZE))</span><br><span class="line">                <span class="keyword">val</span> contentUri = ContentUris.withAppendedId(</span><br><span class="line">                    MediaStore.Video.Media.EXTERNAL_CONTENT_URI,</span><br><span class="line">                    cursor.getLong(cursor.getColumnIndex(BaseColumns._ID))</span><br><span class="line">                )</span><br><span class="line">                Log.d(</span><br><span class="line">                    TAG,</span><br><span class="line">                    <span class="string">"imageCollection id =<span class="variable">$id</span>\ntitle = <span class="variable">$title</span>\nmime_type: =<span class="variable">$mimeType</span>\nduration=<span class="variable">$duration</span>\nsize: =\t<span class="variable">$size</span>\ncontentUri: =\t<span class="variable">$contentUri</span>\n"</span></span><br><span class="line">                )</span><br><span class="line">                <span class="keyword">val</span> videoBean = VideoBean(</span><br><span class="line">                    uri = contentUri,</span><br><span class="line">                    name = title,</span><br><span class="line">                    mimeType = mimeType,</span><br><span class="line">                    duration = duration,</span><br><span class="line">                    size = size</span><br><span class="line">                )</span><br><span class="line">                videoBeanList += videoBean</span><br><span class="line"></span><br><span class="line">            &#125;</span><br><span class="line">            cursor.close()</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> videoBeanList</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Query [ 音频媒体集 ] 包括： Alarms/, Audiobooks/, Music/, Notifications/, Podcasts/, 和 Ringtones/ 目录</span></span><br><span class="line"><span class="comment">     * 以及 Music/ 和 Movies/ 目录中的音频文件</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">fun</span> <span class="title">queryAudioCollection</span><span class="params">(context: <span class="type">Context</span>)</span></span>: MutableList&lt;AudioBean&gt; &#123;</span><br><span class="line">        Log.d(TAG, <span class="string">"########### 音频媒体集 ############"</span>)</span><br><span class="line">        <span class="keyword">val</span> audioBeanList = mutableListOf&lt;AudioBean&gt;()</span><br><span class="line">        <span class="keyword">val</span> contentResolver = context.contentResolver</span><br><span class="line">        <span class="keyword">val</span> videoColumns = arrayOf(</span><br><span class="line">            MediaStore.Audio.Media._ID,</span><br><span class="line">            MediaStore.Audio.Media.TITLE,</span><br><span class="line">            MediaStore.Audio.Media.DURATION,</span><br><span class="line">            MediaStore.Audio.Media.MIME_TYPE,</span><br><span class="line">            MediaStore.Audio.Media.SIZE</span><br><span class="line">        )</span><br><span class="line">        <span class="keyword">val</span> cursor = contentResolver.query(</span><br><span class="line">            MediaStore.Audio.Media.EXTERNAL_CONTENT_URI,</span><br><span class="line">            videoColumns,</span><br><span class="line">            <span class="literal">null</span>,</span><br><span class="line">            <span class="literal">null</span>,</span><br><span class="line">            <span class="literal">null</span></span><br><span class="line">        )</span><br><span class="line"></span><br><span class="line">        <span class="keyword">val</span> count = cursor!!.count</span><br><span class="line">        Log.d(TAG, <span class="string">"audioCollection count: --&gt; <span class="variable">$count</span>"</span>)</span><br><span class="line"></span><br><span class="line">        cursor.use &#123;</span><br><span class="line">            <span class="keyword">while</span> (cursor.moveToNext()) &#123;</span><br><span class="line">                <span class="keyword">val</span> id = cursor.getString(cursor.getColumnIndexOrThrow(MediaStore.Video.Media._ID))</span><br><span class="line">                <span class="keyword">val</span> title =</span><br><span class="line">                    cursor.getString(cursor.getColumnIndexOrThrow(MediaStore.Video.Media.TITLE))</span><br><span class="line">                <span class="keyword">val</span> mimeType =</span><br><span class="line">                    cursor.getString(cursor.getColumnIndexOrThrow(MediaStore.Video.Media.MIME_TYPE))</span><br><span class="line">                <span class="keyword">val</span> duration =</span><br><span class="line">                    cursor.getInt(cursor.getColumnIndexOrThrow(MediaStore.Video.Media.DURATION))</span><br><span class="line">                <span class="keyword">val</span> size =</span><br><span class="line">                    cursor.getInt(cursor.getColumnIndexOrThrow(MediaStore.Video.Media.SIZE))</span><br><span class="line">                <span class="keyword">val</span> contentUri = ContentUris.withAppendedId(</span><br><span class="line">                    MediaStore.Audio.Media.EXTERNAL_CONTENT_URI,</span><br><span class="line">                    cursor.getLong(cursor.getColumnIndex(BaseColumns._ID))</span><br><span class="line">                )</span><br><span class="line">                Log.d(</span><br><span class="line">                    TAG,</span><br><span class="line">                    <span class="string">"audioCollection id =<span class="variable">$id</span>\ntitle = <span class="variable">$title</span>\nmime_type: =<span class="variable">$mimeType</span>\nduration=<span class="variable">$duration</span>\nsize: =\t<span class="variable">$size</span>\ncontentUri: =\t<span class="variable">$contentUri</span>\n"</span></span><br><span class="line">                )</span><br><span class="line">                <span class="keyword">val</span> audioBean = AudioBean(</span><br><span class="line">                    uri = contentUri,</span><br><span class="line">                    name = title,</span><br><span class="line">                    mimeType = mimeType,</span><br><span class="line">                    duration = duration,</span><br><span class="line">                    size = size</span><br><span class="line">                )</span><br><span class="line">                audioBeanList += audioBean</span><br><span class="line"></span><br><span class="line">            &#125;</span><br><span class="line">            cursor.close()</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> audioBeanList</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     *  Insert [ 图片媒体集 ]</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">fun</span> <span class="title">insertImageToCollection</span><span class="params">(context: <span class="type">Context</span>, disPlayName: <span class="type">String</span>)</span></span> &#123;</span><br><span class="line">        Log.d(</span><br><span class="line">            TAG,</span><br><span class="line">            <span class="string">"insertImageToCollection() called with: context = <span class="variable">$context</span>, disPlayName = <span class="variable">$disPlayName</span>"</span></span><br><span class="line">        )</span><br><span class="line">        <span class="keyword">val</span> contentResolver = context.contentResolver</span><br><span class="line">        <span class="comment">//在主要外部存储设备上查找所有图片文件 (API &lt;= 28 使用 VOLUME_EXTERNAL 代替)</span></span><br><span class="line">        <span class="keyword">val</span> imageCollection = MediaStore.Images.Media.getContentUri(</span><br><span class="line">            MediaStore.VOLUME_EXTERNAL_PRIMARY</span><br><span class="line">        )</span><br><span class="line">        <span class="keyword">val</span> contentValues = ContentValues().apply &#123;</span><br><span class="line">            <span class="comment">//配置图片的显示名称</span></span><br><span class="line">            put(MediaStore.Images.Media.DISPLAY_NAME, disPlayName)</span><br><span class="line">            <span class="comment">//配置图片的状态为：等待中...</span></span><br><span class="line">            put(MediaStore.Images.Media.IS_PENDING, <span class="number">1</span>)</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//开始插入图片</span></span><br><span class="line">        <span class="keyword">val</span> imageUri = contentResolver.insert(imageCollection, contentValues)</span><br><span class="line">        imageUri.let &#123;</span><br><span class="line">            contentResolver.openFileDescriptor(imageUri!!, <span class="string">"w"</span>, <span class="literal">null</span>).use &#123;</span><br><span class="line">                AssetHelper.copyAssetSingleFileToMedia(context, disPlayName, it!!)</span><br><span class="line">                contentValues.clear()</span><br><span class="line">                contentValues.put(MediaStore.Images.Media.IS_PENDING, <span class="number">0</span>)</span><br><span class="line">                contentResolver.update(imageUri, contentValues, <span class="literal">null</span>, <span class="literal">null</span>)</span><br><span class="line">                it.close()</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     *  Insert [ 视频媒体集 ]</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">fun</span> <span class="title">insertVideoToCollection</span><span class="params">(context: <span class="type">Context</span>, disPlayName: <span class="type">String</span>)</span></span> &#123;</span><br><span class="line">        Log.d(</span><br><span class="line">            TAG,</span><br><span class="line">            <span class="string">"insertVideoToCollection() called with: context = <span class="variable">$context</span>, disPlayName = <span class="variable">$disPlayName</span>"</span></span><br><span class="line">        )</span><br><span class="line">        <span class="keyword">val</span> contentResolver = context.contentResolver</span><br><span class="line">        <span class="comment">//在主要外部存储设备上查找所有视频文件 (API &lt;= 28 使用 VOLUME_EXTERNAL 代替)</span></span><br><span class="line">        <span class="keyword">val</span> videoCollection = MediaStore.Video.Media.getContentUri(</span><br><span class="line">            MediaStore.VOLUME_EXTERNAL_PRIMARY</span><br><span class="line">        )</span><br><span class="line">        <span class="keyword">val</span> contentValues = ContentValues().apply &#123;</span><br><span class="line">            <span class="comment">//配置视频的显示名称</span></span><br><span class="line">            put(MediaStore.Video.Media.DISPLAY_NAME, disPlayName)</span><br><span class="line">            <span class="comment">//配置视频的状态为：等待中...</span></span><br><span class="line">            put(MediaStore.Video.Media.IS_PENDING, <span class="number">1</span>)</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//开始插入视频</span></span><br><span class="line">        <span class="keyword">val</span> videoUri = contentResolver.insert(videoCollection, contentValues)</span><br><span class="line">        videoUri.let &#123;</span><br><span class="line">            contentResolver.openFileDescriptor(videoUri!!, <span class="string">"w"</span>, <span class="literal">null</span>).use &#123;</span><br><span class="line">                AssetHelper.copyAssetSingleFileToMedia(context, disPlayName, it!!)</span><br><span class="line">                contentValues.clear()</span><br><span class="line">                contentValues.put(MediaStore.Video.Media.IS_PENDING, <span class="number">0</span>)</span><br><span class="line">                contentResolver.update(videoUri, contentValues, <span class="literal">null</span>, <span class="literal">null</span>)</span><br><span class="line">                it.close()</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     *  Insert [ 音频媒体集 ]</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">fun</span> <span class="title">insertAudioToCollection</span><span class="params">(context: <span class="type">Context</span>, disPlayName: <span class="type">String</span>)</span></span> &#123;</span><br><span class="line">        Log.d(</span><br><span class="line">            TAG,</span><br><span class="line">            <span class="string">"insertAudioToCollection() called with: context = <span class="variable">$context</span>, disPlayName = <span class="variable">$disPlayName</span>"</span></span><br><span class="line">        )</span><br><span class="line">        <span class="keyword">val</span> contentResolver = context.contentResolver</span><br><span class="line">        <span class="comment">//在主要外部存储设备上查找所有音频文件 (API &lt;= 28 使用 VOLUME_EXTERNAL 代替)</span></span><br><span class="line">        <span class="keyword">val</span> audioCollection = MediaStore.Audio.Media.getContentUri(</span><br><span class="line">            MediaStore.VOLUME_EXTERNAL_PRIMARY</span><br><span class="line">        )</span><br><span class="line">        <span class="keyword">val</span> contentValues = ContentValues().apply &#123;</span><br><span class="line">            <span class="comment">//配置音频的显示名称</span></span><br><span class="line">            put(MediaStore.Audio.Media.DISPLAY_NAME, disPlayName)</span><br><span class="line">            <span class="comment">//配置音频的状态为：等待中...</span></span><br><span class="line">            put(MediaStore.Audio.Media.IS_PENDING, <span class="number">1</span>)</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//开始插入音频</span></span><br><span class="line">        <span class="keyword">val</span> audioUri = contentResolver.insert(audioCollection, contentValues)</span><br><span class="line">        audioUri.let &#123;</span><br><span class="line">            contentResolver.openFileDescriptor(audioUri!!, <span class="string">"w"</span>, <span class="literal">null</span>).use &#123;</span><br><span class="line">                AssetHelper.copyAssetSingleFileToMedia(context, disPlayName, it!!)</span><br><span class="line">                contentValues.clear()</span><br><span class="line">                contentValues.put(MediaStore.Audio.Media.IS_PENDING, <span class="number">0</span>)</span><br><span class="line">                contentResolver.update(audioUri, contentValues, <span class="literal">null</span>, <span class="literal">null</span>)</span><br><span class="line">                it.close()</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     *  Update [ 图片媒体集 ]</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">fun</span> <span class="title">updateImageCollection</span><span class="params">(context: <span class="type">Context</span>, id: <span class="type">Long</span>, newName: <span class="type">String</span>)</span></span> &#123;</span><br><span class="line">        <span class="keyword">val</span> contentResolver = context.contentResolver</span><br><span class="line">        <span class="keyword">val</span> selection = <span class="string">"<span class="subst">$&#123;MediaStore.Images.Media._ID&#125;</span> = ?"</span></span><br><span class="line">        <span class="keyword">val</span> selectionArgs = arrayOf(id.toString())</span><br><span class="line">        <span class="keyword">val</span> contentValues = ContentValues().apply &#123;</span><br><span class="line">            put(MediaStore.Images.Media.DISPLAY_NAME, newName)</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">val</span> imageUri = ContentUris.withAppendedId(MediaStore.Images.Media.EXTERNAL_CONTENT_URI, id)</span><br><span class="line">        imageUri.let &#123;</span><br><span class="line">            context.contentResolver.openFileDescriptor(imageUri, <span class="string">"w"</span>)?.use &#123;</span><br><span class="line">                <span class="keyword">val</span> result =</span><br><span class="line">                    contentResolver.update(imageUri, contentValues, selection, selectionArgs)</span><br><span class="line">                Log.d(TAG, <span class="string">"updateImageCollection() called : <span class="variable">$result</span>"</span>)</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     *  Update [ 视频媒体集 ]</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">fun</span> <span class="title">updateVideoCollection</span><span class="params">(context: <span class="type">Context</span>, id: <span class="type">Long</span>, newName: <span class="type">String</span>)</span></span> &#123;</span><br><span class="line">        <span class="keyword">val</span> contentResolver = context.contentResolver</span><br><span class="line">        <span class="keyword">val</span> selection = <span class="string">"<span class="subst">$&#123;MediaStore.Video.Media._ID&#125;</span> = ?"</span></span><br><span class="line">        <span class="keyword">val</span> selectionArgs = arrayOf(id.toString())</span><br><span class="line">        <span class="keyword">val</span> contentValues = ContentValues().apply &#123;</span><br><span class="line">            put(MediaStore.Video.Media.DISPLAY_NAME, newName)</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">val</span> videoUri = ContentUris.withAppendedId(MediaStore.Video.Media.EXTERNAL_CONTENT_URI, id)</span><br><span class="line">        videoUri.let &#123;</span><br><span class="line">            context.contentResolver.openFileDescriptor(videoUri, <span class="string">"w"</span>)?.use &#123;</span><br><span class="line">                <span class="keyword">val</span> result =</span><br><span class="line">                    contentResolver.update(videoUri, contentValues, selection, selectionArgs)</span><br><span class="line">                Log.d(TAG, <span class="string">"updateVideoCollection() called : <span class="variable">$result</span>"</span>)</span><br><span class="line">                it.close()</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     *  Update [ 音频媒体集 ]</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">fun</span> <span class="title">updateAudioCollection</span><span class="params">(context: <span class="type">Context</span>, id: <span class="type">Long</span>, newName: <span class="type">String</span>)</span></span> &#123;</span><br><span class="line">        <span class="keyword">val</span> contentResolver = context.contentResolver</span><br><span class="line">        <span class="keyword">val</span> selection = <span class="string">"<span class="subst">$&#123;MediaStore.Audio.Media._ID&#125;</span> = ?"</span></span><br><span class="line">        <span class="keyword">val</span> selectionArgs = arrayOf(id.toString())</span><br><span class="line">        <span class="keyword">val</span> contentValues = ContentValues().apply &#123;</span><br><span class="line">            put(MediaStore.Audio.Media.DISPLAY_NAME, newName)</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">val</span> audioUri = ContentUris.withAppendedId(MediaStore.Audio.Media.EXTERNAL_CONTENT_URI, id)</span><br><span class="line">        audioUri.let &#123;</span><br><span class="line">            context.contentResolver.openFileDescriptor(audioUri, <span class="string">"w"</span>)?.use &#123;</span><br><span class="line">                <span class="keyword">val</span> result =</span><br><span class="line">                    contentResolver.update(audioUri, contentValues, selection, selectionArgs)</span><br><span class="line">                Log.d(TAG, <span class="string">"updateAudioCollection() called : <span class="variable">$result</span>"</span>)</span><br><span class="line">                it.close()</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     *  Delete [ 图片媒体集 ]</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">fun</span> <span class="title">deleteImageCollection</span><span class="params">(context: <span class="type">Context</span>, id: <span class="type">Long</span>)</span></span> &#123;</span><br><span class="line">        <span class="keyword">val</span> contentResolver = context.contentResolver</span><br><span class="line">        <span class="keyword">val</span> selection = <span class="string">"<span class="subst">$&#123;MediaStore.Images.Media._ID&#125;</span> = ?"</span></span><br><span class="line">        <span class="keyword">val</span> selectionArgs = arrayOf(id.toString())</span><br><span class="line">        <span class="keyword">val</span> imageUri = ContentUris.withAppendedId(MediaStore.Images.Media.EXTERNAL_CONTENT_URI, id)</span><br><span class="line">        imageUri.let &#123;</span><br><span class="line">            context.contentResolver.openFileDescriptor(imageUri, <span class="string">"w"</span>)?.use &#123;</span><br><span class="line">                <span class="keyword">val</span> result = contentResolver.delete(imageUri, selection, selectionArgs)</span><br><span class="line">                Log.d(TAG, <span class="string">"deleteImageCollection() called : <span class="variable">$result</span>"</span>)</span><br><span class="line">                it.close()</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     *  Delete [ 视频媒体集 ]</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">fun</span> <span class="title">deleteVideoCollection</span><span class="params">(context: <span class="type">Context</span>, id: <span class="type">Long</span>)</span></span> &#123;</span><br><span class="line">        <span class="keyword">val</span> contentResolver = context.contentResolver</span><br><span class="line">        <span class="keyword">val</span> selection = <span class="string">"<span class="subst">$&#123;MediaStore.Video.Media._ID&#125;</span> = ?"</span></span><br><span class="line">        <span class="keyword">val</span> selectionArgs = arrayOf(id.toString())</span><br><span class="line">        <span class="keyword">val</span> videoUri = ContentUris.withAppendedId(MediaStore.Video.Media.EXTERNAL_CONTENT_URI, id)</span><br><span class="line">        videoUri.let &#123;</span><br><span class="line">            context.contentResolver.openFileDescriptor(videoUri, <span class="string">"w"</span>)?.use &#123;</span><br><span class="line">                <span class="keyword">val</span> result = contentResolver.delete(videoUri, selection, selectionArgs)</span><br><span class="line">                Log.d(TAG, <span class="string">"deleteVideoCollection() called : <span class="variable">$result</span>"</span>)</span><br><span class="line">                it.close()</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     *  Delete [ 音频媒体集 ]</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">fun</span> <span class="title">deleteAudioCollection</span><span class="params">(context: <span class="type">Context</span>, id: <span class="type">Long</span>)</span></span> &#123;</span><br><span class="line">        <span class="keyword">val</span> contentResolver = context.contentResolver</span><br><span class="line">        <span class="keyword">val</span> selection = <span class="string">"<span class="subst">$&#123;MediaStore.Audio.Media._ID&#125;</span> = ?"</span></span><br><span class="line">        <span class="keyword">val</span> selectionArgs = arrayOf(id.toString())</span><br><span class="line">        <span class="keyword">val</span> audioUri = ContentUris.withAppendedId(MediaStore.Audio.Media.EXTERNAL_CONTENT_URI, id)</span><br><span class="line">        audioUri.let &#123;</span><br><span class="line">            context.contentResolver.openFileDescriptor(audioUri, <span class="string">"w"</span>)?.use &#123;</span><br><span class="line">                <span class="keyword">val</span> result = contentResolver.delete(audioUri, selection, selectionArgs)</span><br><span class="line">                Log.d(TAG, <span class="string">"deleteAudioCollection() called : <span class="variable">$result</span>"</span>)</span><br><span class="line">                it.close()</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 加载特定媒体文件的缩略图</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">fun</span> <span class="title">loadThumbnail</span><span class="params">(context: <span class="type">Context</span>, uri: <span class="type">Uri</span>, width: <span class="type">Int</span>, height: <span class="type">Int</span>)</span></span>: Bitmap &#123;</span><br><span class="line">        <span class="keyword">val</span> size = Size(width, height)</span><br><span class="line">        <span class="keyword">return</span> context.contentResolver.loadThumbnail(</span><br><span class="line">            uri, size, <span class="literal">null</span></span><br><span class="line">        )</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 获取图片位置元数据信息</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">fun</span> <span class="title">getImageLocationMataData</span><span class="params">(context: <span class="type">Context</span>, imageUri: <span class="type">Uri</span>)</span></span> &#123;</span><br><span class="line">        <span class="comment">// 获取位置数据使用 ExifInterface 库.</span></span><br><span class="line">        <span class="comment">// 如果 ACCESS_MEDIA_LOCATION 没有被授予，将会发生异常</span></span><br><span class="line">        <span class="keyword">val</span> uri = MediaStore.setRequireOriginal(imageUri)</span><br><span class="line">        context.contentResolver.openInputStream(uri)?.use &#123;</span><br><span class="line">            ExifInterface(it).run &#123;</span><br><span class="line">                <span class="comment">//如果经纬度为Null，将会回退到坐标(0,0)</span></span><br><span class="line">                <span class="keyword">this</span>.latLong?.let &#123;</span><br><span class="line">                    Log.d(TAG, <span class="string">"getImageLocationMataData() called : Latitude =  <span class="subst">$&#123;latLong?.get(<span class="number">0</span>)&#125;</span>"</span>)</span><br><span class="line">                    Log.d(TAG, <span class="string">"getImageLocationMataData() called : Longitude = <span class="subst">$&#123;latLong?.get(<span class="number">1</span>)&#125;</span>"</span>)</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">companion</span> <span class="keyword">object</span> &#123;</span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">const</span> <span class="keyword">val</span> TAG = <span class="string">"MyMediaCollection"</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="Download-类"><a href="#Download-类" class="headerlink" title="Download 类"></a>Download 类</h4><p>[ MyDownloadCollection 。k ]</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyDownloadCollection</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 访问目录</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">fun</span> <span class="title">openDirectory</span><span class="params">(activity: <span class="type">Activity</span>, requestCode: <span class="type">Int</span>)</span></span> &#123;</span><br><span class="line">        Log.d(TAG, <span class="string">"openDirectory() called"</span>)</span><br><span class="line">        <span class="keyword">val</span> intent = Intent(Intent.ACTION_OPEN_DOCUMENT_TREE).apply &#123;</span><br><span class="line">        &#125;</span><br><span class="line">        activity.startActivityForResult(intent, requestCode)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 访问文件</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">fun</span> <span class="title">openDocument</span><span class="params">(activity: <span class="type">Activity</span>, fileType: <span class="type">String</span>, requestCode: <span class="type">Int</span>)</span></span> &#123;</span><br><span class="line">        Log.d(</span><br><span class="line">            TAG,</span><br><span class="line">            <span class="string">"openDocument() called with: activity = <span class="variable">$activity</span>, fileType = <span class="variable">$fileType</span>, requestCode = <span class="variable">$requestCode</span>"</span></span><br><span class="line">        )</span><br><span class="line">        <span class="keyword">val</span> intent = Intent(Intent.ACTION_OPEN_DOCUMENT).apply &#123;</span><br><span class="line">            addCategory(Intent.CATEGORY_OPENABLE)</span><br><span class="line">            type = fileType</span><br><span class="line">        &#125;</span><br><span class="line">        activity.startActivityForResult(intent, requestCode)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 创建文档</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">fun</span> <span class="title">createDocument</span><span class="params">(activity: <span class="type">Activity</span>, fileType: <span class="type">String</span>, title: <span class="type">String</span>, requestCode: <span class="type">Int</span>)</span></span> &#123;</span><br><span class="line">        Log.d(</span><br><span class="line">            TAG,</span><br><span class="line">            <span class="string">"createDocument() called with: activity = <span class="variable">$activity</span>, fileType = <span class="variable">$fileType</span>, title = <span class="variable">$title</span>, requestCode = <span class="variable">$requestCode</span>"</span></span><br><span class="line">        )</span><br><span class="line">        <span class="keyword">val</span> intent = Intent(Intent.ACTION_CREATE_DOCUMENT).apply &#123;</span><br><span class="line">            addCategory(Intent.CATEGORY_OPENABLE)</span><br><span class="line">            type = fileType</span><br><span class="line">            putExtra(Intent.EXTRA_TITLE, title)</span><br><span class="line">        &#125;</span><br><span class="line">        activity.startActivityForResult(intent, requestCode)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 写入数据</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">fun</span> <span class="title">writeDataToDocument</span><span class="params">(context: <span class="type">Context</span>, uri: <span class="type">Uri</span>, content: <span class="type">String</span>)</span></span> &#123;</span><br><span class="line">        Log.d(</span><br><span class="line">            TAG,</span><br><span class="line">            <span class="string">"writeDataToDocument() called with: context = <span class="variable">$context</span>, uri = <span class="variable">$uri</span>, content = <span class="variable">$content</span>"</span></span><br><span class="line">        )</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            context.contentResolver.openFileDescriptor(uri, <span class="string">"w"</span>).use &#123; parcelFileDescriptor -&gt;</span><br><span class="line">                FileOutputStream(parcelFileDescriptor?.fileDescriptor).use &#123; fos -&gt;</span><br><span class="line">                    fos.write(content.toByteArray())</span><br><span class="line">                    fos.close()</span><br><span class="line">                    parcelFileDescriptor?.close()</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (e: FileNotFoundException) &#123;</span><br><span class="line">            e.printStackTrace()</span><br><span class="line">        &#125; <span class="keyword">catch</span> (e: IOException) &#123;</span><br><span class="line">            e.printStackTrace()</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 删除文档</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">fun</span> <span class="title">deleteDocument</span><span class="params">(context: <span class="type">Context</span>, uri: <span class="type">Uri</span>)</span></span> &#123;</span><br><span class="line">        Log.d(TAG, <span class="string">"deleteDocument() called with: context = <span class="variable">$context</span>, uri = <span class="variable">$uri</span>"</span>)</span><br><span class="line">        <span class="keyword">val</span> result = DocumentsContract.deleteDocument(context.contentResolver,uri)</span><br><span class="line">        Log.d(TAG, <span class="string">"deleteDocument() result = <span class="variable">$result</span>"</span>)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/***</span></span><br><span class="line"><span class="comment">     * 从 Uri中返回文本</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="function"><span class="keyword">fun</span> <span class="title">readTextFromUri</span><span class="params">(context: <span class="type">Context</span>, uri: <span class="type">Uri</span>)</span></span>: String &#123;</span><br><span class="line">        <span class="keyword">val</span> stringBuilder = StringBuilder()</span><br><span class="line">        context.contentResolver.openInputStream(uri)?.use &#123; inputStream -&gt;</span><br><span class="line">            BufferedReader(InputStreamReader(inputStream)).use &#123; reader -&gt;</span><br><span class="line">                <span class="keyword">var</span> line: String? = reader.readLine()</span><br><span class="line">                <span class="keyword">while</span> (line != <span class="literal">null</span>) &#123;</span><br><span class="line">                    stringBuilder.append(line)</span><br><span class="line">                    line = reader.readLine()</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> stringBuilder.toString()</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 从 Uri中返回Bitmap</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Throws(IOException::class)</span></span><br><span class="line">    <span class="keyword">private</span> <span class="function"><span class="keyword">fun</span> <span class="title">getBitmapFromUri</span><span class="params">(context: <span class="type">Context</span>, uri: <span class="type">Uri</span>)</span></span>: Bitmap? &#123;</span><br><span class="line">        <span class="keyword">val</span> parcelFileDescriptor = context.contentResolver.openFileDescriptor(uri, <span class="string">"r"</span>)</span><br><span class="line">        <span class="keyword">return</span> BitmapFactory.decodeFileDescriptor(parcelFileDescriptor?.fileDescriptor)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 永久保存获取的目录权限</span></span><br><span class="line"><span class="comment">     * APP申请到目录的永久权限后，用户可以在该APP的设置页面（清除缓存页面下）取消目录的访问权限</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">fun</span> <span class="title">keepDocumentPermission</span><span class="params">(context: <span class="type">Context</span>, uri: <span class="type">Uri</span>, intent: <span class="type">Intent</span>)</span></span> &#123;</span><br><span class="line">        <span class="keyword">val</span> takeFlags: <span class="built_in">Int</span> = intent.flags and</span><br><span class="line">                (Intent.FLAG_GRANT_READ_URI_PERMISSION or Intent.FLAG_GRANT_WRITE_URI_PERMISSION)</span><br><span class="line">        <span class="comment">// 检查最新数据：文件是否被删除</span></span><br><span class="line">        context.contentResolver.takePersistableUriPermission(uri, takeFlags)</span><br><span class="line">        <span class="comment">// 通过sharePreference保存该目录Uri</span></span><br><span class="line">        <span class="comment">// --------- 省略 代码 --------</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 使用获得永久保存获取的目录权限</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">fun</span> <span class="title">useKeepDocument</span><span class="params">(context: <span class="type">Context</span>,saveUri: <span class="type">String</span>,intent: <span class="type">Intent</span>)</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (TextUtils.isEmpty(saveUri)) &#123;</span><br><span class="line">            <span class="comment">// 打开目录, 重新请求永久保存获取的目录权限</span></span><br><span class="line">            <span class="comment">// --------- 省略 代码 --------</span></span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                <span class="keyword">val</span> uri = Uri.parse(saveUri)</span><br><span class="line">                <span class="keyword">val</span> takeFlags: <span class="built_in">Int</span> = intent.flags and</span><br><span class="line">                (Intent.FLAG_GRANT_READ_URI_PERMISSION or Intent.FLAG_GRANT_WRITE_URI_PERMISSION)</span><br><span class="line">                context.contentResolver.takePersistableUriPermission(uri, takeFlags)</span><br><span class="line">                <span class="comment">//Uri 授予，执行下一步操作</span></span><br><span class="line">                <span class="comment">// --------- 省略 代码 --------</span></span><br><span class="line">            &#125; <span class="keyword">catch</span> (e: SecurityException) &#123;</span><br><span class="line">                <span class="comment">//Uri 未被授予, 打开目录, 重新请求永久保存获取的目录权限</span></span><br><span class="line">                <span class="comment">// --------- 省略 代码 --------</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">companion</span> <span class="keyword">object</span> &#123;</span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">const</span> <span class="keyword">val</span> TAG = <span class="string">"MyDownloadCollection"</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="Assets-帮助类"><a href="#Assets-帮助类" class="headerlink" title="Assets 帮助类"></a>Assets 帮助类</h4><p><img alt="scoped-storage-on-android-11-2.png" data-src="/images/scoped-storage-on-android-11-2.png"></p><p>[ AssetHelper.kt ]</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">AssetHelper</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">companion</span> <span class="keyword">object</span> &#123;</span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">const</span> <span class="keyword">val</span> TAG = <span class="string">"AssetHelper"</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * 复制单个文件的方法</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        <span class="function"><span class="keyword">fun</span> <span class="title">copyAssetSingleFile</span><span class="params">(context: <span class="type">Context</span>, fileName: <span class="type">String</span>, savePath: <span class="type">File</span>)</span></span> &#123;</span><br><span class="line">            Log.d(</span><br><span class="line">                TAG,</span><br><span class="line">                <span class="string">"copyAssetSingleFile() called with: context = <span class="variable">$context</span>, fileName = <span class="variable">$fileName</span>, savePath = <span class="variable">$savePath</span>"</span></span><br><span class="line">            )</span><br><span class="line">            context.assets.<span class="keyword">open</span>(fileName).use &#123; fis -&gt;</span><br><span class="line">                FileOutputStream(savePath).use &#123; fos -&gt;</span><br><span class="line">                    FileUtils.copy(fis, fos)</span><br><span class="line">                    fos.close()</span><br><span class="line">                    fis.close()</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * 复制单个文件的方法</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        <span class="function"><span class="keyword">fun</span> <span class="title">copyAssetSingleFileToMedia</span><span class="params">(</span></span></span><br><span class="line"><span class="function"><span class="params">            context: <span class="type">Context</span>,</span></span></span><br><span class="line"><span class="function"><span class="params">            fileName: <span class="type">String</span>,</span></span></span><br><span class="line"><span class="function"><span class="params">            parcelFileDescriptor: <span class="type">ParcelFileDescriptor</span></span></span></span><br><span class="line"><span class="function"><span class="params">        )</span></span> &#123;</span><br><span class="line">            Log.d(</span><br><span class="line">                TAG,</span><br><span class="line">                <span class="string">"copyAssetSingleFile() called with: context = <span class="variable">$context</span>, fileName = <span class="variable">$fileName</span>, parcelFileDescriptor = <span class="variable">$parcelFileDescriptor</span>"</span></span><br><span class="line">            )</span><br><span class="line">            context.assets.openFd(fileName).use &#123; fis -&gt;</span><br><span class="line">                FileUtils.copy(fis.fileDescriptor, parcelFileDescriptor.fileDescriptor)</span><br><span class="line">                parcelFileDescriptor.close()</span><br><span class="line">                fis.close()</span><br><span class="line"></span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * 复制多个文件的方法</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        <span class="function"><span class="keyword">fun</span> <span class="title">copyAssetMultipleFile</span><span class="params">(context: <span class="type">Context</span>, filePath: <span class="type">String</span>, savePath: <span class="type">File</span>)</span></span> &#123;</span><br><span class="line">            Log.d(</span><br><span class="line">                TAG,</span><br><span class="line">                <span class="string">"copyAssetMultipleFile() called with: context = <span class="variable">$context</span>, filePath = <span class="variable">$filePath</span>, savePath = <span class="variable">$savePath</span>"</span></span><br><span class="line">            )</span><br><span class="line">            context.assets.list(filePath)?.let &#123; fileList -&gt;</span><br><span class="line">                <span class="keyword">when</span> (fileList.isNotEmpty()) &#123;</span><br><span class="line">                    <span class="literal">true</span> -&gt; &#123;</span><br><span class="line">                        <span class="keyword">for</span> (i <span class="keyword">in</span> fileList.indices) &#123;</span><br><span class="line">                            <span class="keyword">if</span> (!savePath.exists()) savePath.mkdir()</span><br><span class="line">                            copyAssetMultipleFile(</span><br><span class="line">                                context,</span><br><span class="line">                                filePath + File.separator + fileList[i],</span><br><span class="line">                                File(savePath, fileList[i])</span><br><span class="line">                            )</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="keyword">else</span> -&gt; copyAssetSingleFile(context, filePath, savePath)</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="MainActivity"><a href="#MainActivity" class="headerlink" title="MainActivity"></a>MainActivity</h4><p>[ MainActivity.]</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br><span class="line">287</span><br><span class="line">288</span><br><span class="line">289</span><br><span class="line">290</span><br><span class="line">291</span><br><span class="line">292</span><br><span class="line">293</span><br><span class="line">294</span><br><span class="line">295</span><br><span class="line">296</span><br><span class="line">297</span><br><span class="line">298</span><br><span class="line">299</span><br><span class="line">300</span><br><span class="line">301</span><br><span class="line">302</span><br><span class="line">303</span><br><span class="line">304</span><br><span class="line">305</span><br><span class="line">306</span><br><span class="line">307</span><br><span class="line">308</span><br><span class="line">309</span><br><span class="line">310</span><br><span class="line">311</span><br><span class="line">312</span><br><span class="line">313</span><br><span class="line">314</span><br><span class="line">315</span><br><span class="line">316</span><br><span class="line">317</span><br><span class="line">318</span><br><span class="line">319</span><br><span class="line">320</span><br><span class="line">321</span><br><span class="line">322</span><br><span class="line">323</span><br><span class="line">324</span><br><span class="line">325</span><br><span class="line">326</span><br><span class="line">327</span><br><span class="line">328</span><br><span class="line">329</span><br><span class="line">330</span><br><span class="line">331</span><br><span class="line">332</span><br><span class="line">333</span><br><span class="line">334</span><br><span class="line">335</span><br><span class="line">336</span><br><span class="line">337</span><br><span class="line">338</span><br><span class="line">339</span><br><span class="line">340</span><br><span class="line">341</span><br><span class="line">342</span><br><span class="line">343</span><br><span class="line">344</span><br><span class="line">345</span><br><span class="line">346</span><br><span class="line">347</span><br><span class="line">348</span><br><span class="line">349</span><br><span class="line">350</span><br><span class="line">351</span><br><span class="line">352</span><br><span class="line">353</span><br><span class="line">354</span><br><span class="line">355</span><br><span class="line">356</span><br><span class="line">357</span><br><span class="line">358</span><br><span class="line">359</span><br><span class="line">360</span><br><span class="line">361</span><br><span class="line">362</span><br><span class="line">363</span><br><span class="line">364</span><br><span class="line">365</span><br><span class="line">366</span><br><span class="line">367</span><br><span class="line">368</span><br><span class="line">369</span><br><span class="line">370</span><br><span class="line">371</span><br><span class="line">372</span><br><span class="line">373</span><br><span class="line">374</span><br><span class="line">375</span><br><span class="line">376</span><br><span class="line">377</span><br><span class="line">378</span><br><span class="line">379</span><br><span class="line">380</span><br><span class="line">381</span><br><span class="line">382</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MainActivity</span> : <span class="type">AppCompatActivity</span></span>() &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@RequiresApi(10000)</span></span><br><span class="line">    <span class="keyword">override</span> <span class="function"><span class="keyword">fun</span> <span class="title">onCreate</span><span class="params">(savedInstanceState: <span class="type">Bundle</span>?)</span></span> &#123;</span><br><span class="line">        <span class="keyword">super</span>.onCreate(savedInstanceState)</span><br><span class="line">        setContentView(R.layout.activity_main2)</span><br><span class="line">        initPermission()</span><br><span class="line">        Log.d(TAG, <span class="string">"onCreate() called with:  = <span class="subst">$&#123;Build.VERSION.SDK_INT&#125;</span>"</span>)</span><br><span class="line">        <span class="comment">//使用Kotlin 协程方式</span></span><br><span class="line">        btnStorage.setOnClickListener &#123;</span><br><span class="line">            GlobalScope.launch &#123;</span><br><span class="line">                <span class="comment">//insertData()</span></span><br><span class="line">                <span class="comment">//updateData()</span></span><br><span class="line">                <span class="comment">//queryData()</span></span><br><span class="line">                <span class="comment">//updateOtherApp()</span></span><br><span class="line">                <span class="comment">//openDocument()</span></span><br><span class="line">                <span class="comment">//createDocument()</span></span><br><span class="line">                deleteImages(<span class="keyword">this</span><span class="symbol">@MainActivity</span>)</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 添加媒体集数据 和 应用程序专属目录下数据</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">suspend</span> <span class="function"><span class="keyword">fun</span> <span class="title">insertData</span><span class="params">()</span></span> &#123;</span><br><span class="line">        Log.d(TAG, <span class="string">"copyAssets() called : ### START ####"</span>)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">val</span> dataFile = File(getExternalFilesDir(<span class="literal">null</span>), <span class="string">"data"</span>)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">val</span> imageFile =</span><br><span class="line">            File(getExternalFilesDir(Environment.DIRECTORY_PICTURES), <span class="string">"my_app_media_image.jpg"</span>)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">val</span> videoFile =</span><br><span class="line">            File(getExternalFilesDir(Environment.DIRECTORY_MOVIES), <span class="string">"my_app_media_video.mp4"</span>)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">val</span> audioFile =</span><br><span class="line">            File(getExternalFilesDir(Environment.DIRECTORY_MUSIC), <span class="string">"my_app_media_audio.mp3"</span>)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">val</span> downloadFile =</span><br><span class="line">            File(getExternalFilesDir(Environment.DIRECTORY_DOWNLOADS), <span class="string">"my_app_download_file.pdf"</span>)</span><br><span class="line"></span><br><span class="line">        withContext(Dispatchers.IO) &#123;</span><br><span class="line"></span><br><span class="line">            <span class="comment">//插入数据到应用程序专属特定目录系统整理目录下</span></span><br><span class="line">            AssetHelper.copyAssetSingleFile(</span><br><span class="line">                <span class="keyword">this</span><span class="symbol">@MainActivity</span>,</span><br><span class="line">                <span class="string">"my_app_media_image.jpg"</span>,</span><br><span class="line">                imageFile</span><br><span class="line">            )</span><br><span class="line">            AssetHelper.copyAssetSingleFile(</span><br><span class="line">                <span class="keyword">this</span><span class="symbol">@MainActivity</span>,</span><br><span class="line">                <span class="string">"my_app_media_video.mp4"</span>,</span><br><span class="line">                videoFile</span><br><span class="line">            )</span><br><span class="line">            AssetHelper.copyAssetSingleFile(</span><br><span class="line">                <span class="keyword">this</span><span class="symbol">@MainActivity</span>,</span><br><span class="line">                <span class="string">"my_app_media_audio.mp3"</span>,</span><br><span class="line">                audioFile</span><br><span class="line">            )</span><br><span class="line"></span><br><span class="line">            AssetHelper.copyAssetSingleFile(</span><br><span class="line">                <span class="keyword">this</span><span class="symbol">@MainActivity</span>,</span><br><span class="line">                <span class="string">"my_app_download_file.pdf"</span>,</span><br><span class="line">                downloadFile</span><br><span class="line">            )</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 插入数据到应用程序专属特定目录下自定义文件夹</span></span><br><span class="line">            AssetHelper.copyAssetMultipleFile(<span class="keyword">this</span><span class="symbol">@MainActivity</span>, <span class="string">"data"</span>, dataFile)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">            <span class="comment">// 插入数据到媒体集</span></span><br><span class="line">            MyMediaCollection().insertImageToCollection(</span><br><span class="line">                <span class="keyword">this</span><span class="symbol">@MainActivity</span>,</span><br><span class="line">                <span class="string">"my_app_media_image.jpg"</span></span><br><span class="line">            )</span><br><span class="line"></span><br><span class="line">            MyMediaCollection().insertVideoToCollection(</span><br><span class="line">                <span class="keyword">this</span><span class="symbol">@MainActivity</span>,</span><br><span class="line">                <span class="string">"my_app_media_video.mp4"</span></span><br><span class="line">            )</span><br><span class="line">            MyMediaCollection().insertAudioToCollection(</span><br><span class="line">                <span class="keyword">this</span><span class="symbol">@MainActivity</span>,</span><br><span class="line">                <span class="string">"my_app_media_audio.mp3"</span></span><br><span class="line">            )</span><br><span class="line">        &#125;</span><br><span class="line">        Log.d(TAG, <span class="string">"copyAssets() called : #### END ####"</span>)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 查询媒体集数据</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">suspend</span> <span class="function"><span class="keyword">fun</span> <span class="title">queryData</span><span class="params">()</span></span> &#123;</span><br><span class="line">        withContext(Dispatchers.IO) &#123;</span><br><span class="line">            MyMediaCollection().queryImageCollection(<span class="keyword">this</span><span class="symbol">@MainActivity</span>)</span><br><span class="line">            MyMediaCollection().queryVideoCollection(<span class="keyword">this</span><span class="symbol">@MainActivity</span>)</span><br><span class="line">            MyMediaCollection().queryAudioCollection(<span class="keyword">this</span><span class="symbol">@MainActivity</span>)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 修改媒体集数据</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">suspend</span> <span class="function"><span class="keyword">fun</span> <span class="title">updateData</span><span class="params">()</span></span> &#123;</span><br><span class="line">        withContext(Dispatchers.IO) &#123;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">val</span> imageId = <span class="number">33</span></span><br><span class="line">            <span class="keyword">val</span> imageNewName = <span class="string">"my_app_media_image_new_name.jpg"</span></span><br><span class="line"></span><br><span class="line">            <span class="keyword">val</span> videoId = <span class="number">34</span></span><br><span class="line">            <span class="keyword">val</span> videoNewName = <span class="string">"my_app_media_video_new_name.mp4"</span></span><br><span class="line"></span><br><span class="line">            <span class="keyword">val</span> audioId = <span class="number">26</span></span><br><span class="line">            <span class="keyword">val</span> audioNewName = <span class="string">"my_app_media_audio_new_name.mp3"</span></span><br><span class="line"></span><br><span class="line">            MyMediaCollection().updateImageCollection(</span><br><span class="line">                <span class="keyword">this</span><span class="symbol">@MainActivity</span>,</span><br><span class="line">                imageId.toLong(),</span><br><span class="line">                imageNewName</span><br><span class="line">            )</span><br><span class="line">            MyMediaCollection().updateVideoCollection(</span><br><span class="line">                <span class="keyword">this</span><span class="symbol">@MainActivity</span>,</span><br><span class="line">                videoId.toLong(),</span><br><span class="line">                videoNewName</span><br><span class="line">            )</span><br><span class="line">            MyMediaCollection().updateAudioCollection(</span><br><span class="line">                <span class="keyword">this</span><span class="symbol">@MainActivity</span>,</span><br><span class="line">                audioId.toLong(),</span><br><span class="line">                audioNewName</span><br><span class="line">            )</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 删除媒体集数据</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">suspend</span> <span class="function"><span class="keyword">fun</span> <span class="title">deleteData</span><span class="params">()</span></span> &#123;</span><br><span class="line">        withContext(Dispatchers.IO) &#123;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">val</span> imageId = <span class="number">33</span></span><br><span class="line">            <span class="keyword">val</span> videoId = <span class="number">34</span></span><br><span class="line">            <span class="keyword">val</span> audioId = <span class="number">26</span></span><br><span class="line"></span><br><span class="line">            MyMediaCollection().deleteImageCollection(<span class="keyword">this</span><span class="symbol">@MainActivity</span>, imageId.toLong())</span><br><span class="line">            MyMediaCollection().deleteVideoCollection(<span class="keyword">this</span><span class="symbol">@MainActivity</span>, videoId.toLong())</span><br><span class="line">            MyMediaCollection().deleteAudioCollection(<span class="keyword">this</span><span class="symbol">@MainActivity</span>, audioId.toLong())</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 删除 / 编辑 其他应用程序的媒体集数据(需要申请权限)</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@RequiresApi(Build.VERSION_CODES.Q)</span></span><br><span class="line">    <span class="keyword">private</span> <span class="function"><span class="keyword">fun</span> <span class="title">changeOtherApp</span><span class="params">()</span></span> &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">val</span> imageId = <span class="number">37</span></span><br><span class="line">            <span class="keyword">val</span> imageNewName = <span class="string">"other_app__media_image_renamed_by_own_app.jpg"</span></span><br><span class="line"></span><br><span class="line">            <span class="keyword">val</span> videoId = <span class="number">39</span></span><br><span class="line">            <span class="keyword">val</span> videoNewName = <span class="string">"other_app__media_video_renamed_by_own_app.mp4"</span></span><br><span class="line"></span><br><span class="line">            <span class="keyword">val</span> audioId = <span class="number">36</span></span><br><span class="line">            <span class="keyword">val</span> audioNewName = <span class="string">"other_app__media_audio_renamed_by_own_app.mp3"</span></span><br><span class="line"></span><br><span class="line">            MyMediaCollection().updateImageCollection(</span><br><span class="line">                <span class="keyword">this</span><span class="symbol">@MainActivity</span>,</span><br><span class="line">                imageId.toLong(),</span><br><span class="line">                imageNewName</span><br><span class="line">            )</span><br><span class="line">            MyMediaCollection().updateVideoCollection(</span><br><span class="line">                <span class="keyword">this</span><span class="symbol">@MainActivity</span>,</span><br><span class="line">                videoId.toLong(),</span><br><span class="line">                videoNewName</span><br><span class="line">            )</span><br><span class="line">            MyMediaCollection().updateAudioCollection(</span><br><span class="line">                <span class="keyword">this</span><span class="symbol">@MainActivity</span>,</span><br><span class="line">                audioId.toLong(),</span><br><span class="line">                audioNewName</span><br><span class="line">            )</span><br><span class="line"></span><br><span class="line">            MyMediaCollection().deleteImageCollection(<span class="keyword">this</span><span class="symbol">@MainActivity</span>, imageId.toLong())</span><br><span class="line">            MyMediaCollection().deleteVideoCollection(<span class="keyword">this</span><span class="symbol">@MainActivity</span>, videoId.toLong())</span><br><span class="line">            MyMediaCollection().deleteAudioCollection(<span class="keyword">this</span><span class="symbol">@MainActivity</span>, audioId.toLong())</span><br><span class="line"></span><br><span class="line">        &#125; <span class="keyword">catch</span> (securityException: SecurityException) &#123;</span><br><span class="line">            <span class="comment">// 这种方式是使用抛出一个异常的方式，弹出操作处理框，让用户处理</span></span><br><span class="line">            <span class="comment">// 第二种方式就是删除之前进行权限检查，参考下面的deleteImages方法</span></span><br><span class="line">            Log.d(TAG, <span class="string">"updateOtherApp() called : "</span> + securityException.message)</span><br><span class="line">            <span class="keyword">val</span> recoverableSecurityException = securityException <span class="keyword">as</span>?</span><br><span class="line">                    RecoverableSecurityException</span><br><span class="line">                ?: <span class="keyword">throw</span> RuntimeException(securityException.message, securityException)</span><br><span class="line"></span><br><span class="line">            <span class="comment">// Android 10 上面的方法，但每次处理一个文件会弹出一个框让用户操作,不能一次性大批量</span></span><br><span class="line">            <span class="keyword">val</span> intentSender =</span><br><span class="line">                recoverableSecurityException.userAction.actionIntent.intentSender</span><br><span class="line">            intentSender?.let &#123;</span><br><span class="line"></span><br><span class="line">                <span class="comment">//会弹出权限对话框，让用户是否确定要授予该APP应用程序改变其他应用创建的媒体文件权限</span></span><br><span class="line">                ActivityCompat.startIntentSenderForResult(</span><br><span class="line">                    <span class="keyword">this</span>, intentSender, <span class="number">200</span>,</span><br><span class="line">                    <span class="literal">null</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="literal">null</span></span><br><span class="line">                )</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">/***</span></span><br><span class="line"><span class="comment">     *  删除多张图片，一次请求 友好的方式</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     *  createDeleteRequest (Android 11 / R 上新增的 API ) --- 永久删除指定的媒体文件</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     *  参考该方法 , 其他新增 createWriteRequest 、createFavoriteRequest、createTrashRequest 这几个API就不写示例了，</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@RequiresApi(Build.VERSION_CODES.R)</span></span><br><span class="line">    <span class="keyword">private</span> <span class="function"><span class="keyword">fun</span> <span class="title">deleteImages</span><span class="params">(context: <span class="type">Context</span>)</span></span> &#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">val</span> uri1 = Uri.parse(<span class="string">"content://media/external/images/media/27855"</span>)</span><br><span class="line">        <span class="keyword">val</span> uri2 = Uri.parse(<span class="string">"content://media/external/images/media/27856"</span>)</span><br><span class="line">        <span class="keyword">val</span> uri3 = Uri.parse(<span class="string">"content://media/external/images/media/27857"</span>)</span><br><span class="line">        <span class="keyword">val</span> uri4 = Uri.parse(<span class="string">"content://media/external/images/media/27858"</span>)</span><br><span class="line">        <span class="keyword">val</span> uri5 = Uri.parse(<span class="string">"content://media/external/images/media/27859"</span>)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">val</span> uris = arrayListOf(uri1,uri2,uri3,uri4,uri5)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">val</span> pendingIntent = MediaStore.createDeleteRequest(context.contentResolver, uris.filter &#123;</span><br><span class="line">            <span class="comment">// 使用时请求权限</span></span><br><span class="line">            context.checkUriPermission(</span><br><span class="line">                it,</span><br><span class="line">                Binder.getCallingPid(),</span><br><span class="line">                Binder.getCallingUid(),</span><br><span class="line">                Intent.FLAG_GRANT_WRITE_URI_PERMISSION</span><br><span class="line">            ) != PackageManager.PERMISSION_GRANTED</span><br><span class="line">        &#125;)</span><br><span class="line">        <span class="keyword">val</span> intentSender = pendingIntent.intentSender</span><br><span class="line">        intentSender?.let &#123;</span><br><span class="line">            <span class="comment">//会弹出权限对话框，让用户是否确定要授予该APP应用程序改变其他应用创建的媒体文件权限</span></span><br><span class="line">            ActivityCompat.startIntentSenderForResult(</span><br><span class="line">                <span class="keyword">this</span>, intentSender, <span class="number">300</span>,</span><br><span class="line">                <span class="literal">null</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="literal">null</span></span><br><span class="line">            )</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 访问目录</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="function"><span class="keyword">fun</span> <span class="title">openDocumentTree</span><span class="params">()</span></span> &#123;</span><br><span class="line">        MyDownloadCollection().openDirectory(<span class="keyword">this</span><span class="symbol">@MainActivity</span>, PICK_DIR)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 访问文档</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="function"><span class="keyword">fun</span> <span class="title">openDocument</span><span class="params">()</span></span> &#123;</span><br><span class="line">        MyDownloadCollection().openDocument(</span><br><span class="line">            <span class="keyword">this</span><span class="symbol">@MainActivity</span>,</span><br><span class="line">            <span class="string">"*/*"</span>,<span class="comment">//application/pdf</span></span><br><span class="line">            PICK_DOCUMENT</span><br><span class="line">        )</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 创建文档</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="function"><span class="keyword">fun</span> <span class="title">createDocument</span><span class="params">()</span></span> &#123;</span><br><span class="line">        MyDownloadCollection().createDocument(</span><br><span class="line">            <span class="keyword">this</span><span class="symbol">@MainActivity</span>, <span class="string">"text/plain"</span>,</span><br><span class="line">            <span class="string">"my_app_create.text"</span>, CREATE_DOCUMENT</span><br><span class="line">        )</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 写入数据到文档</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="function"><span class="keyword">fun</span> <span class="title">writeDocument</span><span class="params">(uri: <span class="type">Uri</span>)</span></span> &#123;</span><br><span class="line">        MyDownloadCollection().writeDataToDocument(</span><br><span class="line">            <span class="keyword">this</span>,</span><br><span class="line">            uri,</span><br><span class="line">            <span class="string">"balabalabalabalabalabalabalabalabalabalabalabala"</span></span><br><span class="line">        )</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="function"><span class="keyword">fun</span> <span class="title">deleteDocument</span><span class="params">(uri: <span class="type">Uri</span>)</span></span> &#123;</span><br><span class="line">        MyDownloadCollection().deleteDocument(<span class="keyword">this</span>, uri)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">override</span> <span class="function"><span class="keyword">fun</span> <span class="title">onResume</span><span class="params">()</span></span> &#123;</span><br><span class="line">        <span class="keyword">super</span>.onResume()</span><br><span class="line">        Log.d(TAG, <span class="string">"onResume() called"</span>)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">override</span> <span class="function"><span class="keyword">fun</span> <span class="title">onDestroy</span><span class="params">()</span></span> &#123;</span><br><span class="line">        <span class="keyword">super</span>.onDestroy()</span><br><span class="line">        Log.d(TAG, <span class="string">"onDestroy() called"</span>)</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 初始化权限</span></span><br><span class="line"><span class="comment">     * READ_EXTERNAL_STORAGE</span></span><br><span class="line"><span class="comment">     * ACCESS_MEDIA_LOCATION   (访问图片位置元数据必须请求)</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="function"><span class="keyword">fun</span> <span class="title">initPermission</span><span class="params">()</span></span> &#123;</span><br><span class="line">        Log.d(TAG, <span class="string">"initPermission() called"</span>)</span><br><span class="line">        <span class="keyword">val</span> permissions = arrayOf(</span><br><span class="line">            Manifest.permission.READ_EXTERNAL_STORAGE,</span><br><span class="line">            Manifest.permission.ACCESS_MEDIA_LOCATION</span><br><span class="line">        )</span><br><span class="line">        <span class="keyword">for</span> (i <span class="keyword">in</span> permissions.indices) &#123;</span><br><span class="line">            <span class="keyword">if</span> (ContextCompat.checkSelfPermission(</span><br><span class="line">                    <span class="keyword">this</span>,</span><br><span class="line">                    permissions[i]</span><br><span class="line">                ) != PackageManager.PERMISSION_GRANTED</span><br><span class="line">            ) &#123;</span><br><span class="line">                ActivityCompat.requestPermissions(<span class="keyword">this</span>, permissions, PERMISSION_CODE);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">override</span> <span class="function"><span class="keyword">fun</span> <span class="title">onActivityResult</span><span class="params">(requestCode: <span class="type">Int</span>, resultCode: <span class="type">Int</span>, <span class="keyword">data</span>: <span class="type">Intent</span>?)</span></span> &#123;</span><br><span class="line">        <span class="keyword">super</span>.onActivityResult(requestCode, resultCode, <span class="keyword">data</span>)</span><br><span class="line">        <span class="keyword">if</span> (requestCode == PICK_DOCUMENT &amp;&amp; resultCode == Activity.RESULT_OK) &#123;</span><br><span class="line">            <span class="keyword">data</span>?.<span class="keyword">data</span>?.also &#123;</span><br><span class="line">                Log.d(TAG, <span class="string">"onActivityResult() called : PICK_DOCUMENT uri = <span class="variable">$it</span>"</span>)</span><br><span class="line">                <span class="comment">// 返回文件的Uri</span></span><br><span class="line">                <span class="comment">// 自定义下面的逻辑代码.....</span></span><br><span class="line">                <span class="comment">// ................</span></span><br><span class="line">                <span class="comment">// ................</span></span><br><span class="line">                <span class="comment">//示例:</span></span><br><span class="line">                deleteDocument(it) <span class="comment">// 删除文档</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (requestCode == CREATE_DOCUMENT &amp;&amp; resultCode == Activity.RESULT_OK) &#123;</span><br><span class="line">            <span class="keyword">data</span>?.<span class="keyword">data</span>?.also &#123;</span><br><span class="line">                Log.d(TAG, <span class="string">"onActivityResult() called : CREATE_DOCUMENT uri = <span class="variable">$it</span>"</span>)</span><br><span class="line">                <span class="comment">// 返回文件的Uri</span></span><br><span class="line">                <span class="comment">// 自定义下面的逻辑代码.....</span></span><br><span class="line">                <span class="comment">// ................</span></span><br><span class="line">                <span class="comment">// ................</span></span><br><span class="line">                <span class="comment">//示例:</span></span><br><span class="line">                writeDocument(it) <span class="comment">// 删除文档</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">override</span> <span class="function"><span class="keyword">fun</span> <span class="title">onRequestPermissionsResult</span><span class="params">(</span></span></span><br><span class="line"><span class="function"><span class="params">        requestCode: <span class="type">Int</span>,</span></span></span><br><span class="line"><span class="function"><span class="params">        permissions: <span class="type">Array</span>&lt;<span class="type">String</span>&gt;,</span></span></span><br><span class="line"><span class="function"><span class="params">        grantResults: <span class="type">IntArray</span></span></span></span><br><span class="line"><span class="function"><span class="params">    )</span></span> &#123;</span><br><span class="line">        <span class="keyword">super</span>.onRequestPermissionsResult(requestCode, permissions, grantResults)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (requestCode == PERMISSION_CODE) &#123;</span><br><span class="line">            <span class="keyword">for</span> (i <span class="keyword">in</span> permissions.indices) &#123;</span><br><span class="line">                Log.d(TAG, <span class="string">"onRequestPermissionsResult: "</span> + grantResults[i])</span><br><span class="line">                <span class="keyword">if</span> (grantResults[i] == -<span class="number">1</span>) &#123;</span><br><span class="line">                    Toast.makeText(<span class="keyword">this</span><span class="symbol">@MainActivity</span>, <span class="string">"<span class="subst">$&#123;grantResults[i]&#125;</span>权限被拒绝"</span>, Toast.LENGTH_SHORT)</span><br><span class="line">                        .show()</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    Toast.makeText(<span class="keyword">this</span><span class="symbol">@MainActivity</span>, <span class="string">"<span class="subst">$&#123;grantResults[i]&#125;</span>权限被授予"</span>, Toast.LENGTH_SHORT)</span><br><span class="line">                        .show()</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">companion</span> <span class="keyword">object</span> &#123;</span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">const</span> <span class="keyword">val</span> TAG = <span class="string">"MainActivity"</span></span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">const</span> <span class="keyword">val</span> PERMISSION_CODE = <span class="number">999</span></span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">const</span> <span class="keyword">val</span> CREATE_DOCUMENT = <span class="number">2000</span></span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">const</span> <span class="keyword">val</span> PICK_DOCUMENT = <span class="number">1000</span></span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">const</span> <span class="keyword">val</span> PICK_DIR = <span class="number">3000</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="build-gradle"><a href="#build-gradle" class="headerlink" title="build.gradle"></a>build.gradle</h4><figure class="highlight gradle"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"> minSdkVersion <span class="string">'R'</span></span><br><span class="line"> targetSdkVersion <span class="string">'R'</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">dependencies</span> &#123;</span><br><span class="line">     <span class="comment">// Kotlin 协程依赖库</span></span><br><span class="line">     implementation <span class="string">"org.jetbrains.kotlinx:kotlinx-coroutines-android:1.3.0"</span></span><br><span class="line">     implementation <span class="string">"org.jetbrains.kotlinx:kotlinx-coroutines-core:1.3.0"</span></span><br><span class="line">     <span class="comment">// Exifinterface 库</span></span><br><span class="line">     implementation <span class="string">'androidx.exifinterface:exifinterface:1.1.0'</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="AndroidManifest-xml"><a href="#AndroidManifest-xml" class="headerlink" title="AndroidManifest.xml"></a>AndroidManifest.xml</h4><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">    <span class="comment">&lt;!-- Android 11 不再需要 WRITE_EXTERNAL_STORAGE --&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--&lt;uses-permission android:name="android.permission.WRITE_EXTERNAL_STORAGE" /&gt;--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">uses-permission</span> <span class="attr">android:name</span>=<span class="string">"android.permission.READ_EXTERNAL_STORAGE"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">uses-permission</span> <span class="attr">android:name</span>=<span class="string">"android.permission.ACCESS_MEDIA_LOCATION"</span> /&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- android:requestLegacyExternalStorage="false" 在 targetSdkVersion &gt; 29 已无法使用，从下面application节点把属性配置去掉了 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">application</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:allowBackup</span>=<span class="string">"false"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:icon</span>=<span class="string">"@mipmap/ic_launcher"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:label</span>=<span class="string">"@string/app_name"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">....</span></span></span><br><span class="line"><span class="tag">    <span class="attr">....</span>/&gt;</span></span><br></pre></td></tr></table></figure><h3 id="后记"><a href="#后记" class="headerlink" title="后记"></a>后记</h3><p>以上的示例大部分基于Android Q 开始，少部分介绍了Android R 新方法。</p><p>更多API的使用 、更多应用场景、更多差异测试，请自己进行参照扩展测试。有什么问题，欢迎在评论处留言。</p><p>[相关文献]</p><blockquote><ul><li><span class="exturl" data-url="aHR0cHM6Ly9kZXZlbG9wZXIuYW5kcm9pZC5nb29nbGUuY24vcHJldmlldy9wcml2YWN5L3N0b3JhZ2U=" title="https://developer.android.google.cn/preview/privacy/storage"> 1. Android 官网 - Storage updates in Android 11<i class="fa fa-external-link"></i></span></li><li><span class="exturl" data-url="aHR0cHM6Ly9tZWRpdW0uY29tL2FuZHJvaWRkZXZlbG9wZXJzL21vZGVybi11c2VyLXN0b3JhZ2Utb24tYW5kcm9pZC1lOTQ2OWU4NjI0Zjk=" title="https://medium.com/androiddevelopers/modern-user-storage-on-android-e9469e8624f9"> 2. Modern User Storage on Android <i class="fa fa-external-link"></i></span></li><li><span class="exturl" data-url="aHR0cHM6Ly9wcm9hbmRyb2lkZGV2LmNvbS9zY29wZWQtc3RvcmFnZS1vbi1hbmRyb2lkLTExLTJjNWRhNzBmYjA3Nw==" title="https://proandroiddev.com/scoped-storage-on-android-11-2c5da70fb077"> 3. Scoped Storage on Android 11 <i class="fa fa-external-link"></i></span></li><li><span class="exturl" data-url="aHR0cHM6Ly9wcm9hbmRyb2lkZGV2LmNvbS93b3JraW5nLXdpdGgtc2NvcGVkLXN0b3JhZ2UtOGE3ZTdjYWZlYTM=" title="https://proandroiddev.com/working-with-scoped-storage-8a7e7cafea3"> 4. Working with Scoped Storage <i class="fa fa-external-link"></i></span></li></ul></blockquote><p>最后 ， 感谢您的阅读 。</p><blockquote><p>本文对Android Q 上分区存储回顾，Android R 上分区存储变化的简单总结。 如果不足之处，欢迎指正。</p></blockquote>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;Android 在 Q 上引入了分区存储，对外部存储访问收拢了宽裕的权限，对存储数据文件的读写进行了限制，那么 Android R 上又有哪些变化呢 ?&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;本文就让我们一起来了解一下 , Let’s go ~&lt;/p&gt;
&lt;hr&gt;
    
    </summary>
    
      <category term="Android" scheme="https://shoewann0402.github.io/categories/Android/"/>
    
      <category term="Android R" scheme="https://shoewann0402.github.io/categories/Android/Android-R/"/>
    
    
      <category term="Android" scheme="https://shoewann0402.github.io/tags/Android/"/>
    
      <category term="Android Q" scheme="https://shoewann0402.github.io/tags/Android-Q/"/>
    
      <category term="Android R" scheme="https://shoewann0402.github.io/tags/Android-R/"/>
    
      <category term="Android 11" scheme="https://shoewann0402.github.io/tags/Android-11/"/>
    
      <category term="MediaStore API" scheme="https://shoewann0402.github.io/tags/MediaStore-API/"/>
    
      <category term="SAF" scheme="https://shoewann0402.github.io/tags/SAF/"/>
    
      <category term="Scoped Storage" scheme="https://shoewann0402.github.io/tags/Scoped-Storage/"/>
    
  </entry>
  
  <entry>
    <title>Android 11 (R) Bubble 气泡</title>
    <link href="https://shoewann0402.github.io/2020/03/10/android-r-dp1-bubble/"/>
    <id>https://shoewann0402.github.io/2020/03/10/android-r-dp1-bubble/</id>
    <published>2020-03-10T13:14:15.000Z</published>
    <updated>2020-03-17T09:29:06.899Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>Android 11 / R 上自家的短信息应用 Messages , 又如FaceBook的 Messager以及Telegram 应用等等。它们实现了Bubble气泡，也都属于聊天讯息功能应用</p></blockquote><p>本文介绍 Android 11 / R DP1 Bubble 气泡</p><hr><a id="more"></a><p><a href="https://shoewann0402.github.io/2019/04/07/android-q-beta2-bubbles/">上一次写气泡</a>是 Android Q ，本节内容我们来看看 Android 11 / R 上的气泡又有哪些变化 ？</p><blockquote><ul><li><span class="exturl" data-url="aHR0cHM6Ly9kZXZlbG9wZXIuYW5kcm9pZC5jb20vc2RrL2FwaV9kaWZmL3ItZHAxL2NoYW5nZXMvYW5kcm9pZC5hcHAuTm90aWZpY2F0aW9uLkJ1YmJsZU1ldGFkYXRhLkJ1aWxkZXI=" title="https://developer.android.com/sdk/api_diff/r-dp1/changes/android.app.Notification.BubbleMetadata.Builder">Notification.BubbleMetadata.Builder 差异报告<i class="fa fa-external-link"></i></span></li></ul></blockquote><table><thead><tr><th>添加方法</th></tr></thead><tbody><tr><td>Builder <span class="exturl" data-url="aHR0cHM6Ly9kZXZlbG9wZXIuYW5kcm9pZC5jb20vcmVmZXJlbmNlL2FuZHJvaWQvYXBwL05vdGlmaWNhdGlvbi5CdWJibGVNZXRhZGF0YS5CdWlsZGVyLmh0bWwjY3JlYXRlSW50ZW50QnViYmxlKGFuZHJvaWQuYXBwLlBlbmRpbmdJbnRlbnQsJTIwYW5kcm9pZC5ncmFwaGljcy5kcmF3YWJsZS5JY29uKQ==" title="https://developer.android.com/reference/android/app/Notification.BubbleMetadata.Builder.html#createIntentBubble(android.app.PendingIntent,%20android.graphics.drawable.Icon)">createIntentBubble<i class="fa fa-external-link"></i></span> (PendingIntent, Icon)</td></tr><tr><td>Builder <span class="exturl" data-url="aHR0cHM6Ly9kZXZlbG9wZXIuYW5kcm9pZC5jb20vcmVmZXJlbmNlL2FuZHJvaWQvYXBwL05vdGlmaWNhdGlvbi5CdWJibGVNZXRhZGF0YS5CdWlsZGVyLmh0bWwjY3JlYXRlU2hvcnRjdXRCdWJibGUoamF2YS5sYW5nLlN0cmluZyk=" title="https://developer.android.com/reference/android/app/Notification.BubbleMetadata.Builder.html#createShortcutBubble(java.lang.String)">createShortcutBubble<i class="fa fa-external-link"></i></span> (String)</td></tr></tbody></table><table><thead><tr><th>变更方法</th><th>状态</th></tr></thead><tbody><tr><td>Builder <span class="exturl" data-url="aHR0cHM6Ly9kZXZlbG9wZXIuYW5kcm9pZC5jb20vcmVmZXJlbmNlL2FuZHJvaWQvYXBwL05vdGlmaWNhdGlvbi5CdWJibGVNZXRhZGF0YS5CdWlsZGVyLmh0bWwjc2V0SWNvbihhbmRyb2lkLmdyYXBoaWNzLmRyYXdhYmxlLkljb24p" title="https://developer.android.com/reference/android/app/Notification.BubbleMetadata.Builder.html#setIcon(android.graphics.drawable.Icon)">setIcon<i class="fa fa-external-link"></i></span> (Icon)</td><td>Now deprecated.</td></tr><tr><td>Builder <span class="exturl" data-url="aHR0cHM6Ly9kZXZlbG9wZXIuYW5kcm9pZC5jb20vcmVmZXJlbmNlL2FuZHJvaWQvYXBwL05vdGlmaWNhdGlvbi5CdWJibGVNZXRhZGF0YS5CdWlsZGVyLmh0bWwjc2V0SW50ZW50KGFuZHJvaWQuYXBwLlBlbmRpbmdJbnRlbnQp" title="https://developer.android.com/reference/android/app/Notification.BubbleMetadata.Builder.html#setIntent(android.app.PendingIntent)">setIntent<i class="fa fa-external-link"></i></span> (PendingIntent)</td><td>Now deprecated.</td></tr></tbody></table><blockquote><ul><li><span class="exturl" data-url="aHR0cHM6Ly9kZXZlbG9wZXIuYW5kcm9pZC5jb20vc2RrL2FwaV9kaWZmL3ItZHAxL2NoYW5nZXMvYW5kcm9pZC5hcHAuTm90aWZpY2F0aW9uLkJ1YmJsZU1ldGFkYXRh" title="https://developer.android.com/sdk/api_diff/r-dp1/changes/android.app.Notification.BubbleMetadata">Notification.BubbleMetadata  差异报告<i class="fa fa-external-link"></i></span></li></ul></blockquote><table><thead><tr><th>添加方法</th></tr></thead><tbody><tr><td>Icon <span class="exturl" data-url="aHR0cHM6Ly9kZXZlbG9wZXIuYW5kcm9pZC5jb20vcmVmZXJlbmNlL2FuZHJvaWQvYXBwL05vdGlmaWNhdGlvbi5CdWJibGVNZXRhZGF0YS5odG1sI2dldEJ1YmJsZUljb24oKQ==" title="https://developer.android.com/reference/android/app/Notification.BubbleMetadata.html#getBubbleIcon()">getBubbleIcon<i class="fa fa-external-link"></i></span> ()</td></tr><tr><td>PendingIntent <span class="exturl" data-url="aHR0cHM6Ly9kZXZlbG9wZXIuYW5kcm9pZC5jb20vcmVmZXJlbmNlL2FuZHJvaWQvYXBwL05vdGlmaWNhdGlvbi5CdWJibGVNZXRhZGF0YS5odG1sI2dldEJ1YmJsZUludGVudCgp" title="https://developer.android.com/reference/android/app/Notification.BubbleMetadata.html#getBubbleIntent()">getBubbleIntent<i class="fa fa-external-link"></i></span> ()</td></tr><tr><td>String <span class="exturl" data-url="aHR0cHM6Ly9kZXZlbG9wZXIuYW5kcm9pZC5jb20vcmVmZXJlbmNlL2FuZHJvaWQvYXBwL05vdGlmaWNhdGlvbi5CdWJibGVNZXRhZGF0YS5odG1sI2dldFNob3J0Y3V0SWQoKQ==" title="https://developer.android.com/reference/android/app/Notification.BubbleMetadata.html#getShortcutId()">getShortcutId<i class="fa fa-external-link"></i></span> ()</td></tr></tbody></table><table><thead><tr><th>变更方法</th><th>状态</th></tr></thead><tbody><tr><td>Icon <span class="exturl" data-url="aHR0cHM6Ly9kZXZlbG9wZXIuYW5kcm9pZC5jb20vcmVmZXJlbmNlL2FuZHJvaWQvYXBwL05vdGlmaWNhdGlvbi5CdWJibGVNZXRhZGF0YS5odG1sI2dldEljb24oKQ==" title="https://developer.android.com/reference/android/app/Notification.BubbleMetadata.html#getIcon()">getIcon<i class="fa fa-external-link"></i></span> ()</td><td>Now deprecated.</td></tr><tr><td>PendingInten <span class="exturl" data-url="aHR0cHM6Ly9kZXZlbG9wZXIuYW5kcm9pZC5jb20vcmVmZXJlbmNlL2FuZHJvaWQvYXBwL05vdGlmaWNhdGlvbi5CdWJibGVNZXRhZGF0YS5odG1sI2dldEludGVudCgp" title="https://developer.android.com/reference/android/app/Notification.BubbleMetadata.html#getIntent()">getIntent<i class="fa fa-external-link"></i></span>()</td><td>Now deprecated.</td></tr></tbody></table><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>我们先来看看，默认Android 短信应用的气泡效果，当通知栏收到一条短信通知</p><p><img alt="android-r-bubble-1.png" data-src="/images/android-r-bubble-1.png"></p><p><strong>[长按]</strong> 这条通知 , 能看到有<strong>show as Bubble</strong> ，<strong>favorite</strong> 、<strong>Smooze</strong>、<strong>Mute</strong> 等选项</p><p><img alt="android-r-bubble-2.png" data-src="/images/android-r-bubble-2.png"></p><p>然后 <strong>[ 点击 show as Bubble ]</strong> 通知栏的消息会作为Bubble气泡显示,悬浮在屏幕上</p><p><img alt="android-r-bubble-3.png" data-src="/images/android-r-bubble-3.png"></p><p>当 <strong>[ 点击 ]</strong> 悬浮气泡 ,气泡会被展开，触发BubbleActivity , 查看完整的对话或者发生新对话内容</p><p><img alt="android-r-bubble-4.png" data-src="/images/android-r-bubble-4.png"></p><p><strong>[ 长按 ]</strong> 气泡拖到底部 移除</p><p><img alt="android-r-bubble-5.png" data-src="/images/android-r-bubble-5.png"></p><p>这就是Android 11 / R 上的气泡效果，那么，接下来就来实现这样的气泡效果</p><h2 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h2><h3 id="首先创建一个BubbleActivity"><a href="#首先创建一个BubbleActivity" class="headerlink" title="首先创建一个BubbleActivity"></a>首先创建一个BubbleActivity</h3><p>用于展示气泡展开后的窗口布局</p><p>[ BubbleActivity.kt ]</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">BubbleActivity</span> : <span class="type">AppCompatActivity</span></span>() &#123;</span><br><span class="line">    <span class="keyword">override</span> <span class="function"><span class="keyword">fun</span> <span class="title">onCreate</span><span class="params">(savedInstanceState: <span class="type">Bundle</span>?)</span></span> &#123;</span><br><span class="line">        <span class="keyword">super</span>.onCreate(savedInstanceState)</span><br><span class="line">        setContentView(R.layout.activity_bubble)</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 具体的逻辑代码</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>[ activity_bubble.xml ]</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">LinearLayout</span></span></span><br><span class="line"><span class="tag">    <span class="attr">xmlns:android</span>=<span class="string">"http://schemas.android.com/apk/res/android"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:id</span>=<span class="string">"@+id/container"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:gravity</span>=<span class="string">"center"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:layout_width</span>=<span class="string">"match_parent"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:layout_height</span>=<span class="string">"match_parent"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">TextView</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_gravity</span>=<span class="string">"center"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:gravity</span>=<span class="string">"center"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:textSize</span>=<span class="string">"20sp"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:text</span>=<span class="string">"这里是聊天对话窗口 .."</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_width</span>=<span class="string">"wrap_content"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_height</span>=<span class="string">"wrap_content"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">LinearLayout</span>&gt;</span></span><br></pre></td></tr></table></figure><p>[ style.xml ]</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">style</span> <span class="attr">name</span>=<span class="string">"AppTheme.NoActionBar"</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="xml">        <span class="tag">&lt;<span class="name">item</span> <span class="attr">name</span>=<span class="string">"windowActionBar"</span>&gt;</span>false<span class="tag">&lt;/<span class="name">item</span>&gt;</span></span></span><br><span class="line"><span class="xml">        <span class="tag">&lt;<span class="name">item</span> <span class="attr">name</span>=<span class="string">"windowNoTitle"</span>&gt;</span>true<span class="tag">&lt;/<span class="name">item</span>&gt;</span></span></span><br><span class="line"><span class="xml">        <span class="tag">&lt;<span class="name">item</span> <span class="attr">name</span>=<span class="string">"android:windowDrawsSystemBarBackgrounds"</span>&gt;</span>true<span class="tag">&lt;/<span class="name">item</span>&gt;</span></span></span><br><span class="line"><span class="xml">        <span class="tag">&lt;<span class="name">item</span> <span class="attr">name</span>=<span class="string">"android:statusBarColor"</span>&gt;</span>@android:color/transparent<span class="tag">&lt;/<span class="name">item</span>&gt;</span></span></span><br><span class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br></pre></td></tr></table></figure><p>[ AndroidManifest.xml ]</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">activity</span> <span class="attr">android:name</span>=<span class="string">".BubbleActivity"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:theme</span>=<span class="string">"@style/AppTheme.NoActionBar"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:label</span>=<span class="string">"气泡"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:allowEmbedded</span>=<span class="string">"true"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:documentLaunchMode</span>=<span class="string">"always"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:resizeableActivity</span>=<span class="string">"true"</span>/&gt;</span></span><br></pre></td></tr></table></figure><h3 id="创建一个Notification公共类"><a href="#创建一个Notification公共类" class="headerlink" title="创建一个Notification公共类"></a>创建一个Notification公共类</h3><p>[ MyNotification.kt ]</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.shoewann.androidrtest</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> android.app.*</span><br><span class="line"><span class="keyword">import</span> android.content.Context</span><br><span class="line"><span class="keyword">import</span> android.content.Intent</span><br><span class="line"><span class="keyword">import</span> android.graphics.drawable.Icon</span><br><span class="line"><span class="keyword">import</span> android.os.Build</span><br><span class="line"><span class="keyword">import</span> android.util.Log</span><br><span class="line"><span class="keyword">import</span> androidx.<span class="keyword">annotation</span>.RequiresApi</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyNotification</span></span>(context: Context) &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">var</span> notificationManager: NotificationManager? = <span class="literal">null</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">var</span> context: Context? = <span class="literal">null</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">companion</span> <span class="keyword">object</span> &#123;</span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">const</span> <span class="keyword">val</span> TAG = <span class="string">"MyNotification"</span></span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">const</span> <span class="keyword">val</span> REQUEST_CONTENT = <span class="number">1</span></span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">const</span> <span class="keyword">val</span> REQUEST_BUBBLE = <span class="number">2</span></span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">init</span> &#123;</span><br><span class="line">        <span class="keyword">this</span>.context = context</span><br><span class="line">        notificationManager =</span><br><span class="line">            context.getSystemService(Context.NOTIFICATION_SERVICE) <span class="keyword">as</span> NotificationManager</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@RequiresApi(Build.VERSION_CODES.R)</span></span><br><span class="line">    <span class="function"><span class="keyword">fun</span> <span class="title">showBubble</span><span class="params">()</span></span> &#123;</span><br><span class="line">        Log.d(TAG, <span class="string">"show bubble"</span>)</span><br><span class="line"></span><br><span class="line">        <span class="comment">//创建通知渠道</span></span><br><span class="line">        <span class="keyword">val</span> channel =</span><br><span class="line">            NotificationChannel(<span class="string">"通知渠道ID"</span>, <span class="string">"通知渠道名称"</span>, NotificationManager.IMPORTANCE_HIGH)</span><br><span class="line">        notificationManager!!.createNotificationChannel(channel)</span><br><span class="line">        <span class="comment">//</span></span><br><span class="line">        <span class="keyword">val</span> icon = Icon.createWithResource(context, R.mipmap.ic_launcher_round)</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 添加聊天人员 A</span></span><br><span class="line">        <span class="keyword">val</span> person = Person.Builder()</span><br><span class="line">            .setName(<span class="string">"Shoewann"</span>)</span><br><span class="line">            .setIcon(icon)</span><br><span class="line">            .build()</span><br><span class="line">        <span class="comment">// 添加聊天人员 B</span></span><br><span class="line">        <span class="keyword">val</span> person2 = Person.Builder()</span><br><span class="line">            .setName(<span class="string">"Bobozai"</span>)</span><br><span class="line">            .setIcon(icon)</span><br><span class="line">            .build()</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 创建一个模拟的短信对话内容</span></span><br><span class="line">        <span class="keyword">val</span> style: Notification.MessagingStyle = Notification.MessagingStyle(person)</span><br><span class="line">            .addMessage(</span><br><span class="line">                <span class="string">"你好，我叫Shoewann,请问你叫什么名字? "</span>,</span><br><span class="line">                <span class="number">1583837786</span>,</span><br><span class="line">                person</span><br><span class="line">            )</span><br><span class="line">            .addMessage(</span><br><span class="line">              <span class="string">"我叫Bobozai"</span>,</span><br><span class="line">                <span class="number">1583837851</span>,</span><br><span class="line">                person2</span><br><span class="line">            ).setGroupConversation(<span class="literal">true</span>)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">val</span> contentIntent = PendingIntent.getActivity(</span><br><span class="line">            context, REQUEST_CONTENT,</span><br><span class="line">            Intent(context, MainActivity::<span class="class"><span class="keyword">class</span>.<span class="title">java</span>), <span class="type">PendingIntent.FLAG_UPDATE_CURRENT</span></span></span><br><span class="line">        )</span><br><span class="line"></span><br><span class="line">        <span class="keyword">val</span> bubbleIntent = PendingIntent.getActivity(</span><br><span class="line">            context,</span><br><span class="line">            REQUEST_BUBBLE,</span><br><span class="line">            Intent(context, BubbleActivity::<span class="class"><span class="keyword">class</span>.<span class="title">java</span>),<span class="type"></span></span></span><br><span class="line">            PendingIntent.FLAG_UPDATE_CURRENT</span><br><span class="line">        )</span><br><span class="line"></span><br><span class="line">        <span class="keyword">val</span> bubbleMetadata = Notification.BubbleMetadata.Builder()</span><br><span class="line">            .setDesiredHeight(<span class="number">400</span>)</span><br><span class="line">            <span class="comment">//.setIcon(icon) // 已废弃</span></span><br><span class="line">            .createShortcutBubble(<span class="string">"Android R 测试"</span>)</span><br><span class="line">            .createIntentBubble(bubbleIntent, icon)</span><br><span class="line">            .setAutoExpandBubble(<span class="literal">true</span>)</span><br><span class="line">           <span class="comment">//.setIntent(bubbleIntent)  // 已废弃</span></span><br><span class="line">            .build()</span><br><span class="line"></span><br><span class="line">        <span class="keyword">val</span> builder = Notification.Builder(context, <span class="string">"通知渠道ID"</span>)</span><br><span class="line">            .setContentTitle(<span class="string">"Bubble"</span>)</span><br><span class="line">            .setContentText(<span class="string">"测试Android R Bubble"</span>)</span><br><span class="line">            .setContentIntent(contentIntent)</span><br><span class="line">            .setSmallIcon(icon)</span><br><span class="line">            .setBubbleMetadata(bubbleMetadata)</span><br><span class="line">            .setStyle(style)</span><br><span class="line">            .addPerson(person)</span><br><span class="line">            .setShowWhen(<span class="literal">true</span>)</span><br><span class="line">        notificationManager!!.notify(<span class="number">0</span>, builder.build());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">fun</span> <span class="title">canBubble</span><span class="params">()</span></span>: <span class="built_in">Boolean</span> &#123;</span><br><span class="line">        <span class="keyword">val</span> channel = notificationManager!!.getNotificationChannel(<span class="string">"通知渠道ID"</span>)</span><br><span class="line">        <span class="keyword">return</span> notificationManager!!.areBubblesAllowed() &amp;&amp; channel.canBubble()</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h3 id="MainActivity-调用"><a href="#MainActivity-调用" class="headerlink" title="MainActivity 调用"></a>MainActivity 调用</h3><p>[MainActivity.kt]</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">val</span> canBubble = MyNotification(<span class="keyword">this</span>).canBubble()</span><br><span class="line"><span class="keyword">if</span> (canBubble)</span><br><span class="line">    Log.d(TAG, <span class="string">"onClick() called with: canBubble = <span class="variable">$canBubble</span>"</span>)</span><br><span class="line">    MyNotification(<span class="keyword">this</span>).showBubble()</span><br></pre></td></tr></table></figure><h3 id="效果图"><a href="#效果图" class="headerlink" title="效果图"></a>效果图</h3><p><img alt="android-r-bubble-6.png" data-src="/images/android-r-bubble-6.png"><br><img alt="android-r-bubble-7.png" data-src="/images/android-r-bubble-7.png"><br><img alt="android-r-bubble-8.png" data-src="/images/android-r-bubble-8.png"><br><img alt="android-r-bubble-9.png" data-src="/images/android-r-bubble-9.png"><br><img alt="android-r-bubble-10.png" data-src="/images/android-r-bubble-10.png"></p><h2 id="气泡什么时候会出现？"><a href="#气泡什么时候会出现？" class="headerlink" title="气泡什么时候会出现？"></a>气泡什么时候会出现？</h2><p><span class="exturl" data-url="aHR0cHM6Ly9kZXZlbG9wZXIuYW5kcm9pZC5jb20vZ3VpZGUvdG9waWNzL3VpL2J1YmJsZXM=" title="https://developer.android.com/guide/topics/ui/bubbles">官方文档<i class="fa fa-external-link"></i></span> 为了减少用户的打扰次数，只有满足以下一个或多个条件，气泡才会出现：</p><blockquote><ul><li>通知使用 <span class="exturl" data-url="aHR0cHM6Ly9kZXZlbG9wZXIuYW5kcm9pZC5jb20vcmVmZXJlbmNlL2FuZHJvaWQvYXBwL05vdGlmaWNhdGlvbi5NZXNzYWdpbmdTdHlsZQ==" title="https://developer.android.com/reference/android/app/Notification.MessagingStyle">MessagingStyle<i class="fa fa-external-link"></i></span>，并且有一个 <span class="exturl" data-url="aHR0cHM6Ly9kZXZlbG9wZXIuYW5kcm9pZC5jb20vcmVmZXJlbmNlL2FuZHJvaWQvYXBwL1BlcnNvbg==" title="https://developer.android.com/reference/android/app/Person">Person<i class="fa fa-external-link"></i></span> 被添加</li><li>该通知来自对 <span class="exturl" data-url="aHR0cHM6Ly9kZXZlbG9wZXIuYW5kcm9pZC5jb20vcmVmZXJlbmNlL2FuZHJvaWQvYXBwL1NlcnZpY2Ujc3RhcnRGb3JlZ3JvdW5kKGludCwlMjBhbmRyb2lkLmFwcC5Ob3RpZmljYXRpb24p" title="https://developer.android.com/reference/android/app/Service#startForeground(int,%20android.app.Notification)">Service.startForeground<i class="fa fa-external-link"></i></span> 的调用,有一个<span class="exturl" data-url="aHR0cHM6Ly9kZXZlbG9wZXIuYW5kcm9pZC5jb20vcmVmZXJlbmNlL2FuZHJvaWQvYXBwL05vdGlmaWNhdGlvbiNDQVRFR09SWV9DQUxM" title="https://developer.android.com/reference/android/app/Notification#CATEGORY_CALL">CATEGORY_CALL<i class="fa fa-external-link"></i></span> 的 <span class="exturl" data-url="aHR0cHM6Ly9kZXZlbG9wZXIuYW5kcm9pZC5jb20vcmVmZXJlbmNlL2FuZHJvaWQvYXBwL05vdGlmaWNhdGlvbi5CdWlsZGVyI3NldENhdGVnb3J5KGphdmEubGFuZy5TdHJpbmcp" title="https://developer.android.com/reference/android/app/Notification.Builder#setCategory(java.lang.String)">类别<i class="fa fa-external-link"></i></span>，并且有一个 <span class="exturl" data-url="aHR0cHM6Ly9kZXZlbG9wZXIuYW5kcm9pZC5jb20vcmVmZXJlbmNlL2FuZHJvaWQvYXBwL1BlcnNvbg==" title="https://developer.android.com/reference/android/app/Person">Person<i class="fa fa-external-link"></i></span> 被添加</li><li>发送通知时，应用程序处于前台。</li></ul></blockquote><p>本示例只演示了以上第一个类别，其他情况请自行验证</p><p>以上就是本文的全部内容，感谢您的阅读</p><blockquote><p>本文基于Android R DP1 , 如有不足，欢迎指正</p></blockquote>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;Android 11 / R 上自家的短信息应用 Messages , 又如FaceBook的 Messager以及Telegram 应用等等。它们实现了Bubble气泡，也都属于聊天讯息功能应用&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;本文介绍 Android 11 / R DP1 Bubble 气泡&lt;/p&gt;
&lt;hr&gt;
    
    </summary>
    
      <category term="Android" scheme="https://shoewann0402.github.io/categories/Android/"/>
    
      <category term="Android R" scheme="https://shoewann0402.github.io/categories/Android/Android-R/"/>
    
    
      <category term="Android" scheme="https://shoewann0402.github.io/tags/Android/"/>
    
      <category term="Notification" scheme="https://shoewann0402.github.io/tags/Notification/"/>
    
      <category term="Android R" scheme="https://shoewann0402.github.io/tags/Android-R/"/>
    
      <category term="Bubble" scheme="https://shoewann0402.github.io/tags/Bubble/"/>
    
  </entry>
  
  <entry>
    <title>Android 11 (R) 之 IntentService</title>
    <link href="https://shoewann0402.github.io/2020/03/10/android-R-IntentService-deprecated/"/>
    <id>https://shoewann0402.github.io/2020/03/10/android-R-IntentService-deprecated/</id>
    <published>2020-03-10T06:29:43.000Z</published>
    <updated>2020-03-10T13:24:39.334Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>Android 11/R 废弃了 <del>IntentService</del></p></blockquote><p>本文我们一起来回顾它</p><hr><a id="more"></a><h2 id="IntentService"><a href="#IntentService" class="headerlink" title="IntentService"></a><del>IntentService</del></h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">public abstract class IntentService</span><br><span class="line">extends Service</span><br><span class="line"></span><br><span class="line">java.lang.Object</span><br><span class="line">   ↳android.content.Context</span><br><span class="line">    ↳android.content.ContextWrapper</span><br><span class="line">     ↳android.app.Service</span><br><span class="line">      ↳android.app.IntentService</span><br></pre></td></tr></table></figure><blockquote><ul><li><strong>废弃原因</strong> : IntentService受到Android 8.0（API级别26）施加的所有<span class="exturl" data-url="aHR0cHM6Ly9kZXZlbG9wZXIuYW5kcm9pZC5nb29nbGUuY24vcHJldmlldy9mZWF0dXJlcy9iYWNrZ3JvdW5k" title="https://developer.android.google.cn/preview/features/background">后台执行限制<i class="fa fa-external-link"></i></span>。</li></ul></blockquote><blockquote><ul><li><strong>替代方案</strong> : 当运行在 Android 8.0 或者更高的版本的时候考虑使用<span class="exturl" data-url="aHR0cHM6Ly9kZXZlbG9wZXIuYW5kcm9pZC5nb29nbGUuY24vcmVmZXJlbmNlL2FuZHJvaWR4L3dvcmsvV29ya01hbmFnZXIuaHRtbA==" title="https://developer.android.google.cn/reference/androidx/work/WorkManager.html">WorkManager<i class="fa fa-external-link"></i></span>或者<span class="exturl" data-url="aHR0cHM6Ly9kZXZlbG9wZXIuYW5kcm9pZC5nb29nbGUuY24vcmVmZXJlbmNlL2FuZHJvaWR4L2NvcmUvYXBwL0pvYkludGVudFNlcnZpY2UuaHRtbA==" title="https://developer.android.google.cn/reference/androidx/core/app/JobIntentService.html">JobIntentService<i class="fa fa-external-link"></i></span> , 利用jobs代替services</li></ul></blockquote><h3 id="回顾"><a href="#回顾" class="headerlink" title="回顾"></a>回顾</h3><p><img alt="intentService.jpg" data-src="/images/intentService.jpg"></p><p>IntentService (API level 3 ~ API level R)基于<a href>Service</a>,可根据需要处理异步请求(表示为<span class="exturl" data-url="aHR0cHM6Ly9kZXZlbG9wZXIuYW5kcm9pZC5nb29nbGUuY24vcmVmZXJlbmNlL2FuZHJvaWQvY29udGVudC9JbnRlbnQ=" title="https://developer.android.google.cn/reference/android/content/Intent">Intent<i class="fa fa-external-link"></i></span>)。客户端通过调用<span class="exturl" data-url="aHR0cHM6Ly9kZXZlbG9wZXIuYW5kcm9pZC5nb29nbGUuY24vcmVmZXJlbmNlL2FuZHJvaWQvY29udGVudC9Db250ZXh0I3N0YXJ0U2VydmljZShhbmRyb2lkLmNvbnRlbnQuSW50ZW50KQ==" title="https://developer.android.google.cn/reference/android/content/Context#startService(android.content.Intent)">Context.startService(Intent)()<i class="fa fa-external-link"></i></span>发送请求。服务根据需要启动，依次使用工作线程处理每一个Intent,当它运行完成自动会停止。</p><p>这种“工作队列处理器”模式通常用于从应用程序的主线程分担任务。IntentService类存在是为了简化此模式并注意机制。要使用它，继承IntentService 并实现 <span class="exturl" data-url="aHR0cHM6Ly9kZXZlbG9wZXIuYW5kcm9pZC5nb29nbGUuY24vcmVmZXJlbmNlL2FuZHJvaWQvYXBwL0ludGVudFNlcnZpY2Ujb25IYW5kbGVJbnRlbnQoYW5kcm9pZC5jb250ZW50LkludGVudCk=" title="https://developer.android.google.cn/reference/android/app/IntentService#onHandleIntent(android.content.Intent)">onHandleIntent(android.content.Intent)<i class="fa fa-external-link"></i></span>。IntentService将收到Intents,启动一个工作线程，并适当停止服务</p><p>所有的请求都在一个单独的工作线程种处理 – 它们或许会耗费大量时间(并且不会阻塞应用程序的主循环)，但是一次只处理一个请求。</p><table><thead><tr><th>构造函数</th><th>说明</th></tr></thead><tbody><tr><td><span class="exturl" data-url="aHR0cHM6Ly9kZXZlbG9wZXIuYW5kcm9pZC5nb29nbGUuY24vcmVmZXJlbmNlL2FuZHJvaWQvYXBwL0ludGVudFNlcnZpY2UjSW50ZW50U2VydmljZShqYXZhLmxhbmcuU3RyaW5nKQ==" title="https://developer.android.google.cn/reference/android/app/IntentService#IntentService(java.lang.String)">IntentService<i class="fa fa-external-link"></i></span>(String name)</td><td>创建一个IntentService,由您的子类的构造函数调用</td></tr></tbody></table><table><thead><tr><th>方法</th><th>说明</th></tr></thead><tbody><tr><td><span class="exturl" data-url="aHR0cHM6Ly9kZXZlbG9wZXIuYW5kcm9pZC5nb29nbGUuY24vcmVmZXJlbmNlL2FuZHJvaWQvYXBwL0ludGVudFNlcnZpY2Ujb25CaW5kKGFuZHJvaWQuY29udGVudC5JbnRlbnQp" title="https://developer.android.google.cn/reference/android/app/IntentService#onBind(android.content.Intent)">onBind<i class="fa fa-external-link"></i></span> (Intent)</td><td>除非您为服务提供绑定，否则不需要实现此方法，因为默认实现返回null</td></tr><tr><td><span class="exturl" data-url="aHR0cHM6Ly9kZXZlbG9wZXIuYW5kcm9pZC5nb29nbGUuY24vcmVmZXJlbmNlL2FuZHJvaWQvYXBwL0ludGVudFNlcnZpY2Ujb25DcmVhdGUoKQ==" title="https://developer.android.google.cn/reference/android/app/IntentService#onCreate()">onCreate<i class="fa fa-external-link"></i></span>()</td><td>首次创建服务时由系统调用。不要直接调用此方法</td></tr><tr><td><span class="exturl" data-url="aHR0cHM6Ly9kZXZlbG9wZXIuYW5kcm9pZC5nb29nbGUuY24vcmVmZXJlbmNlL2FuZHJvaWQvYXBwL0ludGVudFNlcnZpY2Ujb25EZXN0cm95KCk=" title="https://developer.android.google.cn/reference/android/app/IntentService#onDestroy()">onDestroy<i class="fa fa-external-link"></i></span>()</td><td>由系统调用以通知服务该服务已不再使用且已被删除</td></tr><tr><td><span class="exturl" data-url="aHR0cHM6Ly9kZXZlbG9wZXIuYW5kcm9pZC5nb29nbGUuY24vcmVmZXJlbmNlL2FuZHJvaWQvYXBwL0ludGVudFNlcnZpY2Ujb25TdGFydChhbmRyb2lkLmNvbnRlbnQuSW50ZW50LCUyMGludCk=" title="https://developer.android.google.cn/reference/android/app/IntentService#onStart(android.content.Intent,%20int)">onStart<i class="fa fa-external-link"></i></span> (Intent, int)</td><td>改为实现 <span class="exturl" data-url="aHR0cHM6Ly9kZXZlbG9wZXIuYW5kcm9pZC5nb29nbGUuY24vcmVmZXJlbmNlL2FuZHJvaWQvYXBwL1NlcnZpY2Ujb25TdGFydENvbW1hbmQoYW5kcm9pZC5jb250ZW50LkludGVudCwlMjBpbnQsJTIwaW50KQ==" title="https://developer.android.google.cn/reference/android/app/Service#onStartCommand(android.content.Intent,%20int,%20int)">onStartCommand<i class="fa fa-external-link"></i></span>（Intent，int，int）</td></tr><tr><td><span class="exturl" data-url="aHR0cHM6Ly9kZXZlbG9wZXIuYW5kcm9pZC5nb29nbGUuY24vcmVmZXJlbmNlL2FuZHJvaWQvYXBwL1NlcnZpY2Ujb25TdGFydENvbW1hbmQoYW5kcm9pZC5jb250ZW50LkludGVudCwlMjBpbnQsJTIwaW50KQ==" title="https://developer.android.google.cn/reference/android/app/Service#onStartCommand(android.content.Intent,%20int,%20int)">onStartCommand<i class="fa fa-external-link"></i></span>（Intent，int，int）</td><td>您不应为IntentService覆盖此方法。而是改写onHandleIntent（Intent），当IntentService收到启动请求时，系统将调用该方法。</td></tr><tr><td><span class="exturl" data-url="aHR0cHM6Ly9kZXZlbG9wZXIuYW5kcm9pZC5nb29nbGUuY24vcmVmZXJlbmNlL2FuZHJvaWQvYXBwL0ludGVudFNlcnZpY2Ujc2V0SW50ZW50UmVkZWxpdmVyeShib29sZWFuKQ==" title="https://developer.android.google.cn/reference/android/app/IntentService#setIntentRedelivery(boolean)">setIntentRedelivery<i class="fa fa-external-link"></i></span>(boolean)</td><td>设置Intent重新交付首选项</td></tr><tr><td><span class="exturl" data-url="aHR0cHM6Ly9kZXZlbG9wZXIuYW5kcm9pZC5nb29nbGUuY24vcmVmZXJlbmNlL2FuZHJvaWQvYXBwL0ludGVudFNlcnZpY2Ujb25IYW5kbGVJbnRlbnQoYW5kcm9pZC5jb250ZW50LkludGVudCk=" title="https://developer.android.google.cn/reference/android/app/IntentService#onHandleIntent(android.content.Intent)">onHandleIntent<i class="fa fa-external-link"></i></span>(Intent)</td><td>在工作线程上调用此方法以进行处理。</td></tr></tbody></table><h3 id="示例说明"><a href="#示例说明" class="headerlink" title="示例说明"></a>示例说明</h3><p><img alt="intentServiceTest.png" data-src="/images/intentServiceTest.png"></p><blockquote><ul><li>一个进度条：更新加载进度</li><li>三个文本：服务状态（进行中/结束）、 进程状态（进行中/结束）和进度条百分比 (0-100%)</li><li>两个按钮：开始、停止</li></ul></blockquote><p>Activity 启动/停止任务、广播监听更新UI ：文本状态和进度条进度 </p><p>以下分别通过 <strong><del>IntentService</del></strong>、<strong>JobIntentService</strong>、<strong>WorkManager</strong> 3 种方式来实现进度加载效果</p><p>[ activity_main.xml ]</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="utf-8"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">androidx.constraintlayout.widget.ConstraintLayout</span> <span class="attr">xmlns:android</span>=<span class="string">"http://schemas.android.com/apk/res/android"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">xmlns:app</span>=<span class="string">"http://schemas.android.com/apk/res-auto"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">xmlns:tools</span>=<span class="string">"http://schemas.android.com/tools"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:layout_width</span>=<span class="string">"match_parent"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:layout_height</span>=<span class="string">"match_parent"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">tools:context</span>=<span class="string">".MainActivity"</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">ProgressBar</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:id</span>=<span class="string">"@+id/progressBar"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">style</span>=<span class="string">"?android:attr/progressBarStyleHorizontal"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_width</span>=<span class="string">"0dp"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_height</span>=<span class="string">"0dp"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_marginStart</span>=<span class="string">"11dp"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_marginEnd</span>=<span class="string">"12dp"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:max</span>=<span class="string">"100"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:progress</span>=<span class="string">"0"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">app:layout_constraintBottom_toBottomOf</span>=<span class="string">"@+id/tvProgress"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">app:layout_constraintEnd_toStartOf</span>=<span class="string">"@+id/tvProgress"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">app:layout_constraintStart_toStartOf</span>=<span class="string">"parent"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">app:layout_constraintTop_toTopOf</span>=<span class="string">"@+id/tvProgress"</span> /&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">TextView</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:id</span>=<span class="string">"@+id/tvThreadValue"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_width</span>=<span class="string">"wrap_content"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_height</span>=<span class="string">"wrap_content"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_marginTop</span>=<span class="string">"8dp"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:text</span>=<span class="string">"线程结束"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">app:layout_constraintStart_toStartOf</span>=<span class="string">"@+id/tvServiceValue"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">app:layout_constraintTop_toBottomOf</span>=<span class="string">"@+id/tvServiceValue"</span> /&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">TextView</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:id</span>=<span class="string">"@+id/tvThreadStatus"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_width</span>=<span class="string">"wrap_content"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_height</span>=<span class="string">"wrap_content"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_marginStart</span>=<span class="string">"11dp"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_marginTop</span>=<span class="string">"10dp"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:text</span>=<span class="string">"线程状态:"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">app:layout_constraintStart_toStartOf</span>=<span class="string">"parent"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">app:layout_constraintTop_toBottomOf</span>=<span class="string">"@+id/tvServiceStatus"</span> /&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">Button</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:id</span>=<span class="string">"@+id/btnStopService"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_width</span>=<span class="string">"wrap_content"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_height</span>=<span class="string">"wrap_content"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_marginTop</span>=<span class="string">"8dp"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_marginEnd</span>=<span class="string">"16dp"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:text</span>=<span class="string">"停止"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">app:layout_constraintEnd_toEndOf</span>=<span class="string">"parent"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">app:layout_constraintTop_toBottomOf</span>=<span class="string">"@+id/progressBar"</span> /&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">TextView</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:id</span>=<span class="string">"@+id/tvProgress"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_width</span>=<span class="string">"wrap_content"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_height</span>=<span class="string">"wrap_content"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_marginTop</span>=<span class="string">"86dp"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_marginEnd</span>=<span class="string">"15dp"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:text</span>=<span class="string">"0%"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">app:layout_constraintEnd_toEndOf</span>=<span class="string">"parent"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">app:layout_constraintTop_toTopOf</span>=<span class="string">"parent"</span> /&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">TextView</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:id</span>=<span class="string">"@+id/tvServiceValue"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_width</span>=<span class="string">"wrap_content"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_height</span>=<span class="string">"wrap_content"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_marginStart</span>=<span class="string">"14dp"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:text</span>=<span class="string">"服务结束"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">app:layout_constraintStart_toEndOf</span>=<span class="string">"@+id/tvServiceStatus"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">app:layout_constraintTop_toTopOf</span>=<span class="string">"@+id/tvServiceStatus"</span> /&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">Button</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:id</span>=<span class="string">"@+id/btnStart"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_width</span>=<span class="string">"wrap_content"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_height</span>=<span class="string">"wrap_content"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_marginTop</span>=<span class="string">"7dp"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_marginEnd</span>=<span class="string">"13dp"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:text</span>=<span class="string">"开始"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">app:layout_constraintEnd_toStartOf</span>=<span class="string">"@+id/btnStop"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">app:layout_constraintTop_toBottomOf</span>=<span class="string">"@+id/progressBar"</span> /&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">TextView</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:id</span>=<span class="string">"@+id/tvServiceStatus"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_width</span>=<span class="string">"wrap_content"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_height</span>=<span class="string">"wrap_content"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_marginStart</span>=<span class="string">"11dp"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_marginTop</span>=<span class="string">"27dp"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:text</span>=<span class="string">"服务状态:"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">app:layout_constraintStart_toStartOf</span>=<span class="string">"parent"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">app:layout_constraintTop_toTopOf</span>=<span class="string">"parent"</span> /&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">androidx.constraintlayout.widget.ConstraintLayout</span>&gt;</span></span><br></pre></td></tr></table></figure><p>[ MainActivity.kt ]</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.shoewann.androidrtest</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> android.content.BroadcastReceiver</span><br><span class="line"><span class="keyword">import</span> android.content.Context</span><br><span class="line"><span class="keyword">import</span> android.content.Intent</span><br><span class="line"><span class="keyword">import</span> android.content.IntentFilter</span><br><span class="line"><span class="keyword">import</span> android.os.Bundle</span><br><span class="line"><span class="keyword">import</span> android.util.Log</span><br><span class="line"><span class="keyword">import</span> android.view.View</span><br><span class="line"><span class="keyword">import</span> androidx.appcompat.app.AppCompatActivity</span><br><span class="line"><span class="keyword">import</span> androidx.work.*</span><br><span class="line"><span class="keyword">import</span> kotlinx.android.synthetic.main.activity_main.*</span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.TimeUnit</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MainActivity</span> : <span class="type">AppCompatActivity</span></span>(), View.OnClickListener &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">var</span> receiver: MyBroadcastReceiver? = <span class="literal">null</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">var</span> myWorkRequest: WorkRequest? = <span class="literal">null</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">override</span> <span class="function"><span class="keyword">fun</span> <span class="title">onCreate</span><span class="params">(savedInstanceState: <span class="type">Bundle</span>?)</span></span> &#123;</span><br><span class="line">        <span class="keyword">super</span>.onCreate(savedInstanceState)</span><br><span class="line">        setContentView(R.layout.activity_main)</span><br><span class="line">        Log.d(TAG, <span class="string">"onCreate() called with: savedInstanceState = <span class="variable">$savedInstanceState</span>"</span>)</span><br><span class="line">        </span><br><span class="line">        <span class="comment">//初始化广播</span></span><br><span class="line">        initReceiver()</span><br><span class="line">        <span class="comment">//按钮点击监听事件</span></span><br><span class="line">        btnStart.setOnClickListener(<span class="keyword">this</span>)</span><br><span class="line">        btnStop.setOnClickListener(<span class="keyword">this</span>)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 开始 IntentService</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="function"><span class="keyword">fun</span> <span class="title">startIntentService</span><span class="params">()</span></span> &#123;</span><br><span class="line">        <span class="keyword">val</span> intent = Intent(<span class="keyword">this</span>, MyIntentService::<span class="class"><span class="keyword">class</span>.<span class="title">java</span>)</span></span><br><span class="line">        startService(intent)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 停止 IntentService</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="function"><span class="keyword">fun</span> <span class="title">stopIntentService</span><span class="params">()</span></span> &#123;</span><br><span class="line">        <span class="keyword">val</span> intent = Intent(<span class="keyword">this</span>, MyIntentService::<span class="class"><span class="keyword">class</span>.<span class="title">java</span>)</span></span><br><span class="line">        stopService(intent)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 开始 JobIntentService</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="function"><span class="keyword">fun</span> <span class="title">startJobIntentService</span><span class="params">()</span></span> &#123;</span><br><span class="line">        <span class="keyword">val</span> intent = Intent(<span class="keyword">this</span>, MyJobIntentService::<span class="class"><span class="keyword">class</span>.<span class="title">java</span>)</span></span><br><span class="line">        MyJobIntentService.enqueueWork(<span class="keyword">this</span><span class="symbol">@MainActivity</span>, intent)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 开始 WorkManager一次 Work 任务</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="function"><span class="keyword">fun</span> <span class="title">startMyWorkManagerOneTimeWork</span><span class="params">()</span></span> &#123;</span><br><span class="line">        myWorkRequest = OneTimeWorkRequestBuilder&lt;MyWorkManager&gt;()</span><br><span class="line">            .build()</span><br><span class="line">        WorkManager.getInstance(<span class="keyword">this</span>).enqueue(myWorkRequest <span class="keyword">as</span> OneTimeWorkRequest)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 开始 WorkManager 周期性 Work 任务</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="function"><span class="keyword">fun</span> <span class="title">startMyWorkManagerPeriodicWork</span><span class="params">()</span></span> &#123;</span><br><span class="line">    </span><br><span class="line">        <span class="comment">//注意：最短重复间隔是 15 分钟</span></span><br><span class="line">        myWorkRequest = PeriodicWorkRequestBuilder&lt;MyWorkManager&gt;(<span class="number">15</span> * <span class="number">60</span> * <span class="number">1000</span>, TimeUnit.SECONDS)</span><br><span class="line">            .build()</span><br><span class="line">        WorkManager.getInstance(<span class="keyword">this</span>).enqueue(myWorkRequest <span class="keyword">as</span> PeriodicWorkRequest)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 停止work任务</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="function"><span class="keyword">fun</span> <span class="title">stopMyWorkManager</span><span class="params">()</span></span> &#123;</span><br><span class="line">        WorkManager.getInstance(<span class="keyword">this</span>).cancelWorkById(myWorkRequest!!.id)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 初始化广播</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="function"><span class="keyword">fun</span> <span class="title">initReceiver</span><span class="params">()</span></span> &#123;</span><br><span class="line">        Log.d(TAG, <span class="string">"initReceiver() called"</span>)</span><br><span class="line">        <span class="keyword">if</span> (receiver != <span class="literal">null</span>) <span class="keyword">return</span></span><br><span class="line">        receiver = MyBroadcastReceiver()</span><br><span class="line">        <span class="keyword">val</span> intentFilter = IntentFilter()</span><br><span class="line">        intentFilter.addAction(ACTION_CASE_SERVICE)</span><br><span class="line">        intentFilter.addAction(ACTION_CASE_THREAD)</span><br><span class="line">        registerReceiver(receiver, intentFilter)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 广播内部类</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">inner</span> <span class="class"><span class="keyword">class</span> <span class="title">MyBroadcastReceiver</span> : <span class="type">BroadcastReceiver</span></span>() &#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">override</span> <span class="function"><span class="keyword">fun</span> <span class="title">onReceive</span><span class="params">(context: <span class="type">Context</span>, intent: <span class="type">Intent</span>?)</span></span> &#123;</span><br><span class="line">            Log.d(TAG, <span class="string">"onReceive() called with: context = <span class="variable">$context</span>, intent = <span class="variable">$intent</span>"</span>)</span><br><span class="line">            <span class="keyword">if</span> (intent == <span class="literal">null</span>) <span class="keyword">return</span></span><br><span class="line">            <span class="keyword">when</span> (intent.action) &#123;</span><br><span class="line">                ACTION_CASE_SERVICE -&gt; &#123;</span><br><span class="line">                    tvServiceValue.text = intent.getStringExtra(<span class="string">"status"</span>)</span><br><span class="line">                &#125;</span><br><span class="line">                ACTION_CASE_THREAD -&gt; &#123;</span><br><span class="line">                    <span class="keyword">val</span> progress = intent.getIntExtra(<span class="string">"progress"</span>, <span class="number">0</span>)</span><br><span class="line">                    tvThreadValue.text = intent.getStringExtra(<span class="string">"status"</span>)</span><br><span class="line">                    progressBar.progress = progress</span><br><span class="line">                    tvProgress.text = <span class="string">"<span class="variable">$progress</span>%"</span></span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">else</span> -&gt; <span class="keyword">return</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">override</span> <span class="function"><span class="keyword">fun</span> <span class="title">onClick</span><span class="params">(v: <span class="type">View</span>?)</span></span> &#123;</span><br><span class="line">        <span class="keyword">when</span> (v?.id) &#123;</span><br><span class="line">            R.id.btnStart -&gt; &#123;</span><br><span class="line">                <span class="comment">//startIntentService()</span></span><br><span class="line">                <span class="comment">//startJobIntentService()</span></span><br><span class="line">                <span class="comment">//startMyWorkManagerOneTimeWork()</span></span><br><span class="line">                <span class="comment">//startMyWorkManagerPeriodicWork()</span></span><br><span class="line">            &#125;</span><br><span class="line">            R.id.btnStop -&gt; &#123;</span><br><span class="line">                <span class="comment">//stopIntentService()</span></span><br><span class="line">                <span class="comment">//stopMyWorkManager()</span></span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span> -&gt; <span class="keyword">return</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">override</span> <span class="function"><span class="keyword">fun</span> <span class="title">onResume</span><span class="params">()</span></span> &#123;</span><br><span class="line">        <span class="keyword">super</span>.onResume()</span><br><span class="line">        Log.d(TAG, <span class="string">"onResume() called"</span>)</span><br><span class="line">        initReceiver()</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">override</span> <span class="function"><span class="keyword">fun</span> <span class="title">onDestroy</span><span class="params">()</span></span> &#123;</span><br><span class="line">        <span class="keyword">super</span>.onDestroy()</span><br><span class="line">        Log.d(TAG, <span class="string">"onDestroy() called"</span>)</span><br><span class="line">        unregisterReceiver(receiver)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">companion</span> <span class="keyword">object</span> &#123;</span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">const</span> <span class="keyword">val</span> TAG = <span class="string">"MainActivity"</span></span><br><span class="line">        <span class="keyword">const</span> <span class="keyword">val</span> ACTION_CASE_SERVICE = <span class="string">"action_case_service"</span></span><br><span class="line">        <span class="keyword">const</span> <span class="keyword">val</span> ACTION_CASE_THREAD = <span class="string">"action_case_thread"</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="1-IntentService-方式"><a href="#1-IntentService-方式" class="headerlink" title="1. IntentService 方式"></a>1. <del>IntentService</del> 方式</h4><p>[ MyIntentService.kt ]</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.shoewann.androidrtest</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> android.app.IntentService</span><br><span class="line"><span class="keyword">import</span> android.content.Intent</span><br><span class="line"><span class="keyword">import</span> android.util.Log</span><br><span class="line"><span class="keyword">import</span> com.shoewann.androidrtest.MainActivity.Companion.ACTION_CASE_SERVICE</span><br><span class="line"><span class="keyword">import</span> com.shoewann.androidrtest.MainActivity.Companion.ACTION_CASE_THREAD</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyIntentService</span> : <span class="type">IntentService</span></span>(<span class="string">"MyIntentService"</span>) &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">var</span> isRunning = <span class="literal">true</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">var</span> count = <span class="number">0</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">companion</span> <span class="keyword">object</span>&#123;</span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">const</span> <span class="keyword">val</span> TAG = <span class="string">"MyIntentService"</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">override</span> <span class="function"><span class="keyword">fun</span> <span class="title">onCreate</span><span class="params">()</span></span> &#123;</span><br><span class="line">        <span class="keyword">super</span>.onCreate()</span><br><span class="line">        Log.d(TAG, <span class="string">"onCreate() called"</span>)</span><br><span class="line">        sendServiceStatus(<span class="string">"服务启动"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">override</span> <span class="function"><span class="keyword">fun</span> <span class="title">onHandleIntent</span><span class="params">(intent: <span class="type">Intent</span>?)</span></span> &#123;</span><br><span class="line">        Log.d(TAG, <span class="string">"onHandleIntent() called with: intent = <span class="variable">$intent</span>"</span>)</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            sendThreadStatus(<span class="string">"线程启动"</span>, count)</span><br><span class="line">            Thread.sleep(<span class="number">1000</span>)</span><br><span class="line">            sendServiceStatus(<span class="string">"服务运行中..."</span>)</span><br><span class="line">            isRunning = <span class="literal">true</span></span><br><span class="line">            count = <span class="number">0</span></span><br><span class="line">            <span class="keyword">while</span> (isRunning) &#123;</span><br><span class="line">                count++</span><br><span class="line">                <span class="keyword">if</span> (count &gt;= <span class="number">100</span>) &#123;</span><br><span class="line">                    isRunning = <span class="literal">false</span></span><br><span class="line">                &#125;</span><br><span class="line">                Thread.sleep(<span class="number">50</span>)</span><br><span class="line">                sendThreadStatus(<span class="string">"线程运行中..."</span>, count)</span><br><span class="line">            &#125;</span><br><span class="line">            sendThreadStatus(<span class="string">"线程结束"</span>, count)</span><br><span class="line">        &#125; <span class="keyword">catch</span> (e: InterruptedException) &#123;</span><br><span class="line">            e.printStackTrace()</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">override</span> <span class="function"><span class="keyword">fun</span> <span class="title">onDestroy</span><span class="params">()</span></span> &#123;</span><br><span class="line">        <span class="keyword">super</span>.onDestroy()</span><br><span class="line">        Log.d(TAG, <span class="string">"onDestroy() called"</span>)</span><br><span class="line">        sendServiceStatus(<span class="string">"服务结束"</span>)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 发送服务状态信息</span></span><br><span class="line">    <span class="keyword">private</span> <span class="function"><span class="keyword">fun</span> <span class="title">sendServiceStatus</span><span class="params">(status: <span class="type">String</span>)</span></span> &#123;</span><br><span class="line">        Log.d(TAG, <span class="string">"sendServiceStatus() called with: status = <span class="variable">$status</span>"</span>)</span><br><span class="line">        <span class="keyword">val</span> intent = Intent(ACTION_CASE_SERVICE)</span><br><span class="line">        intent.putExtra(<span class="string">"status"</span>, status)</span><br><span class="line">        sendBroadcast(intent)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 发送线程状态信息</span></span><br><span class="line">    <span class="keyword">private</span> <span class="function"><span class="keyword">fun</span> <span class="title">sendThreadStatus</span><span class="params">(status: <span class="type">String</span>, progress: <span class="type">Int</span>)</span></span> &#123;</span><br><span class="line">        Log.d(TAG, <span class="string">"sendThreadStatus() called with: status = <span class="variable">$status</span>, progress = <span class="variable">$progress</span>"</span>)</span><br><span class="line">        <span class="keyword">val</span> intent = Intent(ACTION_CASE_THREAD)</span><br><span class="line">        intent.putExtra(<span class="string">"status"</span>, status)</span><br><span class="line">        intent.putExtra(<span class="string">"progress"</span>, progress)</span><br><span class="line">        sendBroadcast(intent)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">service</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:name</span>=<span class="string">".MyIntentService"</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:exported</span>=<span class="string">"false"</span> /&gt;</span></span><br></pre></td></tr></table></figure><h4 id="2-JobIntentService-方式"><a href="#2-JobIntentService-方式" class="headerlink" title="2. JobIntentService 方式"></a>2. JobIntentService 方式</h4><p>[ MyJobIntentService.kt ]</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.shoewann.androidrtest</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> android.content.Context</span><br><span class="line"><span class="keyword">import</span> android.content.Intent</span><br><span class="line"><span class="keyword">import</span> android.util.Log</span><br><span class="line"><span class="keyword">import</span> androidx.core.app.JobIntentService</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyJobIntentService</span> : <span class="type">JobIntentService</span></span>() &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">var</span> isRunning = <span class="literal">true</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">var</span> count = <span class="number">0</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">companion</span> <span class="keyword">object</span> &#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">const</span> <span class="keyword">val</span> TAG = <span class="string">"MyJobIntentService"</span></span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">const</span> <span class="keyword">val</span> JOB_ID = <span class="number">1000</span></span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">fun</span> <span class="title">enqueueWork</span><span class="params">(context: <span class="type">Context</span>, work: <span class="type">Intent</span>)</span></span> &#123;</span><br><span class="line">            enqueueWork(context, MyJobIntentService::<span class="class"><span class="keyword">class</span>.<span class="title">java</span>, <span class="type">JOB_ID</span>, <span class="type">work)</span></span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">override</span> <span class="function"><span class="keyword">fun</span> <span class="title">onHandleWork</span><span class="params">(intent: <span class="type">Intent</span>)</span></span> &#123;</span><br><span class="line">        Log.d(TAG, <span class="string">"onHandleWork() called with: intent = <span class="variable">$intent</span>"</span>)</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            sendThreadStatus(<span class="string">"线程启动"</span>, count)</span><br><span class="line">            Thread.sleep(<span class="number">1000</span>)</span><br><span class="line">            sendServiceStatus(<span class="string">"服务运行中..."</span>)</span><br><span class="line">            isRunning = <span class="literal">true</span></span><br><span class="line">            count = <span class="number">0</span></span><br><span class="line">            <span class="keyword">while</span> (isRunning) &#123;</span><br><span class="line">                count++</span><br><span class="line">                <span class="keyword">if</span> (count &gt;= <span class="number">100</span>) &#123;</span><br><span class="line">                    isRunning = <span class="literal">false</span></span><br><span class="line">                &#125;</span><br><span class="line">                Thread.sleep(<span class="number">50</span>)</span><br><span class="line">                sendThreadStatus(<span class="string">"线程运行中..."</span>, count)</span><br><span class="line">            &#125;</span><br><span class="line">            sendThreadStatus(<span class="string">"线程结束"</span>, count)</span><br><span class="line">        &#125; <span class="keyword">catch</span> (e: InterruptedException) &#123;</span><br><span class="line">            e.printStackTrace()</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">override</span> <span class="function"><span class="keyword">fun</span> <span class="title">onDestroy</span><span class="params">()</span></span> &#123;</span><br><span class="line">        <span class="keyword">super</span>.onDestroy()</span><br><span class="line">        Log.d(TAG, <span class="string">"onDestroy() called"</span>)</span><br><span class="line">        sendServiceStatus(<span class="string">"服务结束"</span>)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 发送服务状态信息</span></span><br><span class="line">    <span class="keyword">private</span> <span class="function"><span class="keyword">fun</span> <span class="title">sendServiceStatus</span><span class="params">(status: <span class="type">String</span>)</span></span> &#123;</span><br><span class="line">        Log.d(TAG, <span class="string">"sendServiceStatus() called with: status = <span class="variable">$status</span>"</span>)</span><br><span class="line">        <span class="keyword">val</span> intent = Intent(MainActivity.ACTION_CASE_SERVICE)</span><br><span class="line">        intent.putExtra(<span class="string">"status"</span>, status)</span><br><span class="line">        sendBroadcast(intent)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 发送线程状态信息</span></span><br><span class="line">    <span class="keyword">private</span> <span class="function"><span class="keyword">fun</span> <span class="title">sendThreadStatus</span><span class="params">(status: <span class="type">String</span>, progress: <span class="type">Int</span>)</span></span> &#123;</span><br><span class="line">        Log.d(TAG, <span class="string">"sendThreadStatus() called with: status = <span class="variable">$status</span>, progress = <span class="variable">$progress</span>"</span>)</span><br><span class="line">        <span class="keyword">val</span> intent = Intent(MainActivity.ACTION_CASE_THREAD)</span><br><span class="line">        intent.putExtra(<span class="string">"status"</span>, status)</span><br><span class="line">        intent.putExtra(<span class="string">"progress"</span>, progress)</span><br><span class="line">        sendBroadcast(intent)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>[ AndroidManifest.xml ]</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">uses-permission</span> <span class="attr">android:name</span>=<span class="string">"android.permission.WAKE_LOCK"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">service</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:name</span>=<span class="string">".MyJobIntentService"</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:exported</span>=<span class="string">"true"</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:permission</span>=<span class="string">"android.permission.BIND_JOB_SERVICE"</span> /&gt;</span></span><br></pre></td></tr></table></figure><h4 id="2-WorkManager-方式"><a href="#2-WorkManager-方式" class="headerlink" title="2. WorkManager 方式"></a>2. WorkManager 方式</h4><p>[ MyWorkManager.kt ]</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.shoewann.androidrtest</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> android.content.Context</span><br><span class="line"><span class="keyword">import</span> android.content.Intent</span><br><span class="line"><span class="keyword">import</span> android.util.Log</span><br><span class="line"><span class="keyword">import</span> androidx.work.Worker</span><br><span class="line"><span class="keyword">import</span> androidx.work.WorkerParameters</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyWorkManager</span></span>(context: Context, params: WorkerParameters) : Worker(context, params) &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">var</span> isRunning = <span class="literal">true</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">var</span> count = <span class="number">0</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">companion</span> <span class="keyword">object</span> &#123;</span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">const</span> <span class="keyword">val</span> TAG = <span class="string">"MyWorkManager"</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">var</span> context: Context? = <span class="literal">null</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">var</span> params: WorkerParameters? = <span class="literal">null</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">init</span> &#123;</span><br><span class="line">        <span class="keyword">this</span>.context = context</span><br><span class="line">        <span class="keyword">this</span>.params = params</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">override</span> <span class="function"><span class="keyword">fun</span> <span class="title">doWork</span><span class="params">()</span></span>: Result &#123;</span><br><span class="line">        Log.d(TAG, <span class="string">"doWork() called"</span>)</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            sendThreadStatus(<span class="string">"线程启动"</span>, count)</span><br><span class="line">            Thread.sleep(<span class="number">1000</span>)</span><br><span class="line">            sendServiceStatus(<span class="string">"服务运行中..."</span>)</span><br><span class="line">            isRunning = <span class="literal">true</span></span><br><span class="line">            count = <span class="number">0</span></span><br><span class="line">            <span class="keyword">while</span> (isRunning) &#123;</span><br><span class="line">                count++</span><br><span class="line">                <span class="keyword">if</span> (count &gt;= <span class="number">100</span>) &#123;</span><br><span class="line">                    isRunning = <span class="literal">false</span></span><br><span class="line">                &#125;</span><br><span class="line">                Thread.sleep(<span class="number">50</span>)</span><br><span class="line">                sendThreadStatus(<span class="string">"线程运行中..."</span>, count)</span><br><span class="line">            &#125;</span><br><span class="line">            sendThreadStatus(<span class="string">"线程结束"</span>, count)</span><br><span class="line">        &#125; <span class="keyword">catch</span> (e: InterruptedException) &#123;</span><br><span class="line">            e.printStackTrace()</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> Result.success()</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="function"><span class="keyword">fun</span> <span class="title">sendServiceStatus</span><span class="params">(status: <span class="type">String</span>)</span></span> &#123;</span><br><span class="line">        Log.d(TAG, <span class="string">"sendServiceStatus() called with: status = <span class="variable">$status</span>"</span>)</span><br><span class="line">        <span class="keyword">val</span> intent = Intent(MainActivity.ACTION_CASE_SERVICE)</span><br><span class="line">        intent.putExtra(<span class="string">"status"</span>, status)</span><br><span class="line">        context?.sendBroadcast(intent)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="function"><span class="keyword">fun</span> <span class="title">sendThreadStatus</span><span class="params">(status: <span class="type">String</span>, progress: <span class="type">Int</span>)</span></span> &#123;</span><br><span class="line">        Log.d(TAG, <span class="string">"sendThreadStatus() called with: status = <span class="variable">$status</span>, progress = <span class="variable">$progress</span>"</span>)</span><br><span class="line">        <span class="keyword">val</span> intent = Intent(MainActivity.ACTION_CASE_THREAD)</span><br><span class="line">        intent.putExtra(<span class="string">"status"</span>, status)</span><br><span class="line">        intent.putExtra(<span class="string">"progress"</span>, progress)</span><br><span class="line">        context?.sendBroadcast(intent)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">override</span> <span class="function"><span class="keyword">fun</span> <span class="title">onStopped</span><span class="params">()</span></span> &#123;</span><br><span class="line">        <span class="keyword">super</span>.onStopped()</span><br><span class="line">        Log.d(TAG, <span class="string">"onStopped() called"</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>[ app -&gt; build.gradle ]</p><figure class="highlight gradle"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">dependencies</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 依赖配置</span></span><br><span class="line">    <span class="keyword">def</span> work_version = <span class="string">"2.3.3"</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">// (Java only)</span></span><br><span class="line">    implementation <span class="string">"androidx.work:work-runtime:$work_version"</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// Kotlin + coroutines</span></span><br><span class="line">    implementation <span class="string">"androidx.work:work-runtime-ktx:$work_version"</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// optional - RxJava2 support</span></span><br><span class="line">    implementation <span class="string">"androidx.work:work-rxjava2:$work_version"</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// optional - GCMNetworkManager support</span></span><br><span class="line">    implementation <span class="string">"androidx.work:work-gcm:$work_version"</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// optional - Test helpers</span></span><br><span class="line">    androidTestImplementation <span class="string">"androidx.work:work-testing:$work_version"</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="效果"><a href="#效果" class="headerlink" title="效果"></a>效果</h3><h4 id="1-IntentService"><a href="#1-IntentService" class="headerlink" title="1. IntentService"></a>1. <del>IntentService</del></h4><blockquote><ul><li>点击［开始］，服务运行，线程计数完成后，服务和线程都结束。</li><li>点击［开始］，服务运行，线程计数完成前，点击［停止］，服务结束，线程计数完成后线程结束。</li><li>点击两次［开始］，服务运行，第一次线程计数完成后，进行第二次线程计数，两次完成后，服务和线程都结束。</li><li>点击两次［开始］，服务运行，第一次线程计数完成前，点击两次[停止]，服务结束，第一次线程计数完成后线程结束，不进行第二次线程计数</li></ul></blockquote><h4 id="2-JobIntentService"><a href="#2-JobIntentService" class="headerlink" title="2. JobIntentService"></a>2. JobIntentService</h4><blockquote><ul><li>点击［开始］，服务运行，线程计数完成后，服务和线程都结束。</li><li>点击［开始］，服务运行，线程计数完成前，点击［停止］，服务运行中，线程计数完成后线程结束。</li><li>点击两次［开始］，服务运行，第一次线程计数完成后，进行第二次线程计数，两次完成后，服务和线程都结束。</li><li>点击两次［开始］，服务运行，第一次线程计数完成前，点击两次[停止]，服务运行中，第一次线程计数完成后线程结束，不进行第二次线程计数</li></ul></blockquote><h4 id="3-WorkManager-OneTimeWork，非周期性"><a href="#3-WorkManager-OneTimeWork，非周期性" class="headerlink" title="3. WorkManager (OneTimeWork，非周期性)"></a>3. WorkManager (OneTimeWork，非周期性)</h4><blockquote><ul><li>点击［开始］，服务运行，线程计数完成后，服务和线程都结束。</li><li>点击［开始］，服务运行，线程计数完成前，点击［停止］，服务无法结束，线程计数完成后线程结束。</li><li>点击两次［开始］，服务运行，两次线程同时进行叠加计数，线程结束，服务运行中。</li><li>点击两次［开始］，服务运行，两次线程同时进行叠加计数，点击两次[停止]，两次完成后分别进行两次线程结束，服务运行中。</li></ul></blockquote><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><ol><li><p>IntentService 和 JobIntentService(都继承自Service),创建一个工作线程处理多线程任务，线程优先级相对普通线程要高，不需要手动结束，在任务处理完后，会自动关闭服务</p></li><li><p>IntentService从未被设计为可以取消的，因此缺少用于取消JobIntentService的任何API。因此，JobIntenService仅应用于不需要取消的工作。JobIntentService是作为实现的IntentService。尽管您可以stopService()用来销毁IntentService，这可能不会对用于onHandleIntent（）的后台线程产生影响，在onHandleIntent方法完成前一个请求之前，它不会通过某些intent操作停止或处理任何其他请求。在任务执行完毕之前，将不会调用stopService（）( via : <span class="exturl" data-url="aHR0cHM6Ly9zdGFja292ZXJmbG93LmNvbS9xdWVzdGlvbnMvNDU5MjIxNzgvaG93LXRvLWNhbmNlbC1hLWpvYmludGVudHNlcnZpY2U=" title="https://stackoverflow.com/questions/45922178/how-to-cancel-a-jobintentservice"> how-to-cancel-a-jobintentservice <i class="fa fa-external-link"></i></span>)</p></li><li><p>WorkManager，并不是所有的任务都可以取消，当任务正在执行时是不能取消的，当然任务执行完成了，取消也是意义的，也就是说当任务加入到ManagerWork的队列中但是还没有执行时才可以取消。</p></li></ol><ol start="4"><li>如果将[开始]按钮里面的代码延时(70s)启动，模拟后台启动，<code>MainActivity.kt</code> 改成如下：</li></ol><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">R.id.btnStart -&gt; &#123;</span><br><span class="line">               Log.d(TAG, <span class="string">"startService() called"</span>)</span><br><span class="line">               Handler(Looper.getMainLooper()).postDelayed(&#123;</span><br><span class="line">                       <span class="comment">//startIntentService()</span></span><br><span class="line">                       <span class="comment">//startJobIntentService()</span></span><br><span class="line">                       <span class="comment">//startMyWorkManagerOneTimeWork()</span></span><br><span class="line">                       <span class="comment">//startMyWorkManagerPeriodicWork()</span></span><br><span class="line">                   &#125;, <span class="number">70</span> * <span class="number">1000</span>)</span><br><span class="line">           &#125;</span><br></pre></td></tr></table></figure><p>再点击 <strong>开始</strong> 按钮之后，按<strong>Home</strong>键回到<strong>launcher</strong><br><strong><del>IntentService</del></strong> 的方式会因为Android O / 8.0 后台限制抛出异常</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">2020-03-10 17:23:01.132 10813-10813/com.shoewann.androidrtest D/MainActivity: startIntentService() called</span><br><span class="line">2020-03-10 17:23:01.139 10813-10813/com.shoewann.androidrtest D/AndroidRuntime: Shutting down VM</span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line">    --------- beginning of crash</span><br><span class="line">2020-03-10 17:23:01.143 10813-10813/com.shoewann.androidrtest E/AndroidRuntime: FATAL EXCEPTION: main</span><br><span class="line">    Process: com.shoewann.androidrtest, PID: 10813</span><br><span class="line">    java.lang.IllegalStateException: Not allowed to start service Intent &#123; cmp=com.shoewann.androidrtest/.MyIntentService &#125;: app is in background uid UidRecord&#123;f520899 u0a421 LAST bg:+1m8s709ms idle change:idle procs:1 seq(0,0,0)&#125;</span><br><span class="line">        at android.app.ContextImpl.startServiceCommon(ContextImpl.java:1699)</span><br><span class="line">        at android.app.ContextImpl.startService(ContextImpl.java:1654)</span><br><span class="line">        at android.content.ContextWrapper.startService(ContextWrapper.java:719)</span><br><span class="line">        at com.shoewann.androidrtest.MainActivity.startIntentService(MainActivity.kt:59)</span><br><span class="line">        at com.shoewann.androidrtest.MainActivity.access$startIntentService(MainActivity.kt:18)</span><br><span class="line">        at com.shoewann.androidrtest.MainActivity$onClick$1.run(MainActivity.kt:158)</span><br><span class="line">        at android.os.Handler.handleCallback(Handler.java:907)</span><br><span class="line">        at android.os.Handler.dispatchMessage(Handler.java:99)</span><br><span class="line">        at android.os.Looper.loop(Looper.java:216)</span><br><span class="line">        at android.app.ActivityThread.main(ActivityThread.java:7506)</span><br><span class="line">        at java.lang.reflect.Method.invoke(Native Method)</span><br><span class="line">    a</span><br><span class="line">2020-03-10 17:23:01.169 10813-10813/com.shoewann.androidrtest I/Process: Sending signal. PID: 10813 SIG: 9</span><br></pre></td></tr></table></figure><p>其他均验证通过<br><strong>JobIntentService</strong> 和 <strong>WorkManager</strong> 的方式为 <strong><del>IntentService</del></strong> 替代方案</p><p>以上就是本文的全部内容，其他方面请自行总结扩展测试，感谢您的阅读</p><blockquote><p>本文基于Android 11 / R DP1 发布，如有不足, 欢迎指正</p></blockquote>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;Android 11/R 废弃了 &lt;del&gt;IntentService&lt;/del&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;本文我们一起来回顾它&lt;/p&gt;
&lt;hr&gt;
    
    </summary>
    
      <category term="Android" scheme="https://shoewann0402.github.io/categories/Android/"/>
    
      <category term="Android R" scheme="https://shoewann0402.github.io/categories/Android/Android-R/"/>
    
    
      <category term="Android" scheme="https://shoewann0402.github.io/tags/Android/"/>
    
      <category term="Android R" scheme="https://shoewann0402.github.io/tags/Android-R/"/>
    
      <category term="IntentService" scheme="https://shoewann0402.github.io/tags/IntentService/"/>
    
      <category term="Jobs" scheme="https://shoewann0402.github.io/tags/Jobs/"/>
    
      <category term="JobIntentService" scheme="https://shoewann0402.github.io/tags/JobIntentService/"/>
    
      <category term="WorkManager" scheme="https://shoewann0402.github.io/tags/WorkManager/"/>
    
  </entry>
  
  <entry>
    <title>Android 11 (R) 之 Handler 相关变化</title>
    <link href="https://shoewann0402.github.io/2020/03/09/android-R-about-handler-change/"/>
    <id>https://shoewann0402.github.io/2020/03/09/android-R-about-handler-change/</id>
    <published>2020-03-09T06:18:37.000Z</published>
    <updated>2020-03-09T07:04:56.959Z</updated>
    
    <content type="html"><![CDATA[<p><span class="exturl" data-url="aHR0cHM6Ly9kZXZlbG9wZXIuYW5kcm9pZC5nb29nbGUuY24vcmVmZXJlbmNlL2FuZHJvaWQvb3MvSGFuZGxl" title="https://developer.android.google.cn/reference/android/os/Handle">Handler<i class="fa fa-external-link"></i></span> 类，相信大家并不陌生，也应当耳熟能详，且铭记于心<br>几乎项目中使用频率较高，同时也是面试时常挂嘴边的必考知识点</p><p>今天我们来谈谈在Android 11/R 上 Handler 相关变化</p><hr><a id="more"></a><h2 id="Handler"><a href="#Handler" class="headerlink" title="Handler"></a>Handler</h2><p>Handler 可让您发送和处理 Message 和 Runnable 与线程的 MessageQueue 关联的对象。每个处理程序<br>实例与单个线程以及该线程的消息相关联排队。创建新的处理程序时，它会绑定到 Looper。它将消息和可运行消息传递到该 Looper 的消息排队并在该 Looper 的线程上执行它们。</p><p>Android 11/R DP1 的发布，参考以下的差异报告 官方对 <span class="exturl" data-url="aHR0cHM6Ly9kZXZlbG9wZXIuYW5kcm9pZC5nb29nbGUuY24vcmVmZXJlbmNlL2FuZHJvaWQvb3MvSGFuZGxl" title="https://developer.android.google.cn/reference/android/os/Handle">Handler<i class="fa fa-external-link"></i></span> 类的两个构造函数进行了更改，一个是 <span class="exturl" data-url="aHR0cHM6Ly9kZXZlbG9wZXIuYW5kcm9pZC5nb29nbGUuY24vcmVmZXJlbmNlL2FuZHJvaWQvb3MvSGFuZGxlciNIYW5kbGVyKCk=" title="https://developer.android.google.cn/reference/android/os/Handler#Handler()">Handler()<i class="fa fa-external-link"></i></span>，另一个是 <span class="exturl" data-url="aHR0cHM6Ly9kZXZlbG9wZXIuYW5kcm9pZC5nb29nbGUuY24vcmVmZXJlbmNlL2FuZHJvaWQvb3MvSGFuZGxlciNIYW5kbGVyKGFuZHJvaWQub3MuSGFuZGxlci5DYWxsYmFjayk=" title="https://developer.android.google.cn/reference/android/os/Handler#Handler(android.os.Handler.Callback)">Handler(Handler.Callback callback)<i class="fa fa-external-link"></i></span></p><p>结果也就是将这两个方法 ——  <strong><del>废！弃！了！</del></strong></p><table><thead><tr><th>Changed Constructors</th><th></th></tr></thead><tbody><tr><td><span class="exturl" data-url="aHR0cHM6Ly9kZXZlbG9wZXIuYW5kcm9pZC5jb20vcmVmZXJlbmNlL2FuZHJvaWQvb3MvSGFuZGxlci5odG1sI0hhbmRsZXIoKQ==" title="https://developer.android.com/reference/android/os/Handler.html#Handler()">Handler<i class="fa fa-external-link"></i></span>()</td><td><strong>Now deprecated</strong>.</td></tr><tr><td><span class="exturl" data-url="aHR0cHM6Ly9kZXZlbG9wZXIuYW5kcm9pZC5jb20vcmVmZXJlbmNlL2FuZHJvaWQvb3MvSGFuZGxlci5odG1sI0hhbmRsZXIoYW5kcm9pZC5vcy5IYW5kbGVyLkNhbGxiYWNrKQ==" title="https://developer.android.com/reference/android/os/Handler.html#Handler(android.os.Handler.Callback)">Handler<i class="fa fa-external-link"></i></span>(Callback)</td><td><strong>Now deprecated</strong>.</td></tr></tbody></table><blockquote><ul><li><span class="exturl" data-url="aHR0cHM6Ly9kZXZlbG9wZXIuYW5kcm9pZC5jb20vc2RrL2FwaV9kaWZmL3ItZHAxL2NoYW5nZXMvYW5kcm9pZC5vcy5IYW5kbGVy" title="https://developer.android.com/sdk/api_diff/r-dp1/changes/android.os.Handler">Handler 差异报告<i class="fa fa-external-link"></i></span></li></ul></blockquote><hr><blockquote><p><strong><del>Handler()</del></strong> </p></blockquote><p>这个构造函数废弃了, 在Handler构造期间隐式选择Looper会导致操作悄无声息的丢失(如果Handler不再期待新的任务并退出)，崩溃(如果Handler有时在没有激活Looper的主线程中被创建) 或者竞争条件下的bug,处理程序与之关联的线程不是作者预期的，而是使用 <span class="exturl" data-url="aHR0cHM6Ly9kZXZlbG9wZXIuYW5kcm9pZC5jb20vcmVmZXJlbmNlL2phdmEvdXRpbC9jb25jdXJyZW50L0V4ZWN1dG9y" title="https://developer.android.com/reference/java/util/concurrent/Executor">Executor<i class="fa fa-external-link"></i></span> 或者使用 <span class="exturl" data-url="aHR0cHM6Ly9kZXZlbG9wZXIuYW5kcm9pZC5jb20vcmVmZXJlbmNlL2FuZHJvaWQvb3MvTG9vcGVyI2dldE1haW5Mb29wZXIoKQ==" title="https://developer.android.com/reference/android/os/Looper#getMainLooper()">Looper#getMainLooper<i class="fa fa-external-link"></i></span>、<span class="exturl" data-url="aHR0cHM6Ly9kZXZlbG9wZXIuYW5kcm9pZC5jb20vcmVmZXJlbmNlL2FuZHJvaWQvdmlldy9WaWV3I2dldEhhbmRsZXIoKQ==" title="https://developer.android.com/reference/android/view/View#getHandler()">View#getHandler()<i class="fa fa-external-link"></i></span>, 或者类似方法显式指定Looper。如果为了兼容性需要隐式线程局部行为，使用 <strong>new Handler(Looper.myLooper())</strong> 让读者清楚知道。</p><blockquote><p><strong><del>Handler(Handler.Callback callback)</del></strong></p></blockquote><p>这个构造函数废弃了, 在Handler构造期间隐式选择Looper会导致操作悄无声息的丢失(如果Handler不再期待新的任务并退出)，崩溃(如果Handler有时在没有激活Looper的主线程中被创建) 或者竞争条件下的bug,处理程序与之关联的线程不是作者预期的，而是使用 <span class="exturl" data-url="aHR0cHM6Ly9kZXZlbG9wZXIuYW5kcm9pZC5jb20vcmVmZXJlbmNlL2phdmEvdXRpbC9jb25jdXJyZW50L0V4ZWN1dG9y" title="https://developer.android.com/reference/java/util/concurrent/Executor">Executor<i class="fa fa-external-link"></i></span> 或者使用 <span class="exturl" data-url="aHR0cHM6Ly9kZXZlbG9wZXIuYW5kcm9pZC5jb20vcmVmZXJlbmNlL2FuZHJvaWQvb3MvTG9vcGVyI2dldE1haW5Mb29wZXIoKQ==" title="https://developer.android.com/reference/android/os/Looper#getMainLooper()">Looper#getMainLooper<i class="fa fa-external-link"></i></span>、<span class="exturl" data-url="aHR0cHM6Ly9kZXZlbG9wZXIuYW5kcm9pZC5jb20vcmVmZXJlbmNlL2FuZHJvaWQvdmlldy9WaWV3I2dldEhhbmRsZXIoKQ==" title="https://developer.android.com/reference/android/view/View#getHandler()">View#getHandler()<i class="fa fa-external-link"></i></span>, 或者类似方法显式指定Looper。如果为了兼容性需要隐式线程局部行为，使用 <strong>new Handler(Looper.myLooper(), callback)</strong> 让读者清楚知道。</p><hr><p>通过上面的官方文档介绍<br>那么在Android 11 /R 之后创建Handler构造函数</p><blockquote><ul><li><del>Handler()</del> 变更为 <strong>new Handler(Looper.myLooper())</strong></li><li><del>Handler(Handler.Callback callback)</del> 变更为 <strong>new Handler(Looper.myLooper(), callback)</strong></li></ul></blockquote><h2 id="相关示例"><a href="#相关示例" class="headerlink" title="相关示例"></a>相关示例</h2><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.shoewann.androidrtest</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> android.os.Bundle</span><br><span class="line"><span class="keyword">import</span> android.os.Handler</span><br><span class="line"><span class="keyword">import</span> android.os.Looper</span><br><span class="line"><span class="keyword">import</span> android.os.Message</span><br><span class="line"><span class="keyword">import</span> android.util.Log</span><br><span class="line"><span class="keyword">import</span> android.widget.Toast</span><br><span class="line"><span class="keyword">import</span> androidx.appcompat.app.AppCompatActivity</span><br><span class="line"><span class="keyword">import</span> kotlinx.android.synthetic.main.activity_main.*</span><br><span class="line"><span class="keyword">import</span> java.lang.ref.WeakReference</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MainActivity</span> : <span class="type">AppCompatActivity</span></span>() &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">override</span> <span class="function"><span class="keyword">fun</span> <span class="title">onCreate</span><span class="params">(savedInstanceState: <span class="type">Bundle</span>?)</span></span> &#123;</span><br><span class="line">        <span class="keyword">super</span>.onCreate(savedInstanceState)</span><br><span class="line">        setContentView(R.layout.activity_main)</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Handler()  --&gt; R 上已废弃</span></span><br><span class="line">        handler1 = <span class="keyword">object</span> : Handler() &#123;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">override</span> <span class="function"><span class="keyword">fun</span> <span class="title">handleMessage</span><span class="params">(msg: <span class="type">Message</span>)</span></span> &#123;</span><br><span class="line">                <span class="keyword">super</span>.handleMessage(msg)</span><br><span class="line">                Log.d(TAG, <span class="string">"handler1 handleMessage() called with: message = [<span class="variable">$msg</span>]"</span>)</span><br><span class="line">                <span class="keyword">if</span> (msg.what == <span class="number">100</span>) &#123;</span><br><span class="line">                    Log.d(TAG, <span class="string">"handler1 收到消息: <span class="subst">$&#123;msg.obj&#125;</span>"</span>)</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Handler(Handler.Callback callback) --&gt; R 上已废弃</span></span><br><span class="line">        handler2 = Handler(Handler.Callback &#123;</span><br><span class="line">            Log.d(TAG, <span class="string">"handler 2 handleMessage() called with: message = [<span class="variable">$it</span>]"</span>)</span><br><span class="line">            <span class="keyword">if</span> (it.what == <span class="number">200</span>) &#123;</span><br><span class="line">                Log.d(TAG, <span class="string">"handler 2 收到消息: <span class="subst">$&#123;it.obj&#125;</span>"</span>)</span><br><span class="line">                <span class="keyword">return</span><span class="symbol">@Callback</span> <span class="literal">true</span></span><br><span class="line">            &#125;</span><br><span class="line">            <span class="literal">false</span></span><br><span class="line">        &#125;)</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Handler(Looper looper)  R 上替代 Handler()</span></span><br><span class="line">        handler3 = <span class="keyword">object</span> : Handler(Looper.myLooper()!!) &#123;</span><br><span class="line">            <span class="keyword">override</span> <span class="function"><span class="keyword">fun</span> <span class="title">handleMessage</span><span class="params">(msg: <span class="type">Message</span>)</span></span> &#123;</span><br><span class="line">                <span class="keyword">super</span>.handleMessage(msg)</span><br><span class="line">                Log.d(TAG, <span class="string">"handler3 handleMessage() called with: msg = [<span class="variable">$msg</span>]"</span>)</span><br><span class="line">                <span class="keyword">if</span> (msg.what == <span class="number">300</span>) &#123;</span><br><span class="line">                    Log.d(TAG, <span class="string">"handler3 收到消息: <span class="subst">$&#123;msg.obj&#125;</span>"</span>)</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Handler(Looper looper,Handler.Callback callback)  R 上替代 Handler(Handler.Callback callback)</span></span><br><span class="line">        handler4 = Handler(Looper.myLooper()!!, Handler.Callback &#123;</span><br><span class="line">            Log.d(TAG, <span class="string">"handler4 handleMessage() called with: msg = [<span class="variable">$it</span>]"</span>)</span><br><span class="line">            <span class="keyword">if</span> (it.what == <span class="number">400</span>) &#123;</span><br><span class="line">                Log.d(TAG, <span class="string">"handler4 收到消息: <span class="subst">$&#123;it.obj&#125;</span>"</span>)</span><br><span class="line">                <span class="keyword">return</span><span class="symbol">@Callback</span> <span class="literal">true</span></span><br><span class="line">            &#125;</span><br><span class="line">            <span class="literal">false</span></span><br><span class="line">        &#125;)</span><br><span class="line">        <span class="comment">// 弱引用 + 静态内部类 -- Handler()</span></span><br><span class="line">        handler5 = Handler5(<span class="keyword">this</span><span class="symbol">@MainActivity</span>)</span><br><span class="line">        <span class="comment">// 弱引用 + 静态内部类 -- Handler(Looper looper)</span></span><br><span class="line">        handler6 = Handler6(<span class="keyword">this</span><span class="symbol">@MainActivity</span>)</span><br><span class="line"></span><br><span class="line">        handler7 = Handler(Looper.myLooper()!!, WeakReference(Handler.Callback &#123;</span><br><span class="line">            <span class="keyword">if</span> (it.what == <span class="number">700</span>) &#123;</span><br><span class="line">                Log.d(TAG, <span class="string">"handler7 收到消息: <span class="subst">$&#123;it.obj&#125;</span>"</span>)</span><br><span class="line">                <span class="keyword">return</span><span class="symbol">@Callback</span> <span class="literal">true</span></span><br><span class="line">            &#125;</span><br><span class="line">            <span class="literal">false</span></span><br><span class="line">        &#125;).<span class="keyword">get</span>())</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="comment">//弱引用 + 静态内部类 ---&gt; Runnable</span></span><br><span class="line">        myRunnable = MyRunnable(<span class="keyword">this</span><span class="symbol">@MainActivity</span>)</span><br><span class="line">        </span><br><span class="line">        <span class="comment">//子线程开始运行</span></span><br><span class="line">        <span class="comment">//如果这里直接new Runnable的方式会导致内存泄漏 (后面会说到)</span></span><br><span class="line">        Thread(myRunnable).start()</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">companion</span> <span class="keyword">object</span> &#123;</span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">const</span> <span class="keyword">val</span> TAG = <span class="string">"MainActivity"</span></span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">var</span> handler1: Handler? = <span class="literal">null</span></span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">var</span> handler2: Handler? = <span class="literal">null</span></span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">var</span> handler3: Handler? = <span class="literal">null</span></span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">var</span> handler4: Handler? = <span class="literal">null</span></span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">var</span> handler5: Handler? = <span class="literal">null</span></span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">var</span> handler6: Handler? = <span class="literal">null</span></span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">var</span> handler7: Handler? = <span class="literal">null</span></span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">var</span> myRunnable: MyRunnable? = <span class="literal">null</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// ------------------------ 弱引用 + 静态内部类 (开始)---------------------------------</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">private</span> <span class="class"><span class="keyword">class</span> <span class="title">MyRunnable</span></span>(activity: MainActivity) : Runnable &#123;</span><br><span class="line">            <span class="keyword">private</span> <span class="keyword">var</span> activity: WeakReference&lt;MainActivity&gt;? = <span class="literal">null</span></span><br><span class="line"></span><br><span class="line">            <span class="keyword">init</span> &#123;</span><br><span class="line">                <span class="keyword">this</span>.activity = WeakReference(activity)</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">override</span> <span class="function"><span class="keyword">fun</span> <span class="title">run</span><span class="params">()</span></span> &#123;</span><br><span class="line">                <span class="keyword">if</span> (activity?.<span class="keyword">get</span>() == <span class="literal">null</span>) <span class="keyword">return</span></span><br><span class="line">                <span class="comment">//模拟网络请求数据---&gt; 耗时操作</span></span><br><span class="line">                Thread.sleep(<span class="number">10000</span>)</span><br><span class="line">                <span class="keyword">val</span> <span class="keyword">data</span> = <span class="string">"This is a json data from web server"</span></span><br><span class="line">                <span class="comment">//发送消息</span></span><br><span class="line">                sendMsg(handler1!!, <span class="number">100</span>, <span class="keyword">data</span>)</span><br><span class="line">                sendMsg(handler2!!, <span class="number">200</span>, <span class="keyword">data</span>)</span><br><span class="line">                sendMsg(handler3!!, <span class="number">300</span>, <span class="keyword">data</span>)</span><br><span class="line">                sendMsg(handler4!!, <span class="number">400</span>, <span class="keyword">data</span>)</span><br><span class="line">                sendMsg(handler5!!, <span class="number">500</span>, <span class="keyword">data</span>)</span><br><span class="line">                sendMsg(handler6!!, <span class="number">600</span>, <span class="keyword">data</span>)</span><br><span class="line">                sendMsg(handler7!!, <span class="number">700</span>, <span class="keyword">data</span>)</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Handler() -- R 上已废弃</span></span><br><span class="line">        <span class="keyword">private</span> <span class="class"><span class="keyword">class</span> <span class="title">Handler5</span></span>(activity: MainActivity) : Handler() &#123;</span><br><span class="line">            <span class="keyword">private</span> <span class="keyword">var</span> activity: WeakReference&lt;MainActivity&gt;? = <span class="literal">null</span></span><br><span class="line"></span><br><span class="line">            <span class="keyword">init</span> &#123;</span><br><span class="line">                <span class="keyword">this</span>.activity = WeakReference(activity)</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">override</span> <span class="function"><span class="keyword">fun</span> <span class="title">handleMessage</span><span class="params">(msg: <span class="type">Message</span>)</span></span> &#123;</span><br><span class="line">                <span class="keyword">super</span>.handleMessage(msg)</span><br><span class="line">                Log.d(TAG, <span class="string">"handler5 handleMessage() called with: message = [<span class="variable">$msg</span>]"</span>)</span><br><span class="line">                <span class="keyword">if</span> (activity?.<span class="keyword">get</span>() == <span class="literal">null</span>) <span class="keyword">return</span></span><br><span class="line">                <span class="keyword">if</span> (msg.what == <span class="number">500</span>) &#123;</span><br><span class="line">                    Log.d(TAG, <span class="string">"handler5 收到消息: <span class="subst">$&#123;msg.obj&#125;</span>"</span>)</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Handler(Looper looper) -- R 上替代 Handler()</span></span><br><span class="line">        <span class="keyword">private</span> <span class="class"><span class="keyword">class</span> <span class="title">Handler6</span></span>(activity: MainActivity) : Handler(Looper.myLooper()!!) &#123;</span><br><span class="line">            <span class="keyword">private</span> <span class="keyword">var</span> activity: WeakReference&lt;MainActivity&gt;? = <span class="literal">null</span></span><br><span class="line"></span><br><span class="line">            <span class="keyword">init</span> &#123;</span><br><span class="line">                <span class="keyword">this</span>.activity = WeakReference(activity)</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">override</span> <span class="function"><span class="keyword">fun</span> <span class="title">handleMessage</span><span class="params">(msg: <span class="type">Message</span>)</span></span> &#123;</span><br><span class="line">                <span class="keyword">super</span>.handleMessage(msg)</span><br><span class="line">                Log.d(TAG, <span class="string">"handler6 handleMessage() called with: message = [<span class="variable">$msg</span>]"</span>)</span><br><span class="line">                <span class="keyword">if</span> (activity?.<span class="keyword">get</span>() == <span class="literal">null</span>) <span class="keyword">return</span></span><br><span class="line">                <span class="keyword">if</span> (msg.what == <span class="number">600</span>) &#123;</span><br><span class="line">                    Log.d(TAG, <span class="string">"handler6 收到消息: <span class="subst">$&#123;msg.obj&#125;</span>"</span>)</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// ------------------------ 弱引用 + 静态内部类 (结束)---------------------------------</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="keyword">private</span> <span class="function"><span class="keyword">fun</span> <span class="title">sendMsg</span><span class="params">(handler: <span class="type">Handler</span>, what: <span class="type">Int</span>, obj: <span class="type">String</span>)</span></span> &#123;</span><br><span class="line">            Log.d(TAG, <span class="string">"sendMsg() called with: handler = <span class="variable">$handler</span>, what = <span class="variable">$what</span>"</span>)</span><br><span class="line">            <span class="keyword">val</span> message = handler.obtainMessage()</span><br><span class="line">            message.what = what</span><br><span class="line">            message.obj = obj</span><br><span class="line">            handler.sendMessage(message)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">override</span> <span class="function"><span class="keyword">fun</span> <span class="title">onBackPressed</span><span class="params">()</span></span> &#123;</span><br><span class="line">        <span class="keyword">super</span>.onBackPressed()</span><br><span class="line">        Log.d(TAG, <span class="string">"onBackPressed() called"</span>)</span><br><span class="line">        finish()</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">override</span> <span class="function"><span class="keyword">fun</span> <span class="title">onDestroy</span><span class="params">()</span></span> &#123;</span><br><span class="line">        <span class="keyword">super</span>.onDestroy()</span><br><span class="line">        Log.d(TAG, <span class="string">"onDestroy() called"</span>)</span><br><span class="line">        handler1?.removeCallbacksAndMessages(<span class="literal">null</span>)</span><br><span class="line">        handler2?.removeCallbacksAndMessages(<span class="literal">null</span>)</span><br><span class="line">        handler3?.removeCallbacksAndMessages(<span class="literal">null</span>)</span><br><span class="line">        handler4?.removeCallbacksAndMessages(<span class="literal">null</span>)</span><br><span class="line">        handler5?.removeCallbacksAndMessages(<span class="literal">null</span>)</span><br><span class="line">        handler6?.removeCallbacksAndMessages(<span class="literal">null</span>)</span><br><span class="line">        handler7?.removeCallbacksAndMessages(<span class="literal">null</span>)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="内存泄漏"><a href="#内存泄漏" class="headerlink" title="内存泄漏"></a>内存泄漏</h3><h4 id="1-Handler"><a href="#1-Handler" class="headerlink" title="1. Handler"></a>1. Handler</h4><figure class="highlight kt"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> Handler handler = new Handler() &#123;</span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="keyword">public</span> void handleMessage(Message msg) &#123;</span><br><span class="line">            <span class="keyword">super</span>.handleMessage(msg);</span><br><span class="line">            </span><br><span class="line">            Toast.makeText(......).show();</span><br><span class="line">            textview.setText(<span class="string">"xxxx"</span>)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;;</span><br></pre></td></tr></table></figure><p>Handler允许我们发送延时消息，如果在延时消息未处理完，而此时Handler所在的Activity被关闭，但因为上述Handler用法则可能会导致内存泄漏。那么，在延时消息未处理完时，Handler无法释放外部类MainActivity的对象，从而导致内存泄漏产生。</p><h4 id="2-Runnable"><a href="#2-Runnable" class="headerlink" title="2. Runnable"></a>2. Runnable</h4><figure class="highlight kt"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> Runnable mRunnable = new Runnable() &#123;</span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="keyword">public</span> void run() &#123;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;;</span><br></pre></td></tr></table></figure><p>该使用方式是创建了一个内部类，内部类隐性持有外部类对象的引用，如果Activity结束，Runnable里面的任务没有处理完，则不会释放Activity的引用，则Activity无法被回收，造成内存泄漏。</p><h2 id="Looper"><a href="#Looper" class="headerlink" title="Looper"></a>Looper</h2><p>Looper在android的消息机制充当消息循环的角色，它不停的从MessageQueue中拿出消息，并将消息交给Handler处理。</p><h3 id="prepareMainLooper"><a href="#prepareMainLooper" class="headerlink" title="prepareMainLooper()"></a><del>prepareMainLooper()</del></h3><p>在Android 11/ R中，<strong><code>Looper.prepareMainLooper()</code></strong> <span class="exturl" data-url="aHR0cHM6Ly9kZXZlbG9wZXIuYW5kcm9pZC5nb29nbGUuY24vcmVmZXJlbmNlL2FuZHJvaWQvb3MvTG9vcGVyI3ByZXBhcmVNYWluTG9vcGVyKCk=" title="https://developer.android.google.cn/reference/android/os/Looper#prepareMainLooper()">已废弃<i class="fa fa-external-link"></i></span></p><p><img alt="prepareMainLooper_deprecated.png" data-src="/images/prepareMainLooper_deprecated.png"></p><p><strong>方法作用</strong> : 将当前线程初始化为循环程序，将其标记为应用程序的主循环程序<br><strong>废弃原因</strong> : 应用程序的主循环程序是由Android环境创建的，因此您无需在自己应用里调用此函数。</p><p>【源码部分】</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Initialize the current thread as a looper, marking it as an</span></span><br><span class="line"><span class="comment">     * application's main looper. See also: &#123;<span class="doctag">@link</span> #prepare()&#125;</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@deprecated</span> The main looper for your application is created by the Android environment,</span></span><br><span class="line"><span class="comment">     *   so you should never need to call this function yourself.</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Deprecated</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">prepareMainLooper</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        prepare(<span class="keyword">false</span>);</span><br><span class="line">        <span class="keyword">synchronized</span> (Looper.class) &#123;</span><br><span class="line">            <span class="keyword">if</span> (sMainLooper != <span class="keyword">null</span>) &#123;</span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> IllegalStateException(<span class="string">"The main Looper has already been prepared."</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            sMainLooper = myLooper();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>ActivityThread是android的主线程，android主线程在创建的时候会在main函数中调用Looper.prepareMainLooper()主动创建一个Looper。</p><p>从上面的信息我们可以知道，prepareMainLooper函数中有调用了Looper的prepare来创建Looper</p><p>在子线程中直接使用Looper.prepare()方法创建，确保在调用这个方法之后调用loop()方法，并使用quit()方法结束</p><p>【源码部分】</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/** Initialize the current thread as a looper.</span></span><br><span class="line"><span class="comment">     * This gives you a chance to create handlers that then reference</span></span><br><span class="line"><span class="comment">     * this looper, before actually starting the loop. Be sure to call</span></span><br><span class="line"><span class="comment">     * &#123;<span class="doctag">@link</span> #loop()&#125; after calling this method, and end it by calling</span></span><br><span class="line"><span class="comment">     * &#123;<span class="doctag">@link</span> #quit()&#125;.</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">prepare</span><span class="params">()</span> </span>&#123;</span><br><span class="line">       prepare(<span class="keyword">true</span>);</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">prepare</span><span class="params">(<span class="keyword">boolean</span> quitAllowed)</span> </span>&#123;</span><br><span class="line">       <span class="comment">//一个线程中只能有一个Looper</span></span><br><span class="line">       <span class="keyword">if</span> (sThreadLocal.get() != <span class="keyword">null</span>) &#123;</span><br><span class="line">           <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(<span class="string">"Only one Looper may be created per thread"</span>);</span><br><span class="line">       &#125;</span><br><span class="line">       <span class="comment">//创建Looper</span></span><br><span class="line">       sThreadLocal.set(<span class="keyword">new</span> Looper(quitAllowed));</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><p>在线程中我们可以调用Looper.prepare，这个函数中 sThreadLocal.set()中创建一个Looper，该方法不仅创建了Looper，其实也创建了MessageQueue,以及将Looper将当前线程和Looper关联起来了。</p><p>【源码部分】</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="title">Looper</span><span class="params">(<span class="keyword">boolean</span> quitAllowed)</span> </span>&#123;</span><br><span class="line">    mQueue = <span class="keyword">new</span> MessageQueue(quitAllowed);</span><br><span class="line">    mThread = Thread.currentThread();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>而Looper的Loop()方法，主要是用来从MessageQueue消息队列里面拿出消息。</p><p>以上就是本文的全部内容，感谢您的阅读</p><blockquote><p>本文基于Android R DP1 post，如有不足, 欢迎指正</p></blockquote>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;a href=&quot;https://developer.android.google.cn/reference/android/os/Handle&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Handler&lt;/a&gt; 类，相信大家并不陌生，也应当耳熟能详，且铭记于心&lt;br&gt;几乎项目中使用频率较高，同时也是面试时常挂嘴边的必考知识点&lt;/p&gt;
&lt;p&gt;今天我们来谈谈在Android 11/R 上 Handler 相关变化&lt;/p&gt;
&lt;hr&gt;
    
    </summary>
    
      <category term="Android" scheme="https://shoewann0402.github.io/categories/Android/"/>
    
      <category term="Android R" scheme="https://shoewann0402.github.io/categories/Android/Android-R/"/>
    
    
      <category term="Android" scheme="https://shoewann0402.github.io/tags/Android/"/>
    
      <category term="Android R" scheme="https://shoewann0402.github.io/tags/Android-R/"/>
    
      <category term="Handler" scheme="https://shoewann0402.github.io/tags/Handler/"/>
    
      <category term="Looper" scheme="https://shoewann0402.github.io/tags/Looper/"/>
    
      <category term="prepareMainLooper" scheme="https://shoewann0402.github.io/tags/prepareMainLooper/"/>
    
  </entry>
  
  <entry>
    <title>Android 11 (R) 之 AsyncTask 前世今生</title>
    <link href="https://shoewann0402.github.io/2020/03/06/android-R-AsyncTask-deprecated/"/>
    <id>https://shoewann0402.github.io/2020/03/06/android-R-AsyncTask-deprecated/</id>
    <published>2020-03-06T13:31:42.376Z</published>
    <updated>2020-03-06T13:31:42.392Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>在过去的十年中，<span class="exturl" data-url="aHR0cHM6Ly9kZXZlbG9wZXIuYW5kcm9pZC5nb29nbGUuY24vcmVmZXJlbmNlL2tvdGxpbi9hbmRyb2lkL29zL0FzeW5jVGFzaw==" title="https://developer.android.google.cn/reference/kotlin/android/os/AsyncTask">AsyncTask<i class="fa fa-external-link"></i></span>一直是用于在Android中编写并发代码的最广泛使用的解决方案之一<br>但是，从 Android 11 (R) 开始，官方正式弃用, 也标志着<strong>AsyncTask</strong> 的时代正式结束</p></blockquote><p>本文我们一起来回顾它的前世今生</p><hr><a id="more"></a><h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><p><img alt="async_task_deprecated.jpg" data-src="/images/async_task_deprecated.jpg"></p><p><strong>本名</strong>：AsyncTask<br><strong>中文名</strong>：异步任务<br><strong>出生日期</strong>：2009 年 Android 1.5 ( API Level 3 )<br><strong>去世日期</strong>：2020 年 Android 11  ( API Level R )<br><strong>所处位置</strong>：<span class="exturl" data-url="aHR0cHM6Ly9kZXZlbG9wZXIuYW5kcm9pZC5nb29nbGUuY24vcmVmZXJlbmNlL2tvdGxpbi9hbmRyb2lkL29zL0FzeW5jVGFzaw==" title="https://developer.android.google.cn/reference/kotlin/android/os/AsyncTask">android.os.AsyncTask<i class="fa fa-external-link"></i></span></p><h2 id="前世"><a href="#前世" class="headerlink" title="前世"></a>前世</h2><h3 id="作用"><a href="#作用" class="headerlink" title="作用"></a>作用</h3><p><span class="exturl" data-url="aHR0cHM6Ly9kZXZlbG9wZXIuYW5kcm9pZC5nb29nbGUuY24vcmVmZXJlbmNlL2tvdGxpbi9hbmRyb2lkL29zL0FzeW5jVGFzaw==" title="https://developer.android.google.cn/reference/kotlin/android/os/AsyncTask">AsyncTask<i class="fa fa-external-link"></i></span> 是安卓开发中使用的一种轻量级异步任务类。其作用是在线程池中执行后台任务，并在执行过程中将执行进度传递给主线程，当任务执行完毕后，将最终结果传递给主线程。</p><h3 id="产生背景"><a href="#产生背景" class="headerlink" title="产生背景"></a>产生背景</h3><p>安卓系统线程分为主线程和子线程，主线程也叫UI线程。主线程主要负责与用户交互。为了更好的用户体验，保证系统不因主线程的阻塞而产生卡顿，安卓系统要求主线程中不能执行耗时任务。例如：IO操作、网络请求等必须在子线程中完成。<span class="exturl" data-url="aHR0cHM6Ly9kZXZlbG9wZXIuYW5kcm9pZC5nb29nbGUuY24vcmVmZXJlbmNlL2tvdGxpbi9hbmRyb2lkL29zL0FzeW5jVGFzaw==" title="https://developer.android.google.cn/reference/kotlin/android/os/AsyncTask">AsyncTask<i class="fa fa-external-link"></i></span>就是为了适应这种需要而产生。</p><h3 id="使用方式"><a href="#使用方式" class="headerlink" title="使用方式"></a>使用方式</h3><p>直接使用 AsyncTask</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">AsyncTask.execute &#123;</span><br><span class="line">           Log.d(TAG, &quot;###### AsyncTask execute #####&quot;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="原型"><a href="#原型" class="headerlink" title="原型"></a>原型</h3><p> — java </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">AsyncTask</span> &lt; <span class="title">Params</span>, <span class="title">Progress</span>, <span class="title">Result</span> &gt;</span></span><br></pre></td></tr></table></figure><p>— kotlin </p><figure class="highlight kt"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">AsyncTask</span>&lt;<span class="type">Params : Any!, Progress : Any!, Result : Any!</span>&gt;</span></span><br></pre></td></tr></table></figure><p>AsyncTask是一个泛型抽象类</p><table><thead><tr><th>参数</th><th>说明</th></tr></thead><tbody><tr><td>Params</td><td>执行后台任务所需参数类型</td></tr><tr><td>Progress</td><td>后台任务执行进度的类型</td></tr><tr><td>Result</td><td>台任务执行完毕后返回结果类型</td></tr></tbody></table><p>并非所有类型都总是由异步任务使用。要将类型标记为未使用，只需使用该类型 Void</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="class"><span class="keyword">class</span> <span class="title">MyTask</span> <span class="keyword">extends</span> <span class="title">AsyncTask</span>&lt;<span class="title">Void</span>, <span class="title">Void</span>, <span class="title">Void</span>&gt; </span>&#123; ... &#125;</span><br></pre></td></tr></table></figure><h3 id="核心方法"><a href="#核心方法" class="headerlink" title="核心方法"></a>核心方法</h3><p>AsyncTask提供4个核心方法：</p><ol><li><p>protected void <strong>onPreExecute</strong>()</p><table><thead><tr><th>参数</th><th>说明</th></tr></thead><tbody><tr><td>执行线程</td><td>主线程</td></tr><tr><td>调用时间</td><td>异步任务执行之前</td></tr><tr><td>方法作用</td><td>异步任务执行前的初始化工作</td></tr></tbody></table></li><li><p>protected Result <strong>doInBackground</strong>(Params…params)</p><table><thead><tr><th>参数</th><th>说明</th></tr></thead><tbody><tr><td>执行线程</td><td>线程池中执行</td></tr><tr><td>调用时间</td><td>任务开始后到任务结束之前</td></tr><tr><td>方法作用</td><td>用于执行异步任务</td></tr></tbody></table></li><li><p>protected void <strong>onProgressUpdate</strong>(Prgress…values)</p><table><thead><tr><th>参数</th><th>说明</th></tr></thead><tbody><tr><td>执行线程</td><td>主线程</td></tr><tr><td>调用时间</td><td>任务开始后到任务结束之前</td></tr><tr><td>方法作用</td><td>用于更新任务进度</td></tr></tbody></table></li><li><p>protected void <strong>onPostExecute</strong>(Result result)</p><table><thead><tr><th>参数</th><th>说明</th></tr></thead><tbody><tr><td>执行线程</td><td>主线程</td></tr><tr><td>调用时间</td><td>异步任务执行之后</td></tr><tr><td>方法作用</td><td>将异步任务的执行结果传递给主线程</td></tr></tbody></table></li></ol><h3 id="官方示例"><a href="#官方示例" class="headerlink" title="官方示例"></a>官方示例</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="class"><span class="keyword">class</span> <span class="title">DownloadFilesTask</span> <span class="keyword">extends</span> <span class="title">AsyncTask</span>&lt;<span class="title">URL</span>, <span class="title">Integer</span>, <span class="title">Long</span>&gt; </span>&#123;</span><br><span class="line">     <span class="function"><span class="keyword">protected</span> Long <span class="title">doInBackground</span><span class="params">(URL... urls)</span> </span>&#123;</span><br><span class="line">         <span class="keyword">int</span> count = urls.length;</span><br><span class="line">         <span class="keyword">long</span> totalSize = <span class="number">0</span>;</span><br><span class="line">         <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; count; i++) &#123;</span><br><span class="line">             totalSize += Downloader.downloadFile(urls[i]);</span><br><span class="line">             publishProgress((<span class="keyword">int</span>) ((i / (<span class="keyword">float</span>) count) * <span class="number">100</span>));</span><br><span class="line">             <span class="comment">// Escape early if cancel() is called</span></span><br><span class="line">             <span class="keyword">if</span> (isCancelled()) <span class="keyword">break</span>;</span><br><span class="line">         &#125;</span><br><span class="line">         <span class="keyword">return</span> totalSize;</span><br><span class="line">     &#125;</span><br><span class="line"></span><br><span class="line">     <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onProgressUpdate</span><span class="params">(Integer... progress)</span> </span>&#123;</span><br><span class="line">         setProgressPercent(progress[<span class="number">0</span>]);</span><br><span class="line">     &#125;</span><br><span class="line"></span><br><span class="line">     <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onPostExecute</span><span class="params">(Long result)</span> </span>&#123;</span><br><span class="line">         showDialog(<span class="string">"Downloaded "</span> + result + <span class="string">" bytes"</span>);</span><br><span class="line">     &#125;</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure><p>DownloadFilesTask类模拟文件下载过程。传入的参数Params类型为URL(文件地址)，后台任务进程参数Progress类型为Integer(下载进度)，后台任务返回结果参数Result类型为Long(总文件大小)。</p><p>创建完成后，任务将非常简单地执行：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">new</span> DownloadFilesTask().execute(url1, url2, url3);</span><br></pre></td></tr></table></figure><h3 id="取消任务"><a href="#取消任务" class="headerlink" title="取消任务"></a>取消任务</h3><p>可以通过调用cancel（boolean）随时取消任务。 调用此方法将导致对isCancelled（）的后续调用返回true。 调用此方法后，在doInBackground（java.lang.Object []）返回之后，将调用onCancelled（java.lang.Object）而不是onPostExecute（java.lang.Object）。 为了确保尽快取消任务，如果可能的话（例如在循环内），应始终定期从doInBackground（java.lang.Object []）检查isCancelled（）的返回值。</p><h3 id="使用注意"><a href="#使用注意" class="headerlink" title="使用注意"></a>使用注意</h3><ol><li>AsyncTask类必须在主线程加载</li><li>AsyncTask对象必须在主线程创建</li><li>execute方法必须在主线程调用</li><li>不要在程序中直接调用AsyncTask提供的4个核心方法</li><li>一个AsyncTask对象只能执行一次，即只能调用一次execute</li></ol><h3 id="内存泄漏"><a href="#内存泄漏" class="headerlink" title="内存泄漏"></a>内存泄漏</h3><p>问题描述</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">This AsyncTask class should be static or leaks might occur (anonymous android.os.AsyncTask) less... (Ctrl+F1) </span><br><span class="line">A static field will leak contexts.  Non-static inner classes have an implicit reference to their outer class. If that outer class is for example a Fragment or Activity, then this reference means that the long-running handler/loader/task will hold a reference to the activity which prevents it from getting garbage collected.  Similarly, direct field references to activities and fragments from these longer running instances can cause leaks.  ViewModel classes should never point to Views or non-application Contexts</span><br></pre></td></tr></table></figure><p>解决方法 ： 静态内部类+弱引用</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">MyTask</span> <span class="keyword">extends</span> <span class="title">AsyncTask</span>&lt;<span class="title">Void</span>, <span class="title">Void</span>, <span class="title">String</span>&gt; </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">private</span> WeakReference&lt;MyActivity&gt; activityReference;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//只保留一个弱引用到Activity</span></span><br><span class="line">        MyTask(MyActivity context) &#123;</span><br><span class="line">            activityReference = <span class="keyword">new</span> WeakReference&lt;&gt;(context);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">protected</span> String <span class="title">doInBackground</span><span class="params">(Void... params)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="string">"task finished"</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onPostExecute</span><span class="params">(String result)</span> </span>&#123;</span><br><span class="line">            <span class="comment">//获取Activity的引用（如果仍存在）</span></span><br><span class="line">            MyActivity activity = activityReference.get();</span><br><span class="line">            <span class="keyword">if</span> (activity == <span class="keyword">null</span> || activity.isFinishing()) <span class="keyword">return</span>;</span><br><span class="line">            <span class="comment">// 验证Activity的UI</span></span><br><span class="line">            TextView textView = activity.findViewById(R.id.textview);</span><br><span class="line">            textView.setText(result);</span><br><span class="line">            <span class="comment">// 访问Activity成员变量</span></span><br><span class="line">            activity.mSomeMemberVariable = <span class="number">321</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h2 id="今生"><a href="#今生" class="headerlink" title="今生"></a>今生</h2><p><img alt="android_kotlin-1.jpg.png" data-src="/images/android_kotlin-1.jpg"></p><p>abstract class <del>AsyncTask</del> &lt; Params : Any!, Progress : Any!, Result : Any! &gt;</p><blockquote><p>这个类在API level R 被弃用<br>请使用标准的<strong>java.util.concurrent</strong>或<span class="exturl" data-url="aHR0cHM6Ly9kZXZlbG9wZXIuYW5kcm9pZC5nb29nbGUuY24vdG9waWMvbGlicmFyaWVzL2FyY2hpdGVjdHVyZS9jb3JvdXRpbmVz" title="https://developer.android.google.cn/topic/libraries/architecture/coroutines">Kotlin并发实用程序<i class="fa fa-external-link"></i></span>代替。</p></blockquote><h3 id="弃用原因"><a href="#弃用原因" class="headerlink" title="弃用原因"></a>弃用原因</h3><p><img alt="asynctask-r-aosp.png" data-src="/images/asynctask-r-aosp.png"></p><blockquote><p>AsyncTask旨在启用和轻松使用UI线程。但是，最常见的用例是集成到UI中，这会导致Context泄漏，丢失的回调或配置更改崩溃。它还在平台的不同版本上具有不一致的行为，吞噬的异常doInBackground，并且不能提供比<span class="exturl" data-url="aHR0cHM6Ly9kZXZlbG9wZXIuYW5kcm9pZC5nb29nbGUuY24vcmVmZXJlbmNlL2tvdGxpbi9qYXZhL3V0aWwvY29uY3VycmVudC9FeGVjdXRvci5odG1s" title="https://developer.android.google.cn/reference/kotlin/java/util/concurrent/Executor.html">Executor<i class="fa fa-external-link"></i></span>直接使用更多的实用程序。</p></blockquote><p>AsyncTask是为围绕<span class="exturl" data-url="aHR0cHM6Ly9kZXZlbG9wZXIuYW5kcm9pZC5nb29nbGUuY24vcmVmZXJlbmNlL2tvdGxpbi9qYXZhL2xhbmcvVGhyZWFkLmh0bWw=" title="https://developer.android.google.cn/reference/kotlin/java/lang/Thread.html">Thread<i class="fa fa-external-link"></i></span>和<span class="exturl" data-url="aHR0cHM6Ly9kZXZlbG9wZXIuYW5kcm9pZC5nb29nbGUuY24vcmVmZXJlbmNlL2tvdGxpbi9hbmRyb2lkL29zL0hhbmRsZXI=" title="https://developer.android.google.cn/reference/kotlin/android/os/Handler">Handler<i class="fa fa-external-link"></i></span>的帮助器类而被设计出来的，并且不构成通用的线程框架。理想情况下，应将AsyncTasks用于较短的操作（最多几秒钟）。如果需要使线程长时间运行，则强烈建议您使用<strong>java.util.concurrent</strong>包提供的各种API，例如 <span class="exturl" data-url="aHR0cHM6Ly9kZXZlbG9wZXIuYW5kcm9pZC5nb29nbGUuY24vcmVmZXJlbmNlL2tvdGxpbi9qYXZhL3V0aWwvY29uY3VycmVudC9FeGVjdXRvci5odG1s" title="https://developer.android.google.cn/reference/kotlin/java/util/concurrent/Executor.html">Executor<i class="fa fa-external-link"></i></span>，<span class="exturl" data-url="aHR0cHM6Ly9kZXZlbG9wZXIuYW5kcm9pZC5nb29nbGUuY24vcmVmZXJlbmNlL2tvdGxpbi9qYXZhL3V0aWwvY29uY3VycmVudC9UaHJlYWRQb29sRXhlY3V0b3IuaHRtbA==" title="https://developer.android.google.cn/reference/kotlin/java/util/concurrent/ThreadPoolExecutor.html">ThreadPoolExecutor<i class="fa fa-external-link"></i></span>和<span class="exturl" data-url="aHR0cHM6Ly9kZXZlbG9wZXIuYW5kcm9pZC5nb29nbGUuY24vcmVmZXJlbmNlL2tvdGxpbi9qYXZhL3V0aWwvY29uY3VycmVudC9GdXR1cmVUYXNrLmh0bWw=" title="https://developer.android.google.cn/reference/kotlin/java/util/concurrent/FutureTask.html">FutureTask<i class="fa fa-external-link"></i></span>。</p><h3 id="代替示例"><a href="#代替示例" class="headerlink" title="代替示例"></a>代替示例</h3><h4 id="Executor"><a href="#Executor" class="headerlink" title="Executor"></a>Executor</h4><figure class="highlight kt"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// ----------- 示例1 ----------------------</span></span><br><span class="line"><span class="comment">//定义</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">DirectExecutor</span> : <span class="type">Executor &#123;</span></span></span><br><span class="line">    <span class="keyword">override</span> <span class="function"><span class="keyword">fun</span> <span class="title">execute</span><span class="params">(runnable: <span class="type">Runnable</span>?)</span></span> &#123;</span><br><span class="line">        runnable?.run()</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//调用</span></span><br><span class="line"><span class="keyword">val</span> directExecutor = DirectExecutor()</span><br><span class="line">   directExecutor.execute &#123;</span><br><span class="line">            Log.d(TAG, <span class="string">"###### DirectExecutor execute ##### "</span>)</span><br><span class="line">            .........</span><br><span class="line">            .........</span><br><span class="line">&#125;</span><br><span class="line">   </span><br><span class="line"><span class="comment">//----------- 示例2 ----------------------</span></span><br><span class="line"><span class="comment">//定义</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ThreadPerTaskExecutor</span> : <span class="type">Executor &#123;</span></span></span><br><span class="line">    <span class="keyword">override</span> <span class="function"><span class="keyword">fun</span> <span class="title">execute</span><span class="params">(runnable: <span class="type">Runnable</span>?)</span></span> &#123;</span><br><span class="line">            Thread(runnable).start()</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//调用</span></span><br><span class="line"><span class="keyword">val</span> threadPerTaskExecutor = ThreadPerTaskExecutor()</span><br><span class="line">    threadPerTaskExecutor.execute &#123;</span><br><span class="line">        Log.d(TAG, <span class="string">"###### threadPerTaskExecutor execute #####"</span>)</span><br><span class="line">        .........</span><br><span class="line">        .........</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="ThreadPoolExecutor"><a href="#ThreadPoolExecutor" class="headerlink" title="ThreadPoolExecutor"></a>ThreadPoolExecutor</h4><figure class="highlight kt"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//核心线程池大小 --&gt; 即需要开启多少个线程</span></span><br><span class="line"><span class="keyword">val</span> coreThreadPoolSize = Runtime.getRuntime().availableProcessors() <span class="comment">//系统有多少可用就开多少</span></span><br><span class="line"><span class="comment">//最大线程池大小</span></span><br><span class="line"><span class="keyword">val</span> maximumPoolSize = <span class="number">15</span></span><br><span class="line"><span class="comment">//线程最大空闲时间</span></span><br><span class="line"><span class="comment">//线程池中超过corePoolSize数目的空闲线程最大存活时间；可以allowCoreThreadTimeOut(true)使得核心线程  有效时间</span></span><br><span class="line"><span class="keyword">val</span> keepAliveTime = <span class="number">120L</span></span><br><span class="line"><span class="comment">//keepAliveTime时间单位</span></span><br><span class="line"><span class="keyword">val</span> unit = TimeUnit.SECONDS</span><br><span class="line"><span class="comment">//定义阻塞式列队</span></span><br><span class="line"><span class="keyword">val</span> workQueue = ArrayBlockingQueue&lt;Runnable&gt;(<span class="number">10000</span>)</span><br><span class="line"><span class="keyword">val</span> executor = ThreadPoolExecutor(coreThreadPoolSize,</span><br><span class="line">               maximumPoolSize, keepAliveTime, unit, workQueue</span><br><span class="line">       )</span><br><span class="line"><span class="keyword">for</span> (i <span class="keyword">in</span> <span class="number">0</span>..<span class="number">100</span>) &#123;</span><br><span class="line">       executor.execute &#123;</span><br><span class="line">           Log.d(TAG, <span class="string">"线程池中线程数目："</span>+executor.poolSize +<span class="string">"，队列中等待执行的任务数目："</span>+</span><br><span class="line">                   executor.queue.size +<span class="string">"，已执行完成的任务数目："</span>+executor.completedTaskCount)</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br><span class="line">executor.shutdown()</span><br></pre></td></tr></table></figure><h4 id="FutureTask"><a href="#FutureTask" class="headerlink" title="FutureTask"></a>FutureTask</h4><figure class="highlight kt"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">val</span> service = Executors.newSingleThreadExecutor()</span><br><span class="line"><span class="keyword">val</span> futureTask = FutureTask(Callable &#123; ......... &#125;)</span><br><span class="line">service.execute(futureTask)</span><br><span class="line">Log.d(TAG, <span class="string">"###### futureTask execute #####  <span class="subst">$&#123;futureTask.get()&#125;</span>"</span>)</span><br></pre></td></tr></table></figure><h4 id="Kotlin并发-协程-实用程序"><a href="#Kotlin并发-协程-实用程序" class="headerlink" title="Kotlin并发(协程)实用程序"></a>Kotlin并发(协程)实用程序</h4><figure class="highlight kt"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//定义耗时操作的方法</span></span><br><span class="line"><span class="keyword">private</span> <span class="function"><span class="keyword">fun</span> <span class="title">spendLongTimeAction</span><span class="params">()</span></span> : String&#123;</span><br><span class="line">    <span class="comment">//模拟网络请求,耗时5s</span></span><br><span class="line">    Thread.sleep(<span class="number">5000</span>)</span><br><span class="line">    <span class="keyword">return</span> <span class="string">"This is a json data from web server"</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//调用</span></span><br><span class="line">GlobalScope.launch &#123;</span><br><span class="line">    <span class="comment">//使用给定的协程上下文调用指定的暂停块，暂停直到完成，然后返回结果。</span></span><br><span class="line">    withContext(Dispatchers.Main)&#123;</span><br><span class="line">        <span class="keyword">val</span> <span class="keyword">data</span> = spendLongTimeAction()</span><br><span class="line">        textView.text = <span class="keyword">data</span></span><br><span class="line">        Toast.makeText(<span class="keyword">this</span><span class="symbol">@MainActivity</span>,<span class="string">"数据请求成功"</span>,Toast.LENGTH_LONG).show()</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="相关文献"><a href="#相关文献" class="headerlink" title="相关文献"></a>相关文献</h2><ol><li><span class="exturl" data-url="aHR0cHM6Ly9kZXZlbG9wZXIuYW5kcm9pZC5nb29nbGUuY24vc2RrL2FwaV9kaWZmL3ItZHAxL2NoYW5nZXMvYW5kcm9pZC5vcy5Bc3luY1Rhc2sjYW5kcm9pZC5vcy5Bc3luY1Rhc2suY3Rvcl9jaGFuZ2VkKCk=" title="https://developer.android.google.cn/sdk/api_diff/r-dp1/changes/android.os.AsyncTask#android.os.AsyncTask.ctor_changed()">API Differences between 29 and rdp1<i class="fa fa-external-link"></i></span></li><li><span class="exturl" data-url="aHR0cHM6Ly93d3cudGVjaHlvdXJjaGFuY2UuY29tL2FzeW5jdGFzay1kZXByZWNhdGVkLw==" title="https://www.techyourchance.com/asynctask-deprecated/">AsyncTask is Deprecated, Now What?<i class="fa fa-external-link"></i></span></li><li><span class="exturl" data-url="aHR0cHM6Ly9oZWFydGJlYXQuZnJpdHouYWkvcmVwbGFjaW5nLWFzeW5jdGFzay1pbi1hbmRyb2lkLXdpdGgta290bGluLWNvcm91dGluZXMtdG8taGFuZGxlLWJhY2tncm91bmQtdGFza3MtOTMxMDhmOGYyZGI=" title="https://heartbeat.fritz.ai/replacing-asynctask-in-android-with-kotlin-coroutines-to-handle-background-tasks-93108f8f2db">Deprecating AsyncTask in Android with Kotlin Coroutines<i class="fa fa-external-link"></i></span></li><li><span class="exturl" data-url="aHR0cHM6Ly9tZWRpdW0uY29tL0BwcmF0aWsua3VtYWFyL2dvb2dsZS1kZXByZWNpYXRlZC1hc3luY3Rhc2stZnJvbS1hbmRyb2lkLTExLWExMzFiN2QwZThkMQ==" title="https://medium.com/@pratik.kumaar/google-depreciated-asynctask-from-android-11-a131b7d0e8d1">Google depreciated AsyncTask from Android 11<i class="fa fa-external-link"></i></span></li></ol><p>以上就是本文对AsyncTask的简单回顾总结</p><blockquote><p>本文发布于Android 11 / R DP 1 。如有不足，欢迎指正 </p></blockquote>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;在过去的十年中，&lt;a href=&quot;https://developer.android.google.cn/reference/kotlin/android/os/AsyncTask&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;AsyncTask&lt;/a&gt;一直是用于在Android中编写并发代码的最广泛使用的解决方案之一&lt;br&gt;但是，从 Android 11 (R) 开始，官方正式弃用, 也标志着&lt;strong&gt;AsyncTask&lt;/strong&gt; 的时代正式结束&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;本文我们一起来回顾它的前世今生&lt;/p&gt;
&lt;hr&gt;
    
    </summary>
    
      <category term="Android" scheme="https://shoewann0402.github.io/categories/Android/"/>
    
      <category term="Android R" scheme="https://shoewann0402.github.io/categories/Android/Android-R/"/>
    
    
      <category term="Android" scheme="https://shoewann0402.github.io/tags/Android/"/>
    
      <category term="Android R" scheme="https://shoewann0402.github.io/tags/Android-R/"/>
    
      <category term="AsycnTask" scheme="https://shoewann0402.github.io/tags/AsycnTask/"/>
    
  </entry>
  
  <entry>
    <title>Android Q 检查网络连通性</title>
    <link href="https://shoewann0402.github.io/2019/08/14/android-q-network-connectivity-check/"/>
    <id>https://shoewann0402.github.io/2019/08/14/android-q-network-connectivity-check/</id>
    <published>2019-08-13T17:58:20.000Z</published>
    <updated>2019-08-13T18:30:16.423Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>对Android Q 上检查网络连通性的相关记录</p></blockquote><hr><a id="more"></a><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>大多数情况下，我们从ConnectivityManager获取活动的网络信息，并检查该网络是否已经连接</p><p>像这样</p><figure class="highlight kt"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">isNetworkConnected</span><span class="params">(context: <span class="type">Context</span>?)</span></span>: <span class="built_in">Boolean</span> &#123;</span><br><span class="line">    <span class="keyword">val</span> mConnectivityManager = context?.getSystemService(Context.CONNECTIVITY_SERVICE) <span class="keyword">as</span> ConnectivityManager</span><br><span class="line">    <span class="keyword">val</span> mNetworkInfo = mConnectivityManager.activeNetworkInfo</span><br><span class="line">    <span class="keyword">return</span> mNetworkInfo!=<span class="literal">null</span> &amp;&amp; mNetworkInfo.isConnected</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>但是在Android Q (API 29) 上，从<strong>ConnectivityManager</strong>类里<span class="exturl" data-url="aHR0cHM6Ly9kZXZlbG9wZXIuYW5kcm9pZC5nb29nbGUuY24vcmVmZXJlbmNlL2FuZHJvaWQvbmV0L0Nvbm5lY3Rpdml0eU1hbmFnZXIuaHRtbCNnZXRBY3RpdmVOZXR3b3JrSW5mbygp" title="https://developer.android.google.cn/reference/android/net/ConnectivityManager.html#getActiveNetworkInfo()">废弃<i class="fa fa-external-link"></i></span>了<strong>activeNetworkInfo</strong>方法(Java对应<strong>getActiveNetworkInfo()</strong>方法)。</p><h2 id="Android-Q"><a href="#Android-Q" class="headerlink" title="Android Q"></a>Android Q</h2><p>查询相关文档，可以找到另一种方法</p><figure class="highlight kt"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">isNetworkConnectedWithQ</span><span class="params">(context: <span class="type">Context</span>?)</span></span>: <span class="built_in">Boolean</span> &#123;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">var</span> hasNetwork = <span class="literal">false</span></span><br><span class="line">            <span class="keyword">if</span> (context != <span class="literal">null</span>) &#123;</span><br><span class="line">                <span class="keyword">val</span> mConnectivityManager = context.getSystemService(Context.CONNECTIVITY_SERVICE) <span class="keyword">as</span> ConnectivityManager</span><br><span class="line">                <span class="keyword">val</span> networks = mConnectivityManager.allNetworks</span><br><span class="line">                <span class="keyword">if</span> (networks.isNotEmpty()) &#123;</span><br><span class="line">                    <span class="keyword">for</span> (network <span class="keyword">in</span> networks) &#123;</span><br><span class="line">                        <span class="keyword">val</span> nc = mConnectivityManager.getNetworkCapabilities(network)</span><br><span class="line">                        <span class="keyword">if</span> (nc!!.hasCapability(NetworkCapabilities.NET_CAPABILITY_INTERNET)) &#123;</span><br><span class="line">                            hasNetwork = <span class="literal">true</span></span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">return</span> hasNetwork </span><br><span class="line">        &#125;</span><br></pre></td></tr></table></figure><p>注意：以上代码中<strong>allNetworks</strong>、<strong>getNetworkCapabilities</strong>和<strong>hasCapability</strong>都是在API 21 (Lollipop)被添加的，也就是说最低版本需要21。对此，这里为了兼容到21版本以下，可以将两种方式合并到一个方法中，同时兼容。</p><h2 id="同时兼容"><a href="#同时兼容" class="headerlink" title="同时兼容"></a>同时兼容</h2><figure class="highlight kt"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">isNetworkConnected</span><span class="params">(context: <span class="type">Context</span>?)</span></span>: <span class="built_in">Boolean</span> &#123;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">val</span> mConnectivityManager = context?.getSystemService(Context.CONNECTIVITY_SERVICE) <span class="keyword">as</span> ConnectivityManager</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (Build.VERSION.SDK_INT&lt;Build.VERSION_CODES.Q)&#123;</span><br><span class="line">                <span class="keyword">val</span> mNetworkInfo = mConnectivityManager.activeNetworkInfo</span><br><span class="line">                <span class="keyword">return</span> mNetworkInfo!=<span class="literal">null</span> &amp;&amp; mNetworkInfo.isConnected</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">var</span> hasNetwork = <span class="literal">false</span></span><br><span class="line"></span><br><span class="line">            <span class="keyword">val</span> networks = mConnectivityManager.allNetworks</span><br><span class="line">            <span class="keyword">if</span> (networks.isNotEmpty()) &#123;</span><br><span class="line">                <span class="keyword">for</span> (network <span class="keyword">in</span> networks) &#123;</span><br><span class="line">                    <span class="keyword">val</span> nc = mConnectivityManager.getNetworkCapabilities(network)</span><br><span class="line">                    <span class="keyword">if</span> (nc!!.hasCapability(NetworkCapabilities.NET_CAPABILITY_INTERNET)) &#123;</span><br><span class="line">                        hasNetwork = <span class="literal">true</span></span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">return</span> hasNetwork</span><br><span class="line"></span><br><span class="line">        &#125;</span><br></pre></td></tr></table></figure><p>最后，不要忘记在清单文件添加网络权限</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">uses-permission</span> <span class="attr">android:name</span>=<span class="string">"android.permission.ACCESS_NETWORK_STATE"</span>/&gt;</span></span><br></pre></td></tr></table></figure><blockquote><p>以上就是针对Android Q上网络检查方式的一个简单的记录，如有不足，欢迎指正</p></blockquote>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;对Android Q 上检查网络连通性的相关记录&lt;/p&gt;
&lt;/blockquote&gt;
&lt;hr&gt;
    
    </summary>
    
      <category term="Android" scheme="https://shoewann0402.github.io/categories/Android/"/>
    
      <category term="Android Q" scheme="https://shoewann0402.github.io/categories/Android/Android-Q/"/>
    
    
      <category term="Android" scheme="https://shoewann0402.github.io/tags/Android/"/>
    
      <category term="Android Q" scheme="https://shoewann0402.github.io/tags/Android-Q/"/>
    
      <category term="NetWork" scheme="https://shoewann0402.github.io/tags/NetWork/"/>
    
      <category term="ConnectivityManager" scheme="https://shoewann0402.github.io/tags/ConnectivityManager/"/>
    
  </entry>
  
  <entry>
    <title>Android Q Beta 6 存储示例</title>
    <link href="https://shoewann0402.github.io/2019/08/13/android-q-beta6-storage-sample-record/"/>
    <id>https://shoewann0402.github.io/2019/08/13/android-q-beta6-storage-sample-record/</id>
    <published>2019-08-12T16:08:11.000Z</published>
    <updated>2019-08-12T18:14:40.951Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>对 Android Q Beta 6 版本上的存储示例，进行一次测试分析并记录</p></blockquote><hr><a id="more"></a><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>官方给出: Android Q 会继续使用 READ_EXTERNAL_STORAGE 和 WRITE_EXTERNAL_STORAGE 权限，这些权限与面向用户的存储运行时权限相对应。不过，默认情况下，以 Android Q 为目标平台的应用（以及选择接受这些变更的应用）在访问外部存储设备中的文件时会进入过滤视图。此类应用只能查看特定于应用的目录和特定类型的媒体，因此应用无需请求任何其他用户权限。</p><h1 id="环境"><a href="#环境" class="headerlink" title="环境"></a>环境</h1><blockquote><p><strong>编译环境</strong>：Ubuntu 19.04 、Android Studio 3.4.2、compileSdkVersion 29、buildToolsVersion “29.0.1”、 targetSdkVersion 29<br><strong>运行环境</strong>：Pixel 2 、Android Version 10 (QPP6.190730.005) 、API 29</p></blockquote><h1 id="过程"><a href="#过程" class="headerlink" title="过程"></a>过程</h1><h2 id="效果"><a href="#效果" class="headerlink" title="效果"></a>效果</h2><p>界面上有两个按钮，一个写入内容到文件存储，一个是从存储读取文件内容</p><h2 id="测试分类"><a href="#测试分类" class="headerlink" title="测试分类"></a>测试分类</h2><h3 id="类别-1-传统目录方式"><a href="#类别-1-传统目录方式" class="headerlink" title="类别 1 传统目录方式"></a>类别 1 传统目录方式</h3><figure class="highlight kt"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">  * 写文件的方法</span></span><br><span class="line"><span class="comment">  */</span></span><br><span class="line"> <span class="keyword">private</span> <span class="function"><span class="keyword">fun</span> <span class="title">writeMethod</span><span class="params">()</span></span> &#123;</span><br><span class="line"></span><br><span class="line">     <span class="keyword">val</span> file = File(Environment.getExternalStorageDirectory(), <span class="string">"测试Android Q文件.txt"</span>)</span><br><span class="line">     Log.d(tag, <span class="string">"file.exists():<span class="subst">$&#123;file.exists()&#125;</span> ， file.getAbsolutePath(): <span class="subst">$&#123;file.absolutePath&#125;</span>"</span>)</span><br><span class="line">     <span class="keyword">if</span> (file.exists()) &#123;</span><br><span class="line">         file.delete()</span><br><span class="line">         <span class="keyword">val</span> flag  = file.createNewFile()</span><br><span class="line">         Log.d(tag, <span class="string">"SD卡目录下创建文件是否成功？:<span class="variable">$flag</span>"</span>)</span><br><span class="line">     &#125;</span><br><span class="line">     <span class="keyword">val</span> fw = FileWriter(file)</span><br><span class="line">     fw.write(<span class="string">"我是测试Android Q文件写入的内容"</span>);</span><br><span class="line">     fw.close()</span><br><span class="line">     Toast.makeText(<span class="keyword">this</span><span class="symbol">@StorageActivity</span>, <span class="string">"SD卡写入内容完成..."</span>, Toast.LENGTH_LONG).show()</span><br><span class="line">     Log.d(tag, <span class="string">"SD卡写入内容完成..."</span>)</span><br><span class="line"> &#125;</span><br><span class="line"></span><br><span class="line"> <span class="comment">/**</span></span><br><span class="line"><span class="comment">  * 读文件的方法</span></span><br><span class="line"><span class="comment">  */</span></span><br><span class="line"> <span class="keyword">private</span> <span class="function"><span class="keyword">fun</span> <span class="title">readMethod</span><span class="params">()</span></span> &#123;</span><br><span class="line">     <span class="keyword">val</span> fr = FileReader(Environment.getExternalStorageDirectory().path+<span class="string">"/测试Android Q文件.txt"</span>)</span><br><span class="line">     <span class="keyword">val</span> r = BufferedReader(fr)</span><br><span class="line">     <span class="keyword">val</span> result = r.readLine()</span><br><span class="line">     Log.d(tag, <span class="string">"SD卡文件里面的内容:<span class="variable">$result</span>"</span>)</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure><h4 id="不加读写权限"><a href="#不加读写权限" class="headerlink" title="不加读写权限"></a>不加读写权限</h4><p>清单文件不添加如下权限，也没有动态请求代码</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">uses-permission</span> <span class="attr">android:name</span>=<span class="string">"android.permission.WRITE_EXTERNAL_STORAGE"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">uses-permission</span> <span class="attr">android:name</span>=<span class="string">"android.permission.READ_EXTERNAL_STORAGE"</span>/&gt;</span></span><br></pre></td></tr></table></figure><p>失败，程序异常</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line">2019-08-13 00:42:47.945 9976-9976/com.xw.androidqtest D/StorageActivity: file.exists():false ， file.getAbsolutePath(): /storage/emulated/0/测试Android Q文件.txt</span><br><span class="line">2019-08-13 00:42:47.947 9976-9976/com.xw.androidqtest D/AndroidRuntime: Shutting down VM</span><br><span class="line">2019-08-13 00:42:47.951 9976-9976/com.xw.androidqtest E/AndroidRuntime: FATAL EXCEPTION: main</span><br><span class="line">    Process: com.xw.androidqtest, PID: 9976</span><br><span class="line">    java.lang.RuntimeException: java.lang.reflect.InvocationTargetException</span><br><span class="line">        at com.android.internal.os.RuntimeInit$MethodAndArgsCaller.run(RuntimeInit.java:502)</span><br><span class="line">        at com.android.internal.os.ZygoteInit.main(ZygoteInit.java:930)</span><br><span class="line">     Caused by: java.lang.reflect.InvocationTargetException</span><br><span class="line">        at java.lang.reflect.Method.invoke(Native Method)</span><br><span class="line">        at com.android.internal.os.RuntimeInit$MethodAndArgsCaller.run(RuntimeInit.java:492)</span><br><span class="line">        at com.android.internal.os.ZygoteInit.main(ZygoteInit.java:930) </span><br><span class="line">     Caused by: java.io.FileNotFoundException: /storage/emulated/0/测试Android Q文件.txt: open failed: EACCES (Permission denied)</span><br><span class="line">        at libcore.io.IoBridge.open(IoBridge.java:496)</span><br><span class="line">        at java.io.FileOutputStream.&lt;init&gt;(FileOutputStream.java:235)</span><br><span class="line">        at java.io.FileOutputStream.&lt;init&gt;(FileOutputStream.java:186)</span><br><span class="line">        at java.io.FileWriter.&lt;init&gt;(FileWriter.java:90)</span><br><span class="line">        at com.xw.androidqtest.StorageActivity.writeMethod(StorageActivity.kt:79)</span><br><span class="line">        at com.xw.androidqtest.StorageActivity.access$writeMethod(StorageActivity.kt:21)</span><br><span class="line">        at com.xw.androidqtest.StorageActivity$onCreate$1.onClick(StorageActivity.kt:31)</span><br><span class="line">        at android.view.View.performClick(View.java:7140)</span><br><span class="line">        at android.view.View.performClickInternal(View.java:7117)</span><br><span class="line">        at android.view.View.access$3500(View.java:801)</span><br><span class="line">        at android.view.View$PerformClick.run(View.java:27351)</span><br><span class="line">        at android.os.Handler.handleCallback(Handler.java:883)</span><br><span class="line">        at android.os.Handler.dispatchMessage(Handler.java:100)</span><br><span class="line">        at android.os.Looper.loop(Looper.java:214)</span><br><span class="line">        at android.app.ActivityThread.main(ActivityThread.java:7356)</span><br><span class="line">        at java.lang.reflect.Method.invoke(Native Method) </span><br><span class="line">        at com.android.internal.os.RuntimeInit$MethodAndArgsCaller.run(RuntimeInit.java:492) </span><br><span class="line">        at com.android.internal.os.ZygoteInit.main(ZygoteInit.java:930) </span><br><span class="line">     Caused by: android.system.ErrnoException: open failed: EACCES (Permission denied)</span><br><span class="line">        at libcore.io.Linux.open(Native Method)</span><br><span class="line">        at libcore.io.ForwardingOs.open(ForwardingOs.java:167)</span><br><span class="line">        at libcore.io.BlockGuardOs.open(BlockGuardOs.java:252)</span><br><span class="line">        at libcore.io.ForwardingOs.open(ForwardingOs.java:167)</span><br><span class="line">        at android.app.ActivityThread$AndroidOs.open(ActivityThread.java:7255)</span><br><span class="line">        at libcore.io.IoBridge.open(IoBridge.java:482)</span><br><span class="line">        at java.io.FileOutputStream.&lt;init&gt;(FileOutputStream.java:235) </span><br><span class="line">        at java.io.FileOutputStream.&lt;init&gt;(FileOutputStream.java:186) </span><br><span class="line">        at java.io.FileWriter.&lt;init&gt;(FileWriter.java:90) </span><br><span class="line">        at com.xw.androidqtest.StorageActivity.writeMethod(StorageActivity.kt:79) </span><br><span class="line">        at com.xw.androidqtest.StorageActivity.access$writeMethod(StorageActivity.kt:21) </span><br><span class="line">        at com.xw.androidqtest.StorageActivity$onCreate$1.onClick(StorageActivity.kt:31) </span><br><span class="line">        at android.view.View.performClick(View.java:7140) </span><br><span class="line">        at android.view.View.performClickInternal(View.java:7117) </span><br><span class="line">        at android.view.View.access$3500(View.java:801) </span><br><span class="line">        at android.view.View$PerformClick.run(View.java:27351) </span><br><span class="line">        at android.os.Handler.handleCallback(Handler.java:883) </span><br><span class="line">        at android.os.Handler.dispatchMessage(Handler.java:100) </span><br><span class="line">        at android.os.Looper.loop(Looper.java:214) </span><br><span class="line">        at android.app.ActivityThread.main(ActivityThread.java:7356) </span><br><span class="line">        at java.lang.reflect.Method.invoke(Native Method) </span><br><span class="line">        at com.android.internal.os.RuntimeInit$MethodAndArgsCaller.run(RuntimeInit.java:492) </span><br><span class="line">        at com.android.internal.os.ZygoteInit.main(ZygoteInit.java:930)</span><br></pre></td></tr></table></figure><h4 id="加读写权限但不动态请求"><a href="#加读写权限但不动态请求" class="headerlink" title="加读写权限但不动态请求"></a>加读写权限但不动态请求</h4><p>清单文件添加如下权限，但不动态请求</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">uses-permission</span> <span class="attr">android:name</span>=<span class="string">"android.permission.WRITE_EXTERNAL_STORAGE"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">uses-permission</span> <span class="attr">android:name</span>=<span class="string">"android.permission.READ_EXTERNAL_STORAGE"</span>/&gt;</span></span><br></pre></td></tr></table></figure><p>失败，程序异常</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><span class="line">2019-08-13 00:47:52.759 11693-11693/com.xw.androidqtest D/StorageActivity: file.exists():false ， file.getAbsolutePath(): /storage/emulated/0/测试Android Q文件.txt</span><br><span class="line">2019-08-13 00:47:52.761 11693-11693/com.xw.androidqtest D/AndroidRuntime: Shutting down VM</span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line">    --------- beginning of crash</span><br><span class="line">2019-08-13 00:47:52.766 11693-11693/com.xw.androidqtest E/AndroidRuntime: FATAL EXCEPTION: main</span><br><span class="line">    Process: com.xw.androidqtest, PID: 11693</span><br><span class="line">    java.lang.RuntimeException: java.lang.reflect.InvocationTargetException</span><br><span class="line">        at com.android.internal.os.RuntimeInit$MethodAndArgsCaller.run(RuntimeInit.java:502)</span><br><span class="line">        at com.android.internal.os.ZygoteInit.main(ZygoteInit.java:930)</span><br><span class="line">     Caused by: java.lang.reflect.InvocationTargetException</span><br><span class="line">        at java.lang.reflect.Method.invoke(Native Method)</span><br><span class="line">        at com.android.internal.os.RuntimeInit$MethodAndArgsCaller.run(RuntimeInit.java:492)</span><br><span class="line">        at com.android.internal.os.ZygoteInit.main(ZygoteInit.java:930) </span><br><span class="line">     Caused by: java.io.FileNotFoundException: /storage/emulated/0/测试Android Q文件.txt: open failed: EACCES (Permission denied)</span><br><span class="line">        at libcore.io.IoBridge.open(IoBridge.java:496)</span><br><span class="line">        at java.io.FileOutputStream.&lt;init&gt;(FileOutputStream.java:235)</span><br><span class="line">        at java.io.FileOutputStream.&lt;init&gt;(FileOutputStream.java:186)</span><br><span class="line">        at java.io.FileWriter.&lt;init&gt;(FileWriter.java:90)</span><br><span class="line">        at com.xw.androidqtest.StorageActivity.writeMethod(StorageActivity.kt:79)</span><br><span class="line">        at com.xw.androidqtest.StorageActivity.access$writeMethod(StorageActivity.kt:21)</span><br><span class="line">        at com.xw.androidqtest.StorageActivity$onCreate$1.onClick(StorageActivity.kt:31)</span><br><span class="line">        at android.view.View.performClick(View.java:7140)</span><br><span class="line">        at android.view.View.performClickInternal(View.java:7117)</span><br><span class="line">        at android.view.View.access$3500(View.java:801)</span><br><span class="line">        at android.view.View$PerformClick.run(View.java:27351)</span><br><span class="line">        at android.os.Handler.handleCallback(Handler.java:883)</span><br><span class="line">        at android.os.Handler.dispatchMessage(Handler.java:100)</span><br><span class="line">        at android.os.Looper.loop(Looper.java:214)</span><br><span class="line">        at android.app.ActivityThread.main(ActivityThread.java:7356)</span><br><span class="line">        at java.lang.reflect.Method.invoke(Native Method) </span><br><span class="line">        at com.android.internal.os.RuntimeInit$MethodAndArgsCaller.run(RuntimeInit.java:492) </span><br><span class="line">        at com.android.internal.os.ZygoteInit.main(ZygoteInit.java:930) </span><br><span class="line">     Caused by: android.system.ErrnoException: open failed: EACCES (Permission denied)</span><br><span class="line">        at libcore.io.Linux.open(Native Method)</span><br><span class="line">        at libcore.io.ForwardingOs.open(ForwardingOs.java:167)</span><br><span class="line">        at libcore.io.BlockGuardOs.open(BlockGuardOs.java:252)</span><br><span class="line">        at libcore.io.ForwardingOs.open(ForwardingOs.java:167)</span><br><span class="line">        at android.app.ActivityThread$AndroidOs.open(ActivityThread.java:7255)</span><br><span class="line">        at libcore.io.IoBridge.open(IoBridge.java:482)</span><br><span class="line">        at java.io.FileOutputStream.&lt;init&gt;(FileOutputStream.java:235) </span><br><span class="line">        at java.io.FileOutputStream.&lt;init&gt;(FileOutputStream.java:186) </span><br><span class="line">        at java.io.FileWriter.&lt;init&gt;(FileWriter.java:90) </span><br><span class="line">        at com.xw.androidqtest.StorageActivity.writeMethod(StorageActivity.kt:79) </span><br><span class="line">        at com.xw.androidqtest.StorageActivity.access$writeMethod(StorageActivity.kt:21) </span><br><span class="line">        at com.xw.androidqtest.StorageActivity$onCreate$1.onClick(StorageActivity.kt:31) </span><br><span class="line">        at android.view.View.performClick(View.java:7140) </span><br><span class="line">        at android.view.View.performClickInternal(View.java:7117) </span><br><span class="line">        at android.view.View.access$3500(View.java:801) </span><br><span class="line">        at android.view.View$PerformClick.run(View.java:27351) </span><br><span class="line">        at android.os.Handler.handleCallback(Handler.java:883) </span><br><span class="line">        at android.os.Handler.dispatchMessage(Handler.java:100) </span><br><span class="line">        at android.os.Looper.loop(Looper.java:214) </span><br><span class="line">        at android.app.ActivityThread.main(ActivityThread.java:7356) </span><br><span class="line">        at java.lang.reflect.Method.invoke(Native Method) </span><br><span class="line">        at com.android.internal.os.RuntimeInit$MethodAndArgsCaller.run(RuntimeInit.java:492) </span><br><span class="line">        at com.android.internal.os.ZygoteInit.main(ZygoteInit.java:930)</span><br></pre></td></tr></table></figure><h4 id="加读写权限但并动态请求"><a href="#加读写权限但并动态请求" class="headerlink" title="加读写权限但并动态请求"></a>加读写权限但并动态请求</h4><p>清单文件添加如下权限，并动态请求</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">uses-permission</span> <span class="attr">android:name</span>=<span class="string">"android.permission.WRITE_EXTERNAL_STORAGE"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">uses-permission</span> <span class="attr">android:name</span>=<span class="string">"android.permission.READ_EXTERNAL_STORAGE"</span>/&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight kt"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">private</span> <span class="function"><span class="keyword">fun</span> <span class="title">initPermission</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (Build.VERSION.SDK_INT &gt;= Build.VERSION_CODES.M) &#123;</span><br><span class="line">            <span class="keyword">if</span> (ContextCompat.checkSelfPermission(<span class="keyword">this</span>, Manifest.permission.WRITE_EXTERNAL_STORAGE) != PackageManager.PERMISSION_GRANTED) &#123;</span><br><span class="line">                <span class="comment">// 检查权限状态</span></span><br><span class="line">                <span class="keyword">if</span> (ActivityCompat.shouldShowRequestPermissionRationale(<span class="keyword">this</span>, Manifest.permission.WRITE_EXTERNAL_STORAGE)) &#123;</span><br><span class="line">                    <span class="comment">//  用户彻底拒绝授予权限</span></span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    <span class="comment">//  用户未彻底拒绝授予权限</span></span><br><span class="line">                    ActivityCompat.requestPermissions(<span class="keyword">this</span>, arrayOf(Manifest.permission.WRITE_EXTERNAL_STORAGE), <span class="number">1</span>)</span><br><span class="line"></span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">override</span> <span class="function"><span class="keyword">fun</span> <span class="title">onRequestPermissionsResult</span><span class="params">(requestCode: <span class="type">Int</span>, permissions: <span class="type">Array</span>&lt;<span class="type">String</span>&gt;, grantResults: <span class="type">IntArray</span>)</span></span> &#123;</span><br><span class="line">        <span class="keyword">super</span>.onRequestPermissionsResult(requestCode, permissions, grantResults)</span><br><span class="line">        <span class="keyword">if</span> (requestCode == <span class="number">1</span>) &#123;</span><br><span class="line">            <span class="keyword">for</span> (i <span class="keyword">in</span> permissions.indices) &#123;</span><br><span class="line">                <span class="keyword">if</span> (grantResults[i] == PERMISSION_GRANTED) &#123;</span><br><span class="line">                    <span class="comment">// 申请成功</span></span><br><span class="line">                    Log.d(tag,<span class="string">"申请成功"</span>)</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    <span class="comment">// 申请失败</span></span><br><span class="line">                    Log.d(tag,<span class="string">"申请失败"</span>)</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>失败，程序异常</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><span class="line">2019-08-13 00:53:45.690 13471-13471/com.xw.androidqtest D/StorageActivity: file.exists():false ， file.getAbsolutePath(): /storage/emulated/0/测试Android Q文件.txt</span><br><span class="line">2019-08-13 00:53:45.692 13471-13471/com.xw.androidqtest D/AndroidRuntime: Shutting down VM</span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line">    --------- beginning of crash</span><br><span class="line">2019-08-13 00:53:45.698 13471-13471/com.xw.androidqtest E/AndroidRuntime: FATAL EXCEPTION: main</span><br><span class="line">    Process: com.xw.androidqtest, PID: 13471</span><br><span class="line">    java.lang.RuntimeException: java.lang.reflect.InvocationTargetException</span><br><span class="line">        at com.android.internal.os.RuntimeInit$MethodAndArgsCaller.run(RuntimeInit.java:502)</span><br><span class="line">        at com.android.internal.os.ZygoteInit.main(ZygoteInit.java:930)</span><br><span class="line">     Caused by: java.lang.reflect.InvocationTargetException</span><br><span class="line">        at java.lang.reflect.Method.invoke(Native Method)</span><br><span class="line">        at com.android.internal.os.RuntimeInit$MethodAndArgsCaller.run(RuntimeInit.java:492)</span><br><span class="line">        at com.android.internal.os.ZygoteInit.main(ZygoteInit.java:930) </span><br><span class="line">     Caused by: java.io.FileNotFoundException: /storage/emulated/0/测试Android Q文件.txt: open failed: EACCES (Permission denied)</span><br><span class="line">        at libcore.io.IoBridge.open(IoBridge.java:496)</span><br><span class="line">        at java.io.FileOutputStream.&lt;init&gt;(FileOutputStream.java:235)</span><br><span class="line">        at java.io.FileOutputStream.&lt;init&gt;(FileOutputStream.java:186)</span><br><span class="line">        at java.io.FileWriter.&lt;init&gt;(FileWriter.java:90)</span><br><span class="line">        at com.xw.androidqtest.StorageActivity.writeMethod(StorageActivity.kt:79)</span><br><span class="line">        at com.xw.androidqtest.StorageActivity.access$writeMethod(StorageActivity.kt:21)</span><br><span class="line">        at com.xw.androidqtest.StorageActivity$onCreate$1.onClick(StorageActivity.kt:31)</span><br><span class="line">        at android.view.View.performClick(View.java:7140)</span><br><span class="line">        at android.view.View.performClickInternal(View.java:7117)</span><br><span class="line">        at android.view.View.access$3500(View.java:801)</span><br><span class="line">        at android.view.View$PerformClick.run(View.java:27351)</span><br><span class="line">        at android.os.Handler.handleCallback(Handler.java:883)</span><br><span class="line">        at android.os.Handler.dispatchMessage(Handler.java:100)</span><br><span class="line">        at android.os.Looper.loop(Looper.java:214)</span><br><span class="line">        at android.app.ActivityThread.main(ActivityThread.java:7356)</span><br><span class="line">        at java.lang.reflect.Method.invoke(Native Method) </span><br><span class="line">        at com.android.internal.os.RuntimeInit$MethodAndArgsCaller.run(RuntimeInit.java:492) </span><br><span class="line">        at com.android.internal.os.ZygoteInit.main(ZygoteInit.java:930) </span><br><span class="line">     Caused by: android.system.ErrnoException: open failed: EACCES (Permission denied)</span><br><span class="line">        at libcore.io.Linux.open(Native Method)</span><br><span class="line">        at libcore.io.ForwardingOs.open(ForwardingOs.java:167)</span><br><span class="line">        at libcore.io.BlockGuardOs.open(BlockGuardOs.java:252)</span><br><span class="line">        at libcore.io.ForwardingOs.open(ForwardingOs.java:167)</span><br><span class="line">        at android.app.ActivityThread$AndroidOs.open(ActivityThread.java:7255)</span><br><span class="line">        at libcore.io.IoBridge.open(IoBridge.java:482)</span><br><span class="line">        at java.io.FileOutputStream.&lt;init&gt;(FileOutputStream.java:235) </span><br><span class="line">        at java.io.FileOutputStream.&lt;init&gt;(FileOutputStream.java:186) </span><br><span class="line">        at java.io.FileWriter.&lt;init&gt;(FileWriter.java:90) </span><br><span class="line">        at com.xw.androidqtest.StorageActivity.writeMethod(StorageActivity.kt:79) </span><br><span class="line">        at com.xw.androidqtest.StorageActivity.access$writeMethod(StorageActivity.kt:21) </span><br><span class="line">        at com.xw.androidqtest.StorageActivity$onCreate$1.onClick(StorageActivity.kt:31) </span><br><span class="line">        at android.view.View.performClick(View.java:7140) </span><br><span class="line">        at android.view.View.performClickInternal(View.java:7117) </span><br><span class="line">        at android.view.View.access$3500(View.java:801) </span><br><span class="line">        at android.view.View$PerformClick.run(View.java:27351) </span><br><span class="line">        at android.os.Handler.handleCallback(Handler.java:883) </span><br><span class="line">        at android.os.Handler.dispatchMessage(Handler.java:100) </span><br><span class="line">        at android.os.Looper.loop(Looper.java:214) </span><br><span class="line">        at android.app.ActivityThread.main(ActivityThread.java:7356) </span><br><span class="line">        at java.lang.reflect.Method.invoke(Native Method) </span><br><span class="line">        at com.android.internal.os.RuntimeInit$MethodAndArgsCaller.run(RuntimeInit.java:492) </span><br><span class="line">        at com.android.internal.os.ZygoteInit.main(ZygoteInit.java:930)</span><br></pre></td></tr></table></figure><h3 id="类别-2-特定目录方式"><a href="#类别-2-特定目录方式" class="headerlink" title="类别 2 特定目录方式"></a>类别 2 特定目录方式</h3><figure class="highlight kt"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">   <span class="comment">/**</span></span><br><span class="line"><span class="comment">    * 写文件的方法</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">   <span class="keyword">private</span> <span class="function"><span class="keyword">fun</span> <span class="title">writeMethod</span><span class="params">()</span></span> &#123;</span><br><span class="line"><span class="comment">//这里我们创建的是一个文本txt,getExternalFilesDir使用Environment.DIRECTORY_DOCUMENTS类型</span></span><br><span class="line">       <span class="keyword">val</span> file = File(<span class="keyword">this</span><span class="symbol">@StorageActivity</span>.getExternalFilesDir(Environment.DIRECTORY_DOCUMENTS), <span class="string">"测试Android Q文件.txt"</span>)</span><br><span class="line">       Log.d(tag, <span class="string">"file.exists():<span class="subst">$&#123;file.exists()&#125;</span> ， file.getAbsolutePath(): <span class="subst">$&#123;file.absolutePath&#125;</span>"</span>)</span><br><span class="line">       <span class="keyword">if</span> (file.exists()) &#123;</span><br><span class="line">           file.delete()</span><br><span class="line">           <span class="keyword">val</span> flag  = file.createNewFile()</span><br><span class="line">           Log.d(tag, <span class="string">"SD卡目录下创建文件是否成功？:<span class="variable">$flag</span>"</span>)</span><br><span class="line">       &#125;</span><br><span class="line">       <span class="keyword">val</span> fw = FileWriter(file)</span><br><span class="line">       fw.write(<span class="string">"我是测试Android Q文件写入的内容"</span>);</span><br><span class="line">       fw.close()</span><br><span class="line">       Toast.makeText(<span class="keyword">this</span><span class="symbol">@StorageActivity</span>, <span class="string">"SD卡写入内容完成..."</span>, Toast.LENGTH_LONG).show()</span><br><span class="line">       Log.d(tag, <span class="string">"SD卡写入内容完成..."</span>)</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="comment">/**</span></span><br><span class="line"><span class="comment">    * 读文件的方法</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">   <span class="keyword">private</span> <span class="function"><span class="keyword">fun</span> <span class="title">readMethod</span><span class="params">()</span></span> &#123;</span><br><span class="line"><span class="comment">//这里我们创建的是一个文本txt,getExternalFilesDir使用Environment.DIRECTORY_DOCUMENTS类型</span></span><br><span class="line">       <span class="keyword">val</span> fr = FileReader(<span class="keyword">this</span><span class="symbol">@StorageActivity</span>.getExternalFilesDir(Environment.DIRECTORY_DOCUMENTS)!!.path+<span class="string">"/测试Android Q文件.txt"</span>)</span><br><span class="line">       <span class="keyword">val</span> r = BufferedReader(fr)</span><br><span class="line">       <span class="keyword">val</span> result = r.readLine()</span><br><span class="line">       Log.d(tag, <span class="string">"SD卡文件里面的内容:<span class="variable">$result</span>"</span>)</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><h4 id="不加读写权限-1"><a href="#不加读写权限-1" class="headerlink" title="不加读写权限"></a>不加读写权限</h4><p>清单文件不添加如下权限，也没有动态请求代码</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">uses-permission</span> <span class="attr">android:name</span>=<span class="string">"android.permission.WRITE_EXTERNAL_STORAGE"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">uses-permission</span> <span class="attr">android:name</span>=<span class="string">"android.permission.READ_EXTERNAL_STORAGE"</span>/&gt;</span></span><br></pre></td></tr></table></figure><p>成功，程序正常运行</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">2019-08-13 01:01:40.653 14721-14721/com.xw.androidqtest D/StorageActivity: file.exists():false ， file.getAbsolutePath(): /storage/emulated/0/Android/data/com.xw.androidqtest/files/Documents/测试Android Q文件.txt</span><br><span class="line">2019-08-13 01:01:40.671 14721-14721/com.xw.androidqtest D/StorageActivity: SD卡写入内容完成...</span><br><span class="line">2019-08-13 01:01:54.410 14721-14721/com.xw.androidqtest D/StorageActivity: SD卡文件里面的内容:我是测试Android Q文件写入的内容</span><br></pre></td></tr></table></figure><p>查看设备上应用详情的相关权限模块，并没有相应的权限请求</p><h4 id="加读写权限但不动态请求-1"><a href="#加读写权限但不动态请求-1" class="headerlink" title="加读写权限但不动态请求"></a>加读写权限但不动态请求</h4><p>清单文件添加如下权限，但不动态请求</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">uses-permission</span> <span class="attr">android:name</span>=<span class="string">"android.permission.WRITE_EXTERNAL_STORAGE"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">uses-permission</span> <span class="attr">android:name</span>=<span class="string">"android.permission.READ_EXTERNAL_STORAGE"</span>/&gt;</span></span><br></pre></td></tr></table></figure><p>成功，程序正常运行</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">2019-08-13 01:12:22.104 18040-18040/com.xw.androidqtest D/StorageActivity: file.exists():true ， file.getAbsolutePath(): /storage/emulated/0/Android/data/com.xw.androidqtest/files/Documents/测试Android Q文件.txt</span><br><span class="line">2019-08-13 01:12:22.105 18040-18040/com.xw.androidqtest D/StorageActivity: SD卡目录下创建文件是否成功？:true</span><br><span class="line">2019-08-13 01:12:22.116 18040-18040/com.xw.androidqtest D/StorageActivity: SD卡写入内容完成...</span><br><span class="line">2019-08-13 01:12:26.276 18040-18040/com.xw.androidqtest D/StorageActivity: SD卡文件里面的内容:我是测试Android Q文件写入的内容</span><br></pre></td></tr></table></figure><p>查看设备上应用详情的相关权限模块，有相应的存储权限请求，为拒绝状态</p><h4 id="加读写权限但并动态请求-1"><a href="#加读写权限但并动态请求-1" class="headerlink" title="加读写权限但并动态请求"></a>加读写权限但并动态请求</h4><p>清单文件添加如下权限，并动态请求</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">uses-permission</span> <span class="attr">android:name</span>=<span class="string">"android.permission.WRITE_EXTERNAL_STORAGE"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">uses-permission</span> <span class="attr">android:name</span>=<span class="string">"android.permission.READ_EXTERNAL_STORAGE"</span>/&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight kt"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">private</span> <span class="function"><span class="keyword">fun</span> <span class="title">initPermission</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (Build.VERSION.SDK_INT &gt;= Build.VERSION_CODES.M) &#123;</span><br><span class="line">            <span class="keyword">if</span> (ContextCompat.checkSelfPermission(<span class="keyword">this</span>, Manifest.permission.WRITE_EXTERNAL_STORAGE) != PackageManager.PERMISSION_GRANTED) &#123;</span><br><span class="line">                <span class="comment">// 检查权限状态</span></span><br><span class="line">                <span class="keyword">if</span> (ActivityCompat.shouldShowRequestPermissionRationale(<span class="keyword">this</span>, Manifest.permission.WRITE_EXTERNAL_STORAGE)) &#123;</span><br><span class="line">                    <span class="comment">//  用户彻底拒绝授予权限</span></span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    <span class="comment">//  用户未彻底拒绝授予权限</span></span><br><span class="line">                    ActivityCompat.requestPermissions(<span class="keyword">this</span>, arrayOf(Manifest.permission.WRITE_EXTERNAL_STORAGE), <span class="number">1</span>)</span><br><span class="line"></span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">override</span> <span class="function"><span class="keyword">fun</span> <span class="title">onRequestPermissionsResult</span><span class="params">(requestCode: <span class="type">Int</span>, permissions: <span class="type">Array</span>&lt;<span class="type">String</span>&gt;, grantResults: <span class="type">IntArray</span>)</span></span> &#123;</span><br><span class="line">        <span class="keyword">super</span>.onRequestPermissionsResult(requestCode, permissions, grantResults)</span><br><span class="line">        <span class="keyword">if</span> (requestCode == <span class="number">1</span>) &#123;</span><br><span class="line">            <span class="keyword">for</span> (i <span class="keyword">in</span> permissions.indices) &#123;</span><br><span class="line">                <span class="keyword">if</span> (grantResults[i] == PERMISSION_GRANTED) &#123;</span><br><span class="line">                    <span class="comment">// 申请成功</span></span><br><span class="line">                    Log.d(tag,<span class="string">"申请成功"</span>)</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    <span class="comment">// 申请失败</span></span><br><span class="line">                    Log.d(tag,<span class="string">"申请失败"</span>)</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>成功，程序正常运行</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">2019-08-13 01:16:06.530 19535-19535/com.xw.androidqtest D/StorageActivity: 申请成功</span><br><span class="line">2019-08-13 01:16:09.301 19535-19535/com.xw.androidqtest D/StorageActivity: file.exists():true ， file.getAbsolutePath(): /storage/emulated/0/Android/data/com.xw.androidqtest/files/Documents/测试Android Q文件.txt</span><br><span class="line">2019-08-13 01:16:09.303 19535-19535/com.xw.androidqtest D/StorageActivity: SD卡目录下创建文件是否成功？:true</span><br><span class="line">2019-08-13 01:16:09.316 19535-19535/com.xw.androidqtest D/StorageActivity: SD卡写入内容完成...</span><br><span class="line">2019-08-13 01:16:12.023 19535-19535/com.xw.androidqtest D/StorageActivity: SD卡文件里面的内容:我是测试Android Q文件写入的内容</span><br></pre></td></tr></table></figure><h1 id="结论"><a href="#结论" class="headerlink" title="结论"></a>结论</h1><p>1.Android Q 如果调用Environment.getExternalStorageDirectory()，需要添加READ_EXTERNAL_STORAGE 和 WRITE_EXTERNAL_STORAGE权限，并动态请求权限，同时还需要添加新的清单属性为<strong>requestLegacyExternalStorage</strong>,否则会出现类别1的测试结果</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">manifest</span> <span class="attr">...</span> &gt;</span></span><br><span class="line">  <span class="comment">&lt;!-- This attribute is "false" by default on apps targeting Android Q. --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">application</span> <span class="attr">android:requestLegacyExternalStorage</span>=<span class="string">"true"</span> <span class="attr">...</span> &gt;</span></span><br><span class="line">    ...</span><br><span class="line">  <span class="tag">&lt;/<span class="name">application</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">manifest</span>&gt;</span></span><br></pre></td></tr></table></figure><p>这样添加完成之后，getExternalStorageDirectory方式就能执行成功了。</p><p>2、Android Q 如果调用Environment.getExternalFilesDir()。正如官方所言，默认情况下，以 Android Q 为目标平台的应用（以及选择接受这些变更的应用）在访问外部存储设备中的文件时会进入过滤视图。此类应用只能查看特定于应用的目录和特定类型的媒体，因此应用无需请求任何其他用户权限。（类别2测试示例体现）</p><blockquote><p>以上内容简单的对Android Q 存储方式进行简单的示例说明。如果有不足之处，欢迎指正。</p></blockquote>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;对 Android Q Beta 6 版本上的存储示例，进行一次测试分析并记录&lt;/p&gt;
&lt;/blockquote&gt;
&lt;hr&gt;
    
    </summary>
    
      <category term="Android" scheme="https://shoewann0402.github.io/categories/Android/"/>
    
      <category term="Android Q" scheme="https://shoewann0402.github.io/categories/Android/Android-Q/"/>
    
    
      <category term="Android" scheme="https://shoewann0402.github.io/tags/Android/"/>
    
      <category term="Android Q" scheme="https://shoewann0402.github.io/tags/Android-Q/"/>
    
      <category term="Storage" scheme="https://shoewann0402.github.io/tags/Storage/"/>
    
  </entry>
  
  <entry>
    <title>Android Q 气泡</title>
    <link href="https://shoewann0402.github.io/2019/04/07/android-q-beta2-bubbles/"/>
    <id>https://shoewann0402.github.io/2019/04/07/android-q-beta2-bubbles/</id>
    <published>2019-04-07T08:26:47.000Z</published>
    <updated>2019-07-19T16:41:32.623Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>本节内容测试Android Q新功能 —— 气泡</p></blockquote><hr><a id="more"></a><blockquote><p><em>当前文章首次编辑于Android Q Beta 2 版本，可能部分内容会在后期版本上发生变化，仅供参考</em></p></blockquote><p>气泡是Android Q中的一项新功能。通过气泡，用户可以轻松地从设备上的任何位置进行多任务处理。 气泡内置于通知系统中。 它们会浮动在其他应用内容之上，并随时随地关注用户。 可以扩展气泡以显示应用程序功能和信息，并且可以在不使用时折叠。</p><p>当设备被锁定或始终显示处于活动状态时，气泡就会像通常那样出现。</p><p>气泡是一种选择退出功能。 当应用程序显示其第一个气泡时，会显示一个权限对话框，提供两个选项：</p><blockquote><p>1.阻止您应用中的所有气泡 - 通知不会被阻止，但它们永远不会显示为气泡</p></blockquote><blockquote><p>2.允许来自您应用的所有气泡 - 使用<code>BubbleMetaData</code>发送的所有通知都将显示为气泡</p></blockquote><h1 id="Bubble-API"><a href="#Bubble-API" class="headerlink" title="Bubble API"></a>Bubble API</h1><p>气泡是通过通知API创建的，您可以像往常一样发送通知。如果你想让它冒泡，你需要附加一些额外的数据到它。</p><p>气泡的展开视图是由您选择的Activity创建的。需要将Activity配置为适当显示为气泡。该Activity必须<span class="exturl" data-url="aHR0cHM6Ly9kZXZlbG9wZXIuYW5kcm9pZC5nb29nbGUuY24vZ3VpZGUvdG9waWNzL21hbmlmZXN0L2FjdGl2aXR5LWVsZW1lbnQjcmVzaXplYWJsZUFjdGl2aXR5" title="https://developer.android.google.cn/guide/topics/manifest/activity-element#resizeableActivity">可调整大小<i class="fa fa-external-link"></i></span>、<span class="exturl" data-url="aHR0cHM6Ly9kZXZlbG9wZXIuYW5kcm9pZC5nb29nbGUuY24vZ3VpZGUvdG9waWNzL21hbmlmZXN0L2FjdGl2aXR5LWVsZW1lbnQuaHRtbCNlbWJlZGRlZA==" title="https://developer.android.google.cn/guide/topics/manifest/activity-element.html#embedded">嵌入<i class="fa fa-external-link"></i></span>并始终以文档UI模式启动。如果它缺少这些要求中的任何一个，它将以通知的形式显示。</p><p>下面的代码演示了如何实现一个简单的气泡:</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">activity</span></span></span><br><span class="line"><span class="tag">  <span class="attr">android:name</span>=<span class="string">".bubbles.BubbleActivity"</span></span></span><br><span class="line"><span class="tag">  <span class="attr">android:theme</span>=<span class="string">"@style/AppTheme.NoActionBar"</span></span></span><br><span class="line"><span class="tag">  <span class="attr">android:label</span>=<span class="string">"@string/title_activity_bubble"</span></span></span><br><span class="line"><span class="tag">  <span class="attr">android:allowEmbedded</span>=<span class="string">"true"</span></span></span><br><span class="line"><span class="tag">  <span class="attr">android:documentLaunchMode</span>=<span class="string">"always"</span></span></span><br><span class="line"><span class="tag">  <span class="attr">android:resizeableActivity</span>=<span class="string">"true"</span></span></span><br><span class="line"><span class="tag">/&gt;</span></span><br></pre></td></tr></table></figure><p>如果您的应用程序显示多个相同类型的气泡，比如多个联系人的聊天对话，则该活动必须能够启动多个实例。将documentLaunchMode设置为“always”。</p><p>要发送气泡，请遵循以下步骤:</p><p>1、像平常一样创建通知。</p><p>2、调用<code>Notification.BubbleMetadata.Builder</code>创建一个BubbleMetadata对象。</p><p>3、使用<code>setBubbleMetadata</code>将元数据添加到通知中。</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Create bubble intent</span></span><br><span class="line"><span class="keyword">val</span> target = Intent(context, BubbleActivity::<span class="class"><span class="keyword">class</span>.<span class="title">java</span>)</span></span><br><span class="line"><span class="keyword">val</span> bubbleIntent = PendingIntent.getActivity(context, <span class="number">0</span>, target, <span class="number">0</span> <span class="comment">/* flags */</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">// Create bubble metadata</span></span><br><span class="line"><span class="keyword">val</span> bubbleData = Notification.BubbleMetadata.Builder()</span><br><span class="line">    .setDesiredHeight(<span class="number">600</span>)</span><br><span class="line">    <span class="comment">// Note: although you can set the icon is not displayed in Q Beta 2</span></span><br><span class="line">    .setIcon(Icon.createWithResource(context, R.drawable.icon))</span><br><span class="line">    .setIntent(bubbleIntent)</span><br><span class="line">    .build()</span><br><span class="line"></span><br><span class="line"><span class="comment">// Create notification</span></span><br><span class="line"><span class="keyword">val</span> chatBot = Person.Builder()</span><br><span class="line">    .setBot(<span class="literal">true</span>)</span><br><span class="line">    .setName(<span class="string">"BubbleBot"</span>)</span><br><span class="line">    .setImportant(<span class="literal">true</span>)</span><br><span class="line">    .build()</span><br><span class="line"></span><br><span class="line"><span class="keyword">val</span> builder = Notification.Builder(context, CHANNEL_ID)</span><br><span class="line">    .setContentIntent(contentIntent)</span><br><span class="line">    .setSmallIcon(smallIcon)</span><br><span class="line">    .setBubbleMetadata(bubbleData)</span><br></pre></td></tr></table></figure><p>注意:第一次发送显示气泡的通知时，它必须位于<strong>IMPORTANCE_HIGH</strong>的通知通道中。这是因为气泡是由通知重要性管理器处理的。如果系统在用户有机会允许或阻止冒泡之前降低了通知的重要性，则通知将不会冒泡。</p><p>如果您的应用程序在发送气泡时位于前台，那么重要性将被忽略，并且您的气泡将始终显示(除非用户已经阻止了气泡或来自应用程序的通知)。</p><h1 id="创建扩展的气泡"><a href="#创建扩展的气泡" class="headerlink" title="创建扩展的气泡"></a>创建扩展的气泡</h1><p>您可以配置气泡以自动将其呈现为展开状态。 我们建议仅在用户执行可能导致冒泡的操作时使用此功能，例如点按按钮以开始新聊天。 在这种情况下，抑制创建气泡时发送的初始通知也是有意义的。</p><p>您可以使用一些方法来设置启用这些行为的标志：<code>setAutoExpandBubble()</code>和<code>setSuppressInitialNotification</code></p><p>注意:虽然您可以在Android Q Beta 2中设置这些标志，但它们还没有任何效果。</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">val</span> bubbleMetadata = Notification.BubbleMetadata.Builder()</span><br><span class="line">    .setDesiredHeight(<span class="number">600</span>)</span><br><span class="line">    .setIntent(bubbleIntent)</span><br><span class="line">    .setAutoExpandBubble(<span class="literal">true</span>)</span><br><span class="line">    .setSuppressInitialNotification(<span class="literal">true</span>)</span><br><span class="line">    .build()</span><br></pre></td></tr></table></figure><h1 id="最佳实践"><a href="#最佳实践" class="headerlink" title="最佳实践"></a>最佳实践</h1><p>1、气泡占据了屏幕空间，并覆盖了其他应用程序内容。只有在非常重要的情况下(比如正在进行的通信)，或者用户明确要求某些内容使用冒泡时，才应该将通知作为冒泡发送。</p><p>2、注意，用户可以禁用气泡。在这种情况下，气泡通知显示为正常通知。您应该始终确保气泡通知与正常通知一样工作。</p><p>3、从气泡中启动的流程(如活动和对话框)出现在气泡容器中。这意味着一个气泡可以有一个任务堆栈。如果气泡中有很多功能或导航，事情就会变得复杂。我们建议保持功能尽可能的具体和轻量级。</p><h1 id="测试示例"><a href="#测试示例" class="headerlink" title="测试示例"></a>测试示例</h1><p>创建BubbleActivity，在AndroidManifest.xml添加如下代码</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">activity</span> <span class="attr">android:name</span>=<span class="string">".BubbleActivity"</span></span></span><br><span class="line"><span class="tag">                 <span class="attr">android:theme</span>=<span class="string">"@style/AppTheme.NoActionBar"</span></span></span><br><span class="line"><span class="tag">                 <span class="attr">android:label</span>=<span class="string">"@string/title_activity_bubble"</span></span></span><br><span class="line"><span class="tag">                 <span class="attr">android:allowEmbedded</span>=<span class="string">"true"</span></span></span><br><span class="line"><span class="tag">                 <span class="attr">android:documentLaunchMode</span>=<span class="string">"always"</span></span></span><br><span class="line"><span class="tag">                 <span class="attr">android:resizeableActivity</span>=<span class="string">"true"</span>&gt;</span></span><br></pre></td></tr></table></figure><p>其中AppTheme.NoActionBar主题代码</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">style</span> <span class="attr">name</span>=<span class="string">"AppTheme.NoActionBar"</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;<span class="name">item</span> <span class="attr">name</span>=<span class="string">"windowActionBar"</span>&gt;</span>false<span class="tag">&lt;/<span class="name">item</span>&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;<span class="name">item</span> <span class="attr">name</span>=<span class="string">"windowNoTitle"</span>&gt;</span>true<span class="tag">&lt;/<span class="name">item</span>&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;<span class="name">item</span> <span class="attr">name</span>=<span class="string">"android:windowDrawsSystemBarBackgrounds"</span>&gt;</span>true<span class="tag">&lt;/<span class="name">item</span>&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;<span class="name">item</span> <span class="attr">name</span>=<span class="string">"android:statusBarColor"</span>&gt;</span>@android:color/transparent<span class="tag">&lt;/<span class="name">item</span>&gt;</span></span></span><br><span class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br></pre></td></tr></table></figure><p>在MainActivity中，定义NotificatioManager对象</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">var</span> notificationManager: NotificationManager? = <span class="literal">null</span></span><br></pre></td></tr></table></figure><p>并在onCreate方法初始化</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">notificationManager = <span class="keyword">this</span><span class="symbol">@MainActivity</span>.getSystemService(Context.NOTIFICATION_SERVICE) <span class="keyword">as</span> NotificationManager</span><br></pre></td></tr></table></figure><p>定义常量</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">companion</span> <span class="keyword">object</span> &#123;</span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">const</span> <span class="keyword">val</span> REQUEST_CONTENT = <span class="number">1</span></span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">const</span> <span class="keyword">val</span> REQUEST_BUBBLE = <span class="number">2</span></span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>定义显示Bubble气泡的方法</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="function"><span class="keyword">fun</span> <span class="title">showBubble</span><span class="params">()</span></span> &#123;</span><br><span class="line">        Log.d(tag, <span class="string">"show bubble"</span>)</span><br><span class="line"></span><br><span class="line">        <span class="comment">//创建通知渠道</span></span><br><span class="line">        <span class="keyword">val</span> channel = NotificationChannel(<span class="string">"通知渠道ID"</span>, <span class="string">"通知渠道名称"</span>, NotificationManager.IMPORTANCE_HIGH)</span><br><span class="line">        notificationManager!!.createNotificationChannel(channel)</span><br><span class="line">        <span class="comment">//</span></span><br><span class="line">        <span class="keyword">val</span> icon = Icon.createWithResource(<span class="keyword">this</span><span class="symbol">@MainActivity</span>, R.mipmap.ic_launcher_round)</span><br><span class="line">        <span class="comment">//</span></span><br><span class="line">        <span class="keyword">val</span> person = Person.Builder()</span><br><span class="line">            .setName(<span class="string">"Person Name"</span>)</span><br><span class="line">            .setIcon(icon)</span><br><span class="line">            .build()</span><br><span class="line"></span><br><span class="line"><span class="keyword">val</span> contentIntent = PendingIntent.getActivity(</span><br><span class="line">                    <span class="keyword">this</span><span class="symbol">@MainActivity</span>,REQUEST_CONTENT,</span><br><span class="line">                    Intent(<span class="keyword">this</span><span class="symbol">@MainActivity</span>, MainActivity::<span class="class"><span class="keyword">class</span>.<span class="title">java</span>), <span class="type">PendingIntent.FLAG_UPDATE_CURRENT)</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">val</span> bubbleIntent = PendingIntent.getActivity(</span><br><span class="line">                    <span class="keyword">this</span><span class="symbol">@MainActivity</span>,</span><br><span class="line">                    REQUEST_BUBBLE,</span><br><span class="line">                    Intent(<span class="keyword">this</span><span class="symbol">@MainActivity</span>, BubbleActivity::<span class="class"><span class="keyword">class</span>.<span class="title">java</span>),<span class="type"></span></span></span><br><span class="line">                    PendingIntent.FLAG_UPDATE_CURRENT)</span><br><span class="line">     </span><br><span class="line">        <span class="keyword">val</span> bubbleMetadata = Notification.BubbleMetadata.Builder()</span><br><span class="line">            .setDesiredHeight(<span class="number">400</span>)</span><br><span class="line">            .setIcon(icon)</span><br><span class="line">            .setAutoExpandBubble(<span class="literal">true</span>)</span><br><span class="line">            .setSuppressInitialNotification(<span class="literal">true</span>)</span><br><span class="line">            .setIntent(bubbleIntent)</span><br><span class="line">            .build()</span><br><span class="line">      </span><br><span class="line">        <span class="keyword">val</span> builder = Notification.Builder(<span class="keyword">this</span><span class="symbol">@MainActivity</span>, <span class="string">"通知渠道ID"</span>)</span><br><span class="line">            .setContentTitle(<span class="string">"Bubble"</span>)</span><br><span class="line">            .setContentText(<span class="string">"测试Android Q Bubble"</span>)</span><br><span class="line">            .setContentIntent(contentIntent)</span><br><span class="line">            .setSmallIcon(icon)</span><br><span class="line">            .setBubbleMetadata(bubbleMetadata)</span><br><span class="line">            .addPerson(person)</span><br><span class="line">            .setShowWhen(<span class="literal">true</span>)</span><br><span class="line">        notificationManager!!.notify(<span class="number">0</span>, builder.build());</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>在按钮的点击事件中调用<code>showBubble</code>方法，触发通知，并显示气泡</p><p>通知栏出现通知消息，屏幕右侧显示出了气泡（气泡好像没有图标，上文中有提到，即使设置了也不会在Q Beta 2上显示）</p><p><img alt="android-q-beta2-bubble-0" data-src="/images/android-q-beta2-bubble-0.png"></p><p>下拉通知栏，可以看到创建的通知消息</p><p><img alt="android-q-beta2-bubble-1" data-src="/images/android-q-beta2-bubble-1.png"></p><p>长按快捷方式的效果</p><p><img alt="android-q-beta2-bubble-2" data-src="/images/android-q-beta2-bubble-2.png"></p><p>点击气泡，会触发打开<strong>BubbleActivity</strong>并弹出窗口，可以看到右上角两个图标，左下角一个，右下角一个</p><p><img alt="android-q-beta2-bubble-3" data-src="/images/android-q-beta2-bubble-3.png"></p><p>首先我们看看左下角的图标，点击了会弹出两个选项，一个添加应用快捷方式，另一个设置壁纸</p><p><img alt="android-q-beta2-bubble-4" data-src="/images/android-q-beta2-bubble-4.png"></p><p>点击第一个添加应用快捷方式，可以列出当前设备安装的应用</p><p><img alt="android-q-beta2-bubble-5" data-src="/images/android-q-beta2-bubble-5.png"></p><p>随机点了两个，一个微信，一个支付宝，添加进去。添加完成之后，从此处点击过去，就能直接打开跳转到指定的应用程序 (添加进去还没测试如何移除，试过了清除数据和重新安装都没效果)</p><p><img alt="android-q-beta2-bubble-6" data-src="/images/android-q-beta2-bubble-6.png"></p><p>点击右上角箭头的的图标可以直接进入 —— <strong>MainActivity</strong></p><p>点击右上角的齿轮，可以跳转的该应用的通知的设置</p><p><img alt="android-q-beta2-bubble-7" data-src="/images/android-q-beta2-bubble-7.png"></p><p>点击具体的一条通知渠道后面的齿轮，可以详细的进入具体的通知渠道设置</p><p><img alt="android-q-beta2-bubble-8" data-src="/images/android-q-beta2-bubble-8.png"></p><p>然后气泡右下角的图标，类似于快捷launcher桌面，可以直接访问桌面的所有应用程序，点击也是直接打开跳转到指定的应用程序中</p><p><img alt="android-q-beta2-bubble-9" data-src="/images/android-q-beta2-bubble-9.png"></p><p>最后，长按气泡图标，拖拽到底部指定区域，可以销毁气泡</p><p><img alt="android-q-beta2-bubble-10" data-src="/images/android-q-beta2-bubble-10.png"></p><p>判断是否允许了气泡的方法</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">canBubble</span><span class="params">()</span></span>: <span class="built_in">Boolean</span> &#123;</span><br><span class="line">    <span class="keyword">val</span> channel = notificationManager!!.getNotificationChannel(<span class="string">"通知渠道ID"</span>)</span><br><span class="line">    <span class="keyword">return</span> notificationManager!!.areBubblesAllowed() &amp;&amp; channel.canBubble()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>本文参考<span class="exturl" data-url="aHR0cHM6Ly9kZXZlbG9wZXIuYW5kcm9pZC5nb29nbGUuY24vcHJldmlldy9mZWF0dXJlcy9idWJibGVz" title="https://developer.android.google.cn/preview/features/bubbles">官方文档<i class="fa fa-external-link"></i></span>和<span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL2dvb2dsZXNhbXBsZXMvYW5kcm9pZC1CdWJibGVz" title="https://github.com/googlesamples/android-Bubbles">官方示例<i class="fa fa-external-link"></i></span>简单总结，感谢您的阅读。如有不足，欢迎指正</p></blockquote>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;本节内容测试Android Q新功能 —— 气泡&lt;/p&gt;
&lt;/blockquote&gt;
&lt;hr&gt;
    
    </summary>
    
      <category term="Android" scheme="https://shoewann0402.github.io/categories/Android/"/>
    
      <category term="Android Q" scheme="https://shoewann0402.github.io/categories/Android/Android-Q/"/>
    
    
      <category term="Android" scheme="https://shoewann0402.github.io/tags/Android/"/>
    
      <category term="Android Q" scheme="https://shoewann0402.github.io/tags/Android-Q/"/>
    
      <category term="Bubbles" scheme="https://shoewann0402.github.io/tags/Bubbles/"/>
    
  </entry>
  
  <entry>
    <title>Android Q 访问剪切板数据</title>
    <link href="https://shoewann0402.github.io/2019/03/27/android-q-beta-access-clipboard-data/"/>
    <id>https://shoewann0402.github.io/2019/03/27/android-q-beta-access-clipboard-data/</id>
    <published>2019-03-27T09:08:34.000Z</published>
    <updated>2019-07-19T16:43:10.444Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>本节内容测试Android Q对剪切板数据的访问 </p></blockquote><hr><a id="more"></a><blockquote><p><em>当前文章首次编辑于Android Q Beta 1 版本，可能部分内容会在后期版本上发生变化，仅供参考</em></p></blockquote><h1 id="变化"><a href="#变化" class="headerlink" title="变化"></a>变化</h1><p>Android Q 对访问剪切板数据进行了限制，非系统默认输入法以及后台运行的程序是无法访问到剪切板数据</p><h1 id="测试示例-——-后台运行的程序访问剪切板"><a href="#测试示例-——-后台运行的程序访问剪切板" class="headerlink" title="测试示例 —— 后台运行的程序访问剪切板"></a>测试示例 —— 后台运行的程序访问剪切板</h1><p>测试之前我复制了本博客地址:<strong><a href="https://shoewann0402.github.io">https://shoewann0402.github.io</a></strong></p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.xw.clipboarddemo</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> android.content.ClipboardManager</span><br><span class="line"><span class="keyword">import</span> android.content.Context</span><br><span class="line"><span class="keyword">import</span> androidx.appcompat.app.AppCompatActivity</span><br><span class="line"><span class="keyword">import</span> android.os.Bundle</span><br><span class="line"><span class="keyword">import</span> android.util.Log</span><br><span class="line"><span class="keyword">import</span> kotlinx.android.synthetic.main.activity_main.*</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MainActivity</span> : <span class="type">AppCompatActivity</span></span>() &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">val</span> tag: String = MainActivity::<span class="class"><span class="keyword">class</span>.<span class="title">java</span>.<span class="title">simpleName</span></span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">var</span> cm: ClipboardManager? = <span class="literal">null</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">override</span> <span class="function"><span class="keyword">fun</span> <span class="title">onCreate</span><span class="params">(savedInstanceState: <span class="type">Bundle</span>?)</span></span> &#123;</span><br><span class="line">        <span class="keyword">super</span>.onCreate(savedInstanceState)</span><br><span class="line">        setContentView(R.layout.activity_main)</span><br><span class="line"></span><br><span class="line">        cm = <span class="keyword">this</span>.getSystemService(Context.CLIPBOARD_SERVICE) <span class="keyword">as</span> ClipboardManager?</span><br><span class="line"></span><br><span class="line">        <span class="comment">//1.直接获取剪切板数据</span></span><br><span class="line">        getClipboardData()</span><br><span class="line"></span><br><span class="line">        <span class="comment">//2.点击按钮获取剪切板数据</span></span><br><span class="line">        btn_get_clipboard_data.setOnClickListener &#123;</span><br><span class="line">            getClipboardData()</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//获取剪切板数据的方法</span></span><br><span class="line">    <span class="keyword">private</span> <span class="function"><span class="keyword">fun</span> <span class="title">getClipboardData</span><span class="params">()</span></span> &#123;</span><br><span class="line">        Log.d(tag, getString(R.string.get_clipboard_data))</span><br><span class="line">        <span class="comment">//如果当前剪贴板上存在Copy返回True</span></span><br><span class="line">        <span class="keyword">val</span> hasPrimaryClip = cm!!.hasPrimaryClip()</span><br><span class="line">        Log.d(tag, <span class="string">"<span class="subst">$&#123;getString(R.string.hasPrimaryClip)&#125;</span><span class="variable">$hasPrimaryClip</span>"</span>)</span><br><span class="line">        <span class="keyword">if</span> (hasPrimaryClip) &#123;</span><br><span class="line">            <span class="keyword">val</span> abc = cm!!.primaryClip</span><br><span class="line">            <span class="keyword">if</span> (abc != <span class="literal">null</span>) &#123;</span><br><span class="line">                <span class="keyword">val</span> item = abc.getItemAt(<span class="number">0</span>)</span><br><span class="line">                <span class="keyword">val</span> text = item.text.toString()</span><br><span class="line">                Log.d(tag, <span class="string">"<span class="subst">$&#123;getString(R.string.clipboard_data)&#125;</span><span class="variable">$text</span>"</span>)</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">//对剪贴板文字的操作</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>当应用加载成功，输出日志:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">2019-03-27 17:17:17.127 26244-26244/com.xw.clipboarddemo D/MainActivity: 获取剪切板数据</span><br><span class="line">2019-03-27 17:17:17.128 26244-26244/com.xw.clipboarddemo D/MainActivity: 剪切板是否含有复制数据:false</span><br></pre></td></tr></table></figure><p>然后点击按钮，输出日志:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">2019-03-27 17:17:18.924 26244-26244/com.xw.clipboarddemo D/MainActivity: 获取剪切板数据</span><br><span class="line">2019-03-27 17:17:18.924 26244-26244/com.xw.clipboarddemo D/MainActivity: 剪切板是否含有复制数据:true</span><br><span class="line">2019-03-27 17:17:18.925 26244-26244/com.xw.clipboarddemo D/MainActivity: [剪切板数据]:https://shoewann0402.github.io</span><br></pre></td></tr></table></figure><p>可见Android Q上只有当前应用获取了焦点，运行在前台才能访问到剪切板数据，在后台无法获取到剪切板的数据</p><p>针对默认键盘这种方式的，这里不做测试了</p><blockquote><p>本文参考<span class="exturl" data-url="aHR0cHM6Ly9kZXZlbG9wZXIuYW5kcm9pZC5jb20vcHJldmlldy9wcml2YWN5L2RhdGEtaWRlbnRpZmllcnMjY2xpcGJvYXJkLWRhdGE=" title="https://developer.android.com/preview/privacy/data-identifiers#clipboard-data">官方文档<i class="fa fa-external-link"></i></span>简单总结，感谢您的阅读。如有不足，欢迎指正</p></blockquote>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;本节内容测试Android Q对剪切板数据的访问 &lt;/p&gt;
&lt;/blockquote&gt;
&lt;hr&gt;
    
    </summary>
    
      <category term="Android" scheme="https://shoewann0402.github.io/categories/Android/"/>
    
      <category term="Android Q" scheme="https://shoewann0402.github.io/categories/Android/Android-Q/"/>
    
    
      <category term="Android" scheme="https://shoewann0402.github.io/tags/Android/"/>
    
      <category term="Android Q" scheme="https://shoewann0402.github.io/tags/Android-Q/"/>
    
      <category term="Clipboard" scheme="https://shoewann0402.github.io/tags/Clipboard/"/>
    
  </entry>
  
  <entry>
    <title>Android Q 应用切换WiFi开关的限制</title>
    <link href="https://shoewann0402.github.io/2019/03/20/android-q-beta-enable-and-disable-wifi/"/>
    <id>https://shoewann0402.github.io/2019/03/20/android-q-beta-enable-and-disable-wifi/</id>
    <published>2019-03-20T00:34:49.000Z</published>
    <updated>2019-07-19T16:43:27.120Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>Android Q 不允许应用程序开/关WIFI</p></blockquote><hr><a id="more"></a><blockquote><p><em>当前文章首次编辑于Android Q Beta 1 版本，可能部分内容会在后期版本上发生变化，仅供参考</em></p></blockquote><h1 id="目的"><a href="#目的" class="headerlink" title="目的"></a>目的</h1><p>Android Q 将切断应用对Wi-Fi设置的访问权限，防止恶意软件滥用系统功能的访问权限。</p><h1 id="变化"><a href="#变化" class="headerlink" title="变化"></a>变化</h1><p>运行在Q上的应用程序将无法启用/禁用WIFI, <code>WifiManager.setWifiEnabled()</code>方法始将终返回false,该方法不被允许</p><h1 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h1><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.xw.androidqtest</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> android.content.Context</span><br><span class="line"><span class="keyword">import</span> android.net.wifi.WifiManager</span><br><span class="line"><span class="keyword">import</span> androidx.appcompat.app.AppCompatActivity</span><br><span class="line"><span class="keyword">import</span> android.os.Bundle</span><br><span class="line"><span class="keyword">import</span> android.util.Log</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">WifiActivity</span> : <span class="type">AppCompatActivity</span></span>() &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">val</span> tag: String = WifiActivity::<span class="class"><span class="keyword">class</span>.<span class="title">java</span>.<span class="title">simpleName</span></span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">var</span> wifiManager: WifiManager? = <span class="literal">null</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">override</span> <span class="function"><span class="keyword">fun</span> <span class="title">onCreate</span><span class="params">(savedInstanceState: <span class="type">Bundle</span>?)</span></span> &#123;</span><br><span class="line">        <span class="keyword">super</span>.onCreate(savedInstanceState)</span><br><span class="line">        setContentView(R.layout.activity_wifi)</span><br><span class="line">        wifiManager = <span class="keyword">this</span>.getSystemService(Context.WIFI_SERVICE) <span class="keyword">as</span> WifiManager?</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">val</span> isWifiEnabled = wifiManager!!.isWifiEnabled</span><br><span class="line">        Log.d(tag, <span class="string">"[默认状态]是否开启 :<span class="variable">$isWifiEnabled</span>"</span>)</span><br><span class="line">        <span class="keyword">when</span> (isWifiEnabled) &#123;</span><br><span class="line">            <span class="literal">true</span> -&gt; &#123;</span><br><span class="line">                Log.d(tag, <span class="string">"[关闭]WiFi，设置WiFi状态为: false"</span>)</span><br><span class="line">                wifiManager!!.isWifiEnabled = <span class="literal">false</span></span><br><span class="line">                <span class="keyword">val</span> result = wifiManager!!.isWifiEnabled</span><br><span class="line">                Log.d(tag, <span class="string">"当前状态:<span class="variable">$result</span>"</span>)</span><br><span class="line">                <span class="keyword">if</span> (result) &#123;</span><br><span class="line">                    Log.d(tag, <span class="string">"检查到当前是true[开启状态], 关闭WiFi: [失败]"</span>)</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    Log.d(tag, <span class="string">"检查到当前是false[关闭状态], 关闭WiFi: [成功]"</span>)</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span> -&gt; &#123;</span><br><span class="line">                Log.d(tag, <span class="string">"[开启]WiFi，设置WiFi状态为: true"</span>)</span><br><span class="line">                wifiManager!!.isWifiEnabled = <span class="literal">true</span></span><br><span class="line">                <span class="keyword">val</span> result = wifiManager!!.isWifiEnabled</span><br><span class="line">                Log.d(tag, <span class="string">"当前状态:<span class="variable">$result</span>"</span>)</span><br><span class="line">                <span class="keyword">if</span> (result) &#123;</span><br><span class="line">                    Log.d(tag, <span class="string">"检查当前是true[开启状态], 开启WiFi: [成功]"</span>)</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    Log.d(tag, <span class="string">"检查当前是false[关闭状态], 开启WiFi: [失败]"</span>)</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><ul><li>当WiFi默认是开启的情况下，需要代码关闭WiFi，输出日志:</li></ul></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">2019-03-20 08:24:51.741 1213-1650/? I/ActivityTaskManager: START u0 &#123;cmp=com.xw.androidqtest/.WifiActivity&#125; from uid 10505</span><br><span class="line">2019-03-20 08:24:51.779 11562-11562/? D/WifiActivity: [默认状态]是否开启 :true</span><br><span class="line">2019-03-20 08:24:51.779 11562-11562/? D/WifiActivity: [关闭]WiFi，设置WiFi状态为: false</span><br><span class="line">2019-03-20 08:24:51.781 1213-1650/? I/WifiService: setWifiEnabled not allowed for uid=10505</span><br><span class="line">2019-03-20 08:24:51.781 11562-11562/? D/WifiActivity: 当前状态:true</span><br><span class="line">2019-03-20 08:24:51.781 11562-11562/? D/WifiActivity: 检查到当前是true[开启状态], 关闭WiFi: [失败]</span><br></pre></td></tr></table></figure><blockquote><ul><li>当WiFi默认是关闭的情况下，需要代码开启WiFi，输出日志:</li></ul></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">2019-03-20 08:27:00.212 1213-3863/? I/ActivityTaskManager: START u0 &#123;cmp=com.xw.androidqtest/.WifiActivity&#125; from uid 10505</span><br><span class="line">2019-03-20 08:27:00.245 11562-11562/? D/WifiActivity: [默认状态]是否开启 :false</span><br><span class="line">2019-03-20 08:27:00.245 11562-11562/? D/WifiActivity: [开启]WiFi，设置WiFi状态为: true</span><br><span class="line">2019-03-20 08:27:00.245 1213-5152/? I/WifiService: setWifiEnabled not allowed for uid=10505</span><br><span class="line">2019-03-20 08:27:00.245 11562-11562/? D/WifiActivity: 当前状态:false</span><br><span class="line">2019-03-20 08:27:00.245 11562-11562/? D/WifiActivity: 检查当前是false[关闭状态], 开启WiFi: [失败]</span><br></pre></td></tr></table></figure><p>通过以上的示例可以看到，不论是开启还是关闭WiFi都没有效果，系统都将返回<code>false</code>，并输出<code>setWifiEnabled</code>不被允许的日志信息:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">setWifiEnabled not allowed for uid= xxxx</span><br></pre></td></tr></table></figure><h1 id="解决方法"><a href="#解决方法" class="headerlink" title="解决方法"></a>解决方法</h1><p>使用设置面板提示用户启用和禁用Wi-Fi，<br>调用<code>Settings.Panel.ACTION_INTERNET_CONNECTIVITY</code></p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">startActivity(Intent(Settings.Panel.ACTION_INTERNET_CONNECTIVITY))</span><br></pre></td></tr></table></figure><blockquote><p>本文参考官方文档简单总结，感谢您的阅读。如有不足，欢迎指正</p></blockquote>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;Android Q 不允许应用程序开/关WIFI&lt;/p&gt;
&lt;/blockquote&gt;
&lt;hr&gt;
    
    </summary>
    
      <category term="Android" scheme="https://shoewann0402.github.io/categories/Android/"/>
    
      <category term="Android Q" scheme="https://shoewann0402.github.io/categories/Android/Android-Q/"/>
    
    
      <category term="Android" scheme="https://shoewann0402.github.io/tags/Android/"/>
    
      <category term="Android Q" scheme="https://shoewann0402.github.io/tags/Android-Q/"/>
    
      <category term="WIFI" scheme="https://shoewann0402.github.io/tags/WIFI/"/>
    
      <category term="setWifiEnabled" scheme="https://shoewann0402.github.io/tags/setWifiEnabled/"/>
    
      <category term="Settings Panel" scheme="https://shoewann0402.github.io/tags/Settings-Panel/"/>
    
  </entry>
  
  <entry>
    <title>Android Q 设置面板</title>
    <link href="https://shoewann0402.github.io/2019/03/19/android-q-beta-settings-panel/"/>
    <id>https://shoewann0402.github.io/2019/03/19/android-q-beta-settings-panel/</id>
    <published>2019-03-19T10:15:56.000Z</published>
    <updated>2019-07-19T16:44:06.128Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>Android Q 引入了设置面板，它是一种API, 允许从应用程序上下文直接向用户展示设置。</p></blockquote><hr><a id="more"></a><blockquote><p><em>当前文章首次编辑于Android Q Beta 1 版本，可能部分内容会在后期版本上发生变化，仅供参考</em></p></blockquote><h1 id="目的"><a href="#目的" class="headerlink" title="目的"></a>目的</h1><p>避免了用户为了使用应用程序而需要进入<strong>设置</strong>来更改<strong>NFC</strong>或<strong>移动数据</strong>等内容。</p><h1 id="场景"><a href="#场景" class="headerlink" title="场景"></a>场景</h1><p>例如，假设用户在其设备处于飞行模式时打开Web浏览器。 在Android Q之前，该应用只能显示一条通用消息，要求用户打开“设置”以恢复连接。 使用Android Q，浏览器应用程序可以显示一个内联面板，显示关键的连接设置，如飞行模式，Wi-Fi（包括附近的网络）和移动数据。 使用此面板，用户无需离开应用即可恢复连接。</p><h1 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h1><p>这一新功能目前暂提供了<code>网络连接</code>、<code>NFC</code>、<code>音量</code>三个<strong>设置面板</strong>,使我们可以访问这三个不同的设置面板，所有这些面板都可以通过简单的<code>startActivity()</code>调用启动。</p><h2 id="网络连接"><a href="#网络连接" class="headerlink" title="网络连接"></a>网络连接</h2><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Settings.Panel.ACTION_INTERNET_CONNECTIVITY</span><br></pre></td></tr></table></figure><p><img alt="android-q-beta-settings-panel-wifi-1.png" data-src="/images/android-q-beta-settings-panel-wifi-1.png"></p><p><img alt="android-q-beta-settings-panel-wifi-1.png" data-src="/images/android-q-beta-settings-panel-wifi-2.png"></p><p>面板属性:</p><blockquote><ul><li>启用/禁用飞行模式</li><li>启用/禁用WIFI连接</li><li>启用/禁用移动数据</li><li>更改WIFI连接</li><li>导航到连接设置</li></ul></blockquote><h2 id="NFC"><a href="#NFC" class="headerlink" title="NFC"></a>NFC</h2><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Settings.Panel.ACTION_NFC</span><br></pre></td></tr></table></figure><p><img alt="android-q-beta-settings-panel-nfc.png" data-src="/images/android-q-beta-settings-panel-nfc.png"></p><p>面板属性:</p><blockquote><ul><li>显示与近场通信（NFC）相关的所有设置。</li></ul></blockquote><h2 id="音量"><a href="#音量" class="headerlink" title="音量"></a>音量</h2><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Settings.Panel.ACTION_VOLUME</span><br></pre></td></tr></table></figure><p><img alt="android-q-beta-settings-panel-volume.png" data-src="/images/android-q-beta-settings-panel-volume.png"></p><p>面板属性:</p><blockquote><ul><li>媒体音量</li><li>通话音量</li><li>铃声音量</li><li>闹钟音量</li></ul></blockquote><h1 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h1><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.xw.androidqtest</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> android.content.Intent</span><br><span class="line"><span class="keyword">import</span> androidx.appcompat.app.AppCompatActivity</span><br><span class="line"><span class="keyword">import</span> android.os.Bundle</span><br><span class="line"><span class="keyword">import</span> android.provider.Settings</span><br><span class="line"><span class="keyword">import</span> android.util.Log</span><br><span class="line"><span class="keyword">import</span> kotlinx.android.synthetic.main.activity_settings_panel.*</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">SettingsPanelActivity</span> : <span class="type">AppCompatActivity</span></span>() &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">val</span> tag: String = SettingsPanelActivity::<span class="class"><span class="keyword">class</span>.<span class="title">java</span>.<span class="title">simpleName</span></span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">override</span> <span class="function"><span class="keyword">fun</span> <span class="title">onCreate</span><span class="params">(savedInstanceState: <span class="type">Bundle</span>?)</span></span> &#123;</span><br><span class="line">        <span class="keyword">super</span>.onCreate(savedInstanceState)</span><br><span class="line">        setContentView(R.layout.activity_settings_panel)</span><br><span class="line">        </span><br><span class="line">        btnConnectivity.setOnClickListener &#123;</span><br><span class="line">            openSettings(Settings.Panel.ACTION_INTERNET_CONNECTIVITY)</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        btnNFC.setOnClickListener &#123;</span><br><span class="line">            openSettings(Settings.Panel.ACTION_NFC)</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        btnVolume.setOnClickListener &#123;</span><br><span class="line">            openSettings(Settings.Panel.ACTION_VOLUME)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="function"><span class="keyword">fun</span> <span class="title">openSettings</span><span class="params">(panel: <span class="type">String</span>)</span></span> &#123;</span><br><span class="line">        Log.d(tag, <span class="string">"panel:<span class="variable">$panel</span>"</span>)</span><br><span class="line">        <span class="keyword">val</span> intent = Intent(panel)</span><br><span class="line">        startActivity(intent)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>本文参考<span class="exturl" data-url="aHR0cHM6Ly9kZXZlbG9wZXIuYW5kcm9pZC5nb29nbGUuY24vcHJldmlldy9mZWF0dXJlcyNzZXR0aW5ncy1wYW5lbHM=" title="https://developer.android.google.cn/preview/features#settings-panels">官方文档<i class="fa fa-external-link"></i></span>及示例简单总结，感谢您的阅读。如有不足，欢迎指正</p></blockquote>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;Android Q 引入了设置面板，它是一种API, 允许从应用程序上下文直接向用户展示设置。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;hr&gt;
    
    </summary>
    
      <category term="Android" scheme="https://shoewann0402.github.io/categories/Android/"/>
    
      <category term="Android Q" scheme="https://shoewann0402.github.io/categories/Android/Android-Q/"/>
    
    
      <category term="Android" scheme="https://shoewann0402.github.io/tags/Android/"/>
    
      <category term="Android Q" scheme="https://shoewann0402.github.io/tags/Android-Q/"/>
    
      <category term="Settings Panel" scheme="https://shoewann0402.github.io/tags/Settings-Panel/"/>
    
  </entry>
  
  <entry>
    <title>Android Q 独立存储</title>
    <link href="https://shoewann0402.github.io/2019/03/17/android-q-beta-scoped-storage/"/>
    <id>https://shoewann0402.github.io/2019/03/17/android-q-beta-scoped-storage/</id>
    <published>2019-03-17T04:42:37.000Z</published>
    <updated>2019-08-12T18:05:43.247Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>Android Q 系统, 对应用存储空间访问进行了限制。</p></blockquote><hr><a id="more"></a><blockquote><p><em>当前文章首次编辑于Android Q Beta 1 版本，可能部分内容会在后期版本上发生变化，仅供参考</em></p></blockquote><h1 id="目的"><a href="#目的" class="headerlink" title="目的"></a>目的</h1><p>为了让用户更好地控制文件并限制文件混乱，Android Q 改变了应用程序访问设备外部存储上文件的方式</p><h1 id="变化"><a href="#变化" class="headerlink" title="变化"></a>变化</h1><blockquote><ul><li>使用更精细粒度、特殊媒体权限取代<code>READ_EXTERNAL_STORAGE</code> 和<code>WRITE_EXTERNAL_STORAGE</code> 权限</li></ul></blockquote><blockquote><ul><li>应用程序从外部存储设备访问自己的文件不需要特殊权限</li></ul></blockquote><hr><h1 id="更新变化-gt-Q-beta5"><a href="#更新变化-gt-Q-beta5" class="headerlink" title="更新变化 -&gt; Q beta5"></a>更新变化 -&gt; Q beta5</h1><p>以下内容是 Q beta 5 上<strong>最新的变化</strong> (临时添加部分内容)</p><p>1、您可以使用新的<span class="exturl" data-url="aHR0cHM6Ly9kZXZlbG9wZXIuYW5kcm9pZC5nb29nbGUuY24vcmVmZXJlbmNlL2FuZHJvaWQvUi5hdHRyLmh0bWwjcmVxdWVzdExlZ2FjeUV4dGVybmFsU3RvcmFnZQ==" title="https://developer.android.google.cn/reference/android/R.attr.html#requestLegacyExternalStorage">requestLegacyExternalStorage<i class="fa fa-external-link"></i></span> manifest属性在Android Q设备上启用应用程序的新行为，即使您的应用程序的目标是Android 9或更低。</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">manifest</span> <span class="attr">...</span> &gt;</span></span><br><span class="line">  <span class="comment">&lt;!--在目标版本为 Android Q 的应用程序上这个属性值默认情况下为 false --&gt;</span></span><br><span class="line">  <span class="comment">&lt;!-- This attribute is "false" by default on apps targeting Android Q. --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">application</span> <span class="attr">android:requestLegacyExternalStorage</span>=<span class="string">"true"</span> <span class="attr">...</span> &gt;</span></span><br><span class="line">    ...</span><br><span class="line">  <span class="tag">&lt;/<span class="name">application</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">manifest</span>&gt;</span></span><br></pre></td></tr></table></figure><p>2、Android Q继续使用<strong>READ_EXTERNAL_STORAGE</strong>和<strong>WRITE_EXTERNAL_STORAGE</strong>权限，这两个权限对应于面向存储用户的运行时权限。<br>3、早期测试版本中引入的特定于媒体集合的权限，现<strong>已过时</strong></p><blockquote><ul><li><del>READ_MEDIA_IMAGES</del></li><li><del>READ_MEDIA_AUDIO</del> </li><li><del>READ_MEDIA_VIDEO</del></li></ul></blockquote><h2 id="更多变化和使用参见官方文档"><a href="#更多变化和使用参见官方文档" class="headerlink" title="更多变化和使用参见官方文档"></a>更多变化和使用参见官方文档</h2><h1 id="影响"><a href="#影响" class="headerlink" title="影响"></a>影响</h1><p>这些更改会影响您的应用保存和访问外部存储上的文件的方式。</p><p><img alt="android_q_file_access.png" data-src="/images/android_q_file_access.png"></p><h1 id="沙箱独立存储应用私有文件"><a href="#沙箱独立存储应用私有文件" class="headerlink" title="沙箱独立存储应用私有文件"></a>沙箱独立存储应用私有文件</h1><p>Android Q 为每一个应用在外部存储设备内采用了<code>沙箱独立存储</code>。比如<code>/sdcard</code>, 没有其他应用程序能够直接访问您应用程序沙箱内的文件，因为对于您的应用程序来说这些文件是私有的，您不再需要任何权限去访问和保存您自己外部存储中的文件，这一变化使维护用户文件的隐私变得更容易，并有助于减少应用程序所需的权限数量。</p><p><strong>【注意】如果用户手动卸载了应用程序，沙箱内的私有文件也会被清理</strong></p><p>通过<code>Context.getExternalFilesDir()</code>返回的位置是在外部存储上存储文件的最佳位置。因为这个位置在所有Android版本上的行为都是一致的。使用此方法时，请传入与要创建或打开的文件类型对应的媒体环境，比如说，访问或保存应用程序私有图片，调用<code>Context.getExternalFilesDir(Environment.DIRECTORY_PICTURES)</code></p><h1 id="分享媒体文件集"><a href="#分享媒体文件集" class="headerlink" title="分享媒体文件集"></a>分享媒体文件集</h1><p>如果您的应用程序创建的文件属于用户，用户希望在当应用程序被卸载之后这些文件能够被保留，然后保存到一个公共的媒体集，也称为共享集合。共享集合包括：<strong>图片&amp;视频、音乐以及下载</strong></p><h2 id="查看其他应用程序文件的权限"><a href="#查看其他应用程序文件的权限" class="headerlink" title="查看其他应用程序文件的权限"></a>查看其他应用程序文件的权限</h2><p>在这些共享集合中您的应用程序为了创建和变更它自己的文件不需要请求任何的权限。如果您的应用需要去创建和变更其他应用程序创建的文件，它必须首先要请求适当的权限</p><blockquote><ul><li>在<strong>图片&amp;视频</strong>共享集合中去访问其他应用的文件需要请求<code>READ_MEDIA_IMAGES</code>或者 <code>READ_MEDIA_VIDEO</code>权限，依赖您的应用程序需要去访问的文件类型</li></ul></blockquote><blockquote><ul><li>在<strong>音乐</strong>共享集合中去访问其他应用的文件需要请求<code>READ_MEDIA_AUDIO</code>权限</li></ul></blockquote><p>【注意】这里没有访问<strong>下载</strong>共享集合的权限。您的应用程序能够在这个集合里访问它自己的文件，对于访问这个集合里其他应用程序的文件，您必须使用系统文件选择器应用程序允许用户去选择一个文件</p><p>【注意】如果您的应用使用了<span class="exturl" data-url="aHR0cHM6Ly9kZXZlbG9wZXIuYW5kcm9pZC5nb29nbGUuY24vZ3VpZGUvdG9waWNzL3Byb3ZpZGVycy9kb2N1bWVudC1wcm92aWRlcg==" title="https://developer.android.google.cn/guide/topics/providers/document-provider">Storage Access Framework(存储访问框架)<i class="fa fa-external-link"></i></span>,它不需要去请求这些独立的媒体权限</p><h2 id="访问共享集合"><a href="#访问共享集合" class="headerlink" title="访问共享集合"></a>访问共享集合</h2><p>请求必要的权限之后，您的应用程序使用<code>MediaStore</code>API 访问这些集合</p><blockquote><ul><li><strong>图片 &amp; 视频</strong> 共享集合 —— 使用<code>MediaStore.Images</code>或<code>MediaStore.Video</code></li><li><strong>音乐</strong> 共享集合 —— 使用<code>MediaStore.Audio</code></li><li><strong>下载</strong> 共享集合 —— 使用<code>MediaStore.Downloads</code><br>【警告】对于新安装在Android Q上的应用程序，调用<code>getExternalStoragePublicDirectory</code>,只提供对应用程序存储在其隔离存储沙箱中的文件的访问。保持对其他应用程序文件的访问权限，更新应用程序的逻辑，使用<code>MediaStore</code>代替</li></ul></blockquote><h2 id="保留应用程序在共享集合中的文件"><a href="#保留应用程序在共享集合中的文件" class="headerlink" title="保留应用程序在共享集合中的文件"></a>保留应用程序在共享集合中的文件</h2><p>默认情况下，当用户卸载了您的应用程序，Android Q 会清理您保存在沙箱中的文件。当您应用程序被卸载时对于保留这些文件，使用<span class="exturl" data-url="aHR0cHM6Ly9kZXZlbG9wZXIuYW5kcm9pZC5nb29nbGUuY24vZ3VpZGUvdG9waWNzL3Byb3ZpZGVycy9kb2N1bWVudC1wcm92aWRlcg==" title="https://developer.android.google.cn/guide/topics/providers/document-provider">Storage Access Framework(存储访问框架)<i class="fa fa-external-link"></i></span>或者保存到一个共享集合。</p><p>要保留文件到共享集合，请在相关的MediaStore集合中插入新行，并按以下方式填充其列</p><blockquote><ul><li>最低限度，为<code>DISPLAY_NAME</code>和<code>MIME_TYPE</code>列提供值</li><li>可选性，您能够使用<code>PRIMARY_DIRECTORY</code>和<code>SECONDARY_DIRECTORY</code>列影响文件放置在磁盘上的位置。</li><li>不定义DATA列，这样，平台可以灵活地将文件保存在您的沙箱之外。</li></ul></blockquote><p>插入之后，您能够使用像<code>ContentResolver.openFileDescriptor()</code>读写数据到新创建的文件</p><p>如果用户在之后重新安装了您的应用，您的应用程序不会访问这些文件，除非它执行以下操作之一：</p><blockquote><ul><li>请求相应的集合权限</li><li>从存储访问框架向用户发送请求。<br>这种情况类似于应用程序尝试访问其他应用程序文件的情况。</li></ul></blockquote><h1 id="照片的特殊注意事项"><a href="#照片的特殊注意事项" class="headerlink" title="照片的特殊注意事项"></a>照片的特殊注意事项</h1><p>Android Q 添加了几个增强功能，让用户更好的控制在外部存储上他们照片的访问</p><h2 id="访问照片的位置"><a href="#访问照片的位置" class="headerlink" title="访问照片的位置"></a>访问照片的位置</h2><p>有一些照片在它们Exif元数据中包含了位置信息，允许用户查看照片的拍摄地。因为这些位置信息是敏感的，Android Q 默认情况下重新编辑了这些信息。这个位置信息的限制不同于适用于相机特性的限制。</p><p>【注意】如果您的应用程序是用户默认的照片管理应用程序，平台将会自动给予您应用程序访问照片中的位置信息。</p><p>如果您的应用程序需要访问一个照片的位置，需要完成如下步骤</p><p>1.添加新的权限<code>ACCESS_MEDIA_LOCATION</code>到您应用程序的清单中<br>2.从您的MediaStore对象，调用setRequireOriginal()，传入照片的URI</p><h2 id="展示用户图库照片"><a href="#展示用户图库照片" class="headerlink" title="展示用户图库照片"></a>展示用户图库照片</h2><p>如果您的应用程序是一个相机应用，它无法直接访问保存在<strong>图片&amp;视频</strong>共享集合中的照片，除非它是默认的照片管理应用，要将用户引导到图库应用程序，请使用<code>ACTION_REVIEW</code> intent意图。</p><h1 id="处理其他应用程序的文件"><a href="#处理其他应用程序的文件" class="headerlink" title="处理其他应用程序的文件"></a>处理其他应用程序的文件</h1><p>这个环节解释应用程序如何与存储在共享集合中的其他应用程序的文件进行交互。</p><h2 id="访问其他应用创建的文件"><a href="#访问其他应用创建的文件" class="headerlink" title="访问其他应用创建的文件"></a>访问其他应用创建的文件</h2><p>在一个外部存储设备上，访问和读取其他应用程序的已经保存的媒体文件，分为以下几步：</p><p>1.请求必要的权限，基于包含您要访问的文件的共享集合。<br>2.使用<code>ContentResolver</code>对象去查找并打开文件</p><p>【注意】<strong>ContentResolver</strong>类包含了一个新的方法，<strong>loadThumbnail()</strong>,提供给您应用预览文件。最好先调用<strong>loadThumbnail()</strong>,以便用户能够查看媒体文件快照无需您的应用程序加载所有文件本身。这个方法还允许更灵活的请求，比如请求特殊维度和取消请求的能力。</p><h2 id="写入其他应用创建的文件"><a href="#写入其他应用创建的文件" class="headerlink" title="写入其他应用创建的文件"></a>写入其他应用创建的文件</h2><p>通过保存文件到共享集合，您的应用程序将成为该文件的所有者。通常情况下，您的应用程序能够写入到共享集合的文件，除非您是这个文件的所有者。如果您的应用程序有正确的<span class="exturl" data-url="aHR0cHM6Ly9kZXZlbG9wZXIuYW5kcm9pZC5nb29nbGUuY24vcHJldmlldy9mZWF0dXJlcyNyb2xlcw==" title="https://developer.android.google.cn/preview/features#roles">角色<i class="fa fa-external-link"></i></span>分配给它，您也能够写入到其他应用程序自己的文件：</p><blockquote><ul><li>如果您的应用程序是用户默认的照片管理应用，你能够变更其他应用保存在<strong>图片&amp;视频</strong>共享集合里的图片文件</li><li>如果您的应用程序是用户默认的音乐应用，您能够变更其他应用程序保存在<strong>音乐</strong>共享集合里的音频文件</li></ul></blockquote><p>【注意】您的应用程序应该保持功能，无论它是默认的照片管理器或音乐应用程序。</p><p>要变更其他应用保存在外部存储设备中原始的媒体文件，完成如下步骤之一：</p><blockquote><ul><li>通过<span class="exturl" data-url="aHR0cHM6Ly9kZXZlbG9wZXIuYW5kcm9pZC5nb29nbGUuY24vcHJldmlldy9mZWF0dXJlcy9yb2xlcyNjaGVjay1kZWZhdWx0LWFwcA==" title="https://developer.android.google.cn/preview/features/roles#check-default-app">角色指南<i class="fa fa-external-link"></i></span>检查您的应用是否是默认的图片管理应用或者默认的音乐管理应用</li><li>使用<code>ContentResolver</code>对象查找文件并变更它，当执行编辑/变更操作，捕获<code>RecoverableSecurityException</code>以便您能够请求用户授予您写入的特殊项</li></ul></blockquote><h1 id="访问特殊文件"><a href="#访问特殊文件" class="headerlink" title="访问特殊文件"></a>访问特殊文件</h1><p>在一些使用情况中，您的应用或许需要打开或者创建权限，它无需要有访问权限：</p><blockquote><ul><li>在照片编辑应用程序中，打开一张图片。</li><li>在商业产品应用中，保存文本文档到本地让用户选择</li></ul></blockquote><p>允许用户去选择特殊文件打开，或者选择特殊位置保存文件，对于这些解决方案，使用<span class="exturl" data-url="aHR0cHM6Ly9kZXZlbG9wZXIuYW5kcm9pZC5nb29nbGUuY24vZ3VpZGUvdG9waWNzL3Byb3ZpZGVycy9kb2N1bWVudC1wcm92aWRlcg==" title="https://developer.android.google.cn/guide/topics/providers/document-provider">存储访问框架<i class="fa fa-external-link"></i></span></p><h1 id="配套的app文件共享"><a href="#配套的app文件共享" class="headerlink" title="配套的app文件共享"></a>配套的app文件共享</h1><p>如果您管理一套需要互相访问彼此文件的应用程序，使用<code>content://</code>URIs,我们已经<span class="exturl" data-url="aHR0cHM6Ly9kZXZlbG9wZXIuYW5kcm9pZC5nb29nbGUuY24vdG9waWMvc2VjdXJpdHkvYmVzdC1wcmFjdGljZXMjcGVybWlzc2lvbnMtc2hhcmUtZGF0YQ==" title="https://developer.android.google.cn/topic/security/best-practices#permissions-share-data">建议作为安全性最佳实践。<i class="fa fa-external-link"></i></span></p><p>更多信息，请查阅文档如何<span class="exturl" data-url="aHR0cHM6Ly9kZXZlbG9wZXIuYW5kcm9pZC5nb29nbGUuY24vdHJhaW5pbmcvc2VjdXJlLWZpbGUtc2hhcmluZy9zZXR1cC1zaGFyaW5n" title="https://developer.android.google.cn/training/secure-file-sharing/setup-sharing">设置文件共享<i class="fa fa-external-link"></i></span></p><h1 id="升级设备上以前安装的应用程序的兼容性模式"><a href="#升级设备上以前安装的应用程序的兼容性模式" class="headerlink" title="升级设备上以前安装的应用程序的兼容性模式"></a>升级设备上以前安装的应用程序的兼容性模式</h1><p>限制外部存储中的文件访问应用于应用程序target目标版本是Android Q,或者运行在Android Q设备上最新安装的应用</p><p>当满足如下条件时，系统会将您的应用文件访问设置为兼容模式:</p><blockquote><ul><li>target version  &lt; = Android 9 (API 28)</li><li>您安装在设备上的应用从[ Android 9 ] –&gt; 升级到—&gt; [ Android Q ]</li></ul></blockquote><p>当您的应用程序进入兼容模式，以下文件访问行为适用：</p><blockquote><ul><li>您的应用程序能够访问<code>MediaStore</code>集合内所有的文件存储，甚至是您的应用程序没有创建的文件。</li><li>面向用户的是允许或拒绝您的应用程序访问整个外部存储的权限，而不是像<strong>图片&amp;视频</strong>或者<strong>音乐</strong>这样单独的共享集合</li></ul></blockquote><p>这个兼容模式直到您首次卸载您的应用程序仍然有效</p><p>【注意】如果您的应用程序之后在同一设备重新安装，兼容模式不会重新被激活</p><h1 id="识别特殊的外部存储设备"><a href="#识别特殊的外部存储设备" class="headerlink" title="识别特殊的外部存储设备"></a>识别特殊的外部存储设备</h1><p>SDK &lt; = Android 9 (API 28) —— 在所有的外部存储设备上的所有文件都显示在当个<code>&quot;external&quot;</code>(外部)卷标下</p><p>Android Q, 给每一个外部存储设备一个不一样的卷标，这意味着系统帮助您有效地组织和索引内容，它可以让您控制新内容的存储位置</p><p>【注意】主外部存储设备始终使用卷名“external”。</p><p>对于外部存储内唯一地标识特殊文件，您必须使用卷标名和ID一起。比如说，一个文件在主存储设备将是<code>content://media/external/images/media/12</code>，但是二级存储设备上名为FA23-3E92的相应文件将是<code>content://media/FA23-3E92/images/media/12</code></p><p>您能够在特殊的卷上，通过传入卷标名到特殊媒体集访问存储文件。比如说<code>MediaStore.Images.getContentUri()</code></p><h2 id="获取外部存储设备列表"><a href="#获取外部存储设备列表" class="headerlink" title="获取外部存储设备列表"></a>获取外部存储设备列表</h2><p>要获取所有当前可用的卷标名称列表，调用<code>call MediaStore.getAllVolumeNames()</code></p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">val</span> volumeNames: Set&lt;String&gt; = MediaStore.getAllVolumeNames(context)</span><br></pre></td></tr></table></figure><h2 id="设置一个虚拟的外部存储设备"><a href="#设置一个虚拟的外部存储设备" class="headerlink" title="设置一个虚拟的外部存储设备"></a>设置一个虚拟的外部存储设备</h2><p>在没有可移动外部存储的设备上，使用以下命令启用虚拟磁盘以进行测试:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">adb shell sm set-virtual-disk true</span><br></pre></td></tr></table></figure><h1 id="测试行为变化"><a href="#测试行为变化" class="headerlink" title="测试行为变化"></a>测试行为变化</h1><p>为了帮助您使应用程序与此新行为变化兼容，平台提供了多种方法来调整与更改相关的多个参数。</p><h2 id="切换行为更改"><a href="#切换行为更改" class="headerlink" title="切换行为更改"></a>切换行为更改</h2><p>要在Android Q Beta 1中启用此行为更改，请在终端窗口中执行以下命令：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">adb shell sm set-isolated-storage on</span><br></pre></td></tr></table></figure><p>运行此命令后，设备将重新启动。 如果没有，请等一下再尝试再次运行该命令。</p><p>要确认行为变化是否已生效，请使用以下命令：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">adb shell getprop sys.isolated_storage_snapshot</span><br></pre></td></tr></table></figure><h1 id="测试兼容模式行为"><a href="#测试兼容模式行为" class="headerlink" title="测试兼容模式行为"></a>测试兼容模式行为</h1><p>测试应用程序时，可以通过在终端窗口中运行以下命令来启用外部文件存储访问的兼容性模式：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">adb shell cmd appops set your-package-name android:legacy_storage allow</span><br></pre></td></tr></table></figure><p>要禁用兼容模式，请在Android Q上卸载并重新安装您的应用，或在终端窗口中运行以下命令：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">adb shell cmd appops set your-package-name android:legacy_storage default</span><br></pre></td></tr></table></figure><h1 id="将外部存储作为文件管理器浏览"><a href="#将外部存储作为文件管理器浏览" class="headerlink" title="将外部存储作为文件管理器浏览"></a>将外部存储作为文件管理器浏览</h1><p>获得对外部存储中的目录的广泛访问,就像文件管理器应用程序可能做的那样,使用<code>ACTION_OPEN_DOCUMENT_TREE</code>意图，比如说，在GitHub上查看<span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL2dvb2dsZXNhbXBsZXMvYW5kcm9pZC1EaXJlY3RvcnlTZWxlY3Rpb24=" title="https://github.com/googlesamples/android-DirectorySelection">android-DirectorySelection<i class="fa fa-external-link"></i></span>示例。</p><p>【警告】在Android Q中不推荐使用<strong>StorageVolume</strong>类中的<strong>createAccessIntent（）</strong> 方法，因此不应使用此方法浏览外部存储设备。 如果您这样做，运行Android Q设备的用户将无法在您的应用中查看保存在外部存储中的文件。</p><h1 id="测试示例"><a href="#测试示例" class="headerlink" title="测试示例"></a>测试示例</h1><h2 id="文件存储"><a href="#文件存储" class="headerlink" title="文件存储"></a>文件存储</h2><h3 id="测试-1-——-默认方式-getExternalStorageDirectory"><a href="#测试-1-——-默认方式-getExternalStorageDirectory" class="headerlink" title="测试 1 —— 默认方式 getExternalStorageDirectory"></a>测试 1 —— 默认方式 getExternalStorageDirectory</h3><p>定义一个Activity——<code>FileStorageActivity</code>，然后定义如下读写方法，通过界面上两个按钮触发，进行默认getExternalStorageDirectory路径下文件的读写测试，运行在Android Q 设备也无需在清单文件定义<code>READ_EXTERNAL_STORAGE</code> 和<code>WRITE_EXTERNAL_STORAGE</code>权限</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="function"><span class="keyword">fun</span> <span class="title">writeMethod</span><span class="params">()</span></span> &#123;</span><br><span class="line">        <span class="keyword">val</span> file = File(Environment.getExternalStorageDirectory(), <span class="string">"测试Android Q文件.txt"</span>);</span><br><span class="line">        Log.d(tag, <span class="string">"file.exists():<span class="subst">$&#123;file.exists()&#125;</span> ， file.getAbsolutePath(): <span class="subst">$&#123;file.absolutePath&#125;</span>"</span>);</span><br><span class="line">        <span class="keyword">if</span> (file.exists()) &#123;</span><br><span class="line">            file.delete();</span><br><span class="line">            file.createNewFile();</span><br><span class="line">        &#125;</span><br><span class="line">        Toast.makeText(<span class="keyword">this</span><span class="symbol">@FileStorageActivity</span>, <span class="string">"SD卡目录下创建文件成功..."</span>, Toast.LENGTH_LONG).show();</span><br><span class="line">        <span class="keyword">val</span> fw = FileWriter(file);</span><br><span class="line">        fw.write(<span class="string">"我是测试Android Q文件写入的内容"</span>);</span><br><span class="line">        fw.close()</span><br><span class="line">        Toast.makeText(<span class="keyword">this</span><span class="symbol">@FileStorageActivity</span>, <span class="string">"SD卡写入内容完成..."</span>, Toast.LENGTH_LONG).show()</span><br><span class="line">        Log.d(tag, <span class="string">"SD卡写入内容完成..."</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="function"><span class="keyword">fun</span> <span class="title">readMethod</span><span class="params">()</span></span> &#123;</span><br><span class="line">        <span class="keyword">val</span> fr = FileReader(Environment.getExternalStorageDirectory().path+<span class="string">"/测试Android Q文件.txt"</span>);</span><br><span class="line">        <span class="keyword">val</span> r = BufferedReader(fr);</span><br><span class="line">        <span class="keyword">val</span> result = r.readLine();</span><br><span class="line">        Log.d(tag, <span class="string">"SD卡文件里面的内容:<span class="variable">$result</span>"</span>)</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>输出日志：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">2019-03-17 14:06:46.117 31140-31140/com.xw.androidqtest D/FileStorageActivity: file.exists():false ， file.getAbsolutePath(): /storage/emulated/0/测试Android Q文件.txt</span><br><span class="line">2019-03-17 14:06:46.130 31140-31140/com.xw.androidqtest D/FileStorageActivity: SD卡写入内容完成...</span><br><span class="line">2019-03-17 14:06:50.346 31140-31140/com.xw.androidqtest D/FileStorageActivity: SD卡文件里面的内容:我是测试Android Q文件写入的内容</span><br></pre></td></tr></table></figure><p>查看/sdcard根下的文件，发现没有该文件，被系统自动存放在如下沙箱中</p><p><img alt="android-q-beta-file-test-1.png" data-src="/images/android-q-beta-file-test-1.png"></p><h3 id="测试-2-——-推荐方式-Context-getExternalFilesDir"><a href="#测试-2-——-推荐方式-Context-getExternalFilesDir" class="headerlink" title="测试 2 —— 推荐方式 Context.getExternalFilesDir()"></a>测试 2 —— 推荐方式 Context.getExternalFilesDir()</h3><p>测试将文件放入文档目录，传入<code>Environment.DIRECTORY_DOCUMENTS</code>到<code>getExternalFilesDir()</code>方法</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="function"><span class="keyword">fun</span> <span class="title">writeMethod</span><span class="params">()</span></span> &#123;</span><br><span class="line">        <span class="keyword">val</span> context: Context = <span class="keyword">this</span><span class="symbol">@FileStorageActivity</span></span><br><span class="line">        <span class="keyword">val</span> file = File(context.getExternalFilesDir(Environment.DIRECTORY_DOCUMENTS), <span class="string">"测试Android Q文件.txt"</span>);</span><br><span class="line">        Log.d(tag, <span class="string">"file.exists():<span class="subst">$&#123;file.exists()&#125;</span> ， file.getAbsolutePath(): <span class="subst">$&#123;file.absolutePath&#125;</span>"</span>);</span><br><span class="line">        <span class="keyword">if</span> (file.exists()) &#123;</span><br><span class="line">            file.delete();</span><br><span class="line">            file.createNewFile();</span><br><span class="line">        &#125;</span><br><span class="line">        Toast.makeText(<span class="keyword">this</span><span class="symbol">@FileStorageActivity</span>, <span class="string">"SD卡目录下创建文件成功..."</span>, Toast.LENGTH_LONG).show();</span><br><span class="line">        <span class="keyword">val</span> fw = FileWriter(file);</span><br><span class="line">        fw.write(<span class="string">"我是测试Android Q文件写入的内容"</span>);</span><br><span class="line">        fw.close()</span><br><span class="line">        Toast.makeText(<span class="keyword">this</span><span class="symbol">@FileStorageActivity</span>, <span class="string">"SD卡写入内容完成..."</span>, Toast.LENGTH_LONG).show()</span><br><span class="line">        Log.d(tag, <span class="string">"SD卡写入内容完成..."</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="function"><span class="keyword">fun</span> <span class="title">readMethod</span><span class="params">()</span></span> &#123;</span><br><span class="line">        <span class="keyword">val</span> context: Context = <span class="keyword">this</span><span class="symbol">@FileStorageActivity</span></span><br><span class="line">        <span class="keyword">val</span> fr = FileReader(context.getExternalFilesDir(Environment.DIRECTORY_DOCUMENTS).path + <span class="string">"/测试Android Q文件.txt"</span>);</span><br><span class="line">        <span class="keyword">val</span> r = BufferedReader(fr);</span><br><span class="line">        <span class="keyword">val</span> result = r.readLine();</span><br><span class="line">        Log.d(tag, <span class="string">"SD卡文件里面的内容:<span class="variable">$result</span>"</span>)</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>输出日志：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">2019-03-17 14:27:23.423 9511-9511/com.xw.androidqtest D/FileStorageActivity: file.exists():false ， file.getAbsolutePath(): /storage/emulated/0/Android/data/com.xw.androidqtest/files/Documents/测试Android Q文件.txt</span><br><span class="line">2019-03-17 14:27:23.437 9511-9511/com.xw.androidqtest D/FileStorageActivity: SD卡写入内容完成...</span><br><span class="line">2019-03-17 14:27:27.696 9511-9511/com.xw.androidqtest D/FileStorageActivity: SD卡文件里面的内容:我是测试Android Q文件写入的内容</span><br></pre></td></tr></table></figure><p>文件所在位置：</p><p><img alt="android-q-beta-file-test-2.png" data-src="/images/android-q-beta-file-test-2.png"></p><p>更多示例，请参照<strong>以上内容</strong>或<span class="exturl" data-url="aHR0cHM6Ly9kZXZlbG9wZXIuYW5kcm9pZC5nb29nbGUuY24vcHJldmlldy9wcml2YWN5L3Njb3BlZC1zdG9yYWdl" title="https://developer.android.google.cn/preview/privacy/scoped-storage">官方文档<i class="fa fa-external-link"></i></span>, 自行测试</p><hr><p><strong>2019-03-26 更新:</strong></p><p>得到反馈，测试 1 未能在android-10模拟器上复现成功，由于上面的测试我是在pixel 2真机上测试的，对此如下又在模拟器上进行了测试 （本次真机也同时测试了一遍）。</p><p>由于<strong>没有添加</strong>读写权限，在模拟器上运行抛出了异常 —-&gt; (真机没有任何异常)</p><p><img alt="android-q-beta-file-test-3.png" data-src="/images/android-q-beta-file-test-3.png"></p><p><img alt="android-q-beta-file-test-4.png" data-src="/images/android-q-beta-file-test-4.png"></p><p>于是<strong>添加</strong>读写权限，并<strong>动态授权</strong>，模拟器上运行无异常，但是确实写入的文件未能自动放入<strong>/Android/sandbox/com.xw.androidqtest</strong>目录下，位置没变还是在<strong>/storage/emulated/0/</strong>根目录下</p><p><img alt="android-q-beta-file-test-5.png" data-src="/images/android-q-beta-file-test-5.png"></p><p>针对以上的出现的问题，猜想应该是模拟器和真机之间的差异，大家怎么看？ 欢迎大家在评论处留言讨论</p><hr><blockquote><p>本文参考<span class="exturl" data-url="aHR0cHM6Ly9kZXZlbG9wZXIuYW5kcm9pZC5nb29nbGUuY24vcHJldmlldy9wcml2YWN5L3Njb3BlZC1zdG9yYWdl" title="https://developer.android.google.cn/preview/privacy/scoped-storage">官方文档<i class="fa fa-external-link"></i></span>进行简单翻译及示例总结，感谢您的阅读。如有不足，欢迎指正</p></blockquote>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;Android Q 系统, 对应用存储空间访问进行了限制。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;hr&gt;
    
    </summary>
    
      <category term="Android" scheme="https://shoewann0402.github.io/categories/Android/"/>
    
      <category term="Android Q" scheme="https://shoewann0402.github.io/categories/Android/Android-Q/"/>
    
    
      <category term="Android" scheme="https://shoewann0402.github.io/tags/Android/"/>
    
      <category term="Android Q" scheme="https://shoewann0402.github.io/tags/Android-Q/"/>
    
      <category term="Permission" scheme="https://shoewann0402.github.io/tags/Permission/"/>
    
      <category term="scoped" scheme="https://shoewann0402.github.io/tags/scoped/"/>
    
      <category term="sandbox" scheme="https://shoewann0402.github.io/tags/sandbox/"/>
    
      <category term="Shared collections" scheme="https://shoewann0402.github.io/tags/Shared-collections/"/>
    
      <category term="File" scheme="https://shoewann0402.github.io/tags/File/"/>
    
      <category term="external storage" scheme="https://shoewann0402.github.io/tags/external-storage/"/>
    
      <category term="behavior change" scheme="https://shoewann0402.github.io/tags/behavior-change/"/>
    
      <category term="media" scheme="https://shoewann0402.github.io/tags/media/"/>
    
  </entry>
  
  <entry>
    <title>Android Q 后台启动Activity限制</title>
    <link href="https://shoewann0402.github.io/2019/03/16/android-q-beta-background-activity-starts/"/>
    <id>https://shoewann0402.github.io/2019/03/16/android-q-beta-background-activity-starts/</id>
    <published>2019-03-16T02:40:22.000Z</published>
    <updated>2019-07-19T16:43:03.124Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>本文针对Android Q 后台启动Activity简单总结</p></blockquote><hr><a id="more"></a><blockquote><p><em>当前文章首次编辑于Android Q Beta 1 版本，可能部分内容会在后期版本上发生变化，仅供参考</em></p></blockquote><p>Android Q对应用程序何时可以启动Activity进行了限制。</p><h1 id="变化"><a href="#变化" class="headerlink" title="变化"></a>变化</h1><p>这种行为的改变有助于减少用户的干扰，并让用户更好地控制屏幕上显示的内容。尤其是运行在Android Q上的应用程序，只有满足以下一个或多个条件才能启动Activity:</p><blockquote><ul><li>应用程序有一个可见的窗口，比如在前台一个的Activity。</li><li>一个在前台不同的应用程序发送了属于该应用程序的一个PendingIntent， 示例包括自定义选项卡提供者发送菜单项待定意图。</li><li>系统发送了一个属于该应用程序的PendingIntent，比如点击一条通知，只有应用程序可以启动UI的待处理意图才可以免除。</li><li>系统向应用程序发送一个广播，如<code>SECRET_CODE_ACTION</code>到应用程序。只有特定的广播，应用程序预计在UI启动时才会被豁免。</li></ul></blockquote><p>【注】出于Activity启动的目的，前台服务不将应用程序限定在前台。</p><h1 id="影响"><a href="#影响" class="headerlink" title="影响"></a>影响</h1><p>这个行为变化影响到所有运行在Android Q上的应用程序，即使是那些target版本是Android 9(API 28) 或者更低的，即使您的应用程序的target版本是Android 9或更低版本，并且最初安装在运行Android 9或更低版本的设备上，在设备升级到Android Q之后，行为更改仍然会生效。</p><p>但是，只要您的应用程序作为用户交互的直接结果启动Actvity，您的应用程序就很可能不会受到此更改的影响。</p><h1 id="警告信息"><a href="#警告信息" class="headerlink" title="警告信息"></a>警告信息</h1><p>在Beta 1中，如果你的应用程序运行在Android Q上，并试图从后台启动某个活动，平台允许该活动启动，但它会向logcat发送一条警告消息，并显示以下警告toast消息:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">This background activity start from package-name will be blocked in future Q builds.</span><br></pre></td></tr></table></figure><p>这则消息意思是: <strong>该后台activity从某包下启动，将在之后构建的Q版本中被屏蔽</strong></p><p>Android Q中与在后台启动Activity相关的限制与设备进入屏幕固定状态后系统阻止Activity启动的方式类似。</p><h1 id="改进方式"><a href="#改进方式" class="headerlink" title="改进方式"></a>改进方式</h1><p>几乎在所有情况下，后台应用程序都应创建通知，以便向用户提供信息，而不是直接启动Activity。</p><h1 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h1><h2 id="复现警告"><a href="#复现警告" class="headerlink" title="复现警告"></a>复现警告</h2><p>为了测试复现警告消息，这里定义<code>MainActivity</code>和<code>BackgroundActivity</code>,在<code>MainActivity</code>的<code>onPause</code>方法中如下实现</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">override</span> <span class="function"><span class="keyword">fun</span> <span class="title">onPause</span><span class="params">()</span></span> &#123;</span><br><span class="line">        <span class="keyword">super</span>.onPause()</span><br><span class="line">        <span class="keyword">val</span> timer = Timer()</span><br><span class="line">        <span class="keyword">val</span> timerTask = <span class="keyword">object</span> : TimerTask() &#123;</span><br><span class="line">            <span class="keyword">override</span> <span class="function"><span class="keyword">fun</span> <span class="title">run</span><span class="params">()</span></span> &#123;</span><br><span class="line">                startActivity(Intent(<span class="keyword">this</span><span class="symbol">@MainActivity</span>,BackgroundActivity::<span class="class"><span class="keyword">class</span>.<span class="title">java</span>))</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        timer.schedule(timerTask, <span class="number">5000</span>)</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p><strong>MainActivity</strong>启动之后，按Home键切换到Launcher，此时<strong>MainActivity</strong>将会执行<code>onPause</code>方法，在此方法中开启了一个定时器，模拟后台启动Activity</p><p>然后后台输出如下日志</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">2019-03-16 10:03:10.599 1192-7709/? I/ActivityTaskManager: START u0 &#123;cmp=com.xw.androidqtest/.BackgroundActivity&#125; from uid 10505</span><br><span class="line">2019-03-16 10:03:10.600 1192-7709/? W/ActivityTaskManager: Background activity start [callingPackage: com.xw.androidqtest; callingUid: 10505; isCallingUidForeground: false; isCallingUidPersistentSystemProcess: false; realCallingUid: 10505; isRealCallingUidForeground: false; isRealCallingUidPersistentSystemProcess: false; originatingPendingIntent: null; isBgStartWhitelisted: false; intent: Intent &#123; cmp=com.xw.androidqtest/.BackgroundActivity &#125;; callerApp: ProcessRecord&#123;b6f89ff 29017:com.xw.androidqtest/u0a505&#125;]</span><br><span class="line">2019-03-16 10:03:10.619 29017-29017/com.xw.androidqtest W/ActivityThread: handleWindowVisibility: no activity for token android.os.BinderProxy@8611b07</span><br><span class="line">2019-03-16 10:03:10.700 1192-1238/? I/ActivityTaskManager: Displayed com.xw.androidqtest/.BackgroundActivity: +96ms</span><br></pre></td></tr></table></figure><p>界面弹出了警告消息</p><p><img alt="warningMsg" data-src="/images/warningMsg.png"></p><p>参考<span class="exturl" data-url="aHR0cHM6Ly9kZXZlbG9wZXIuYW5kcm9pZC5nb29nbGUuY24vcHJldmlldy9wcml2YWN5L2JhY2tncm91bmQtYWN0aXZpdHktc3RhcnQ=" title="https://developer.android.google.cn/preview/privacy/background-activity-start">官方文档<i class="fa fa-external-link"></i></span>，做如下处理</p><h2 id="处理"><a href="#处理" class="headerlink" title="处理"></a>处理</h2><p>创建<strong>前台服务</strong>类，并在<code>onStartCommand</code>方法中创建一个<strong>前台通知</strong>,</p><p>以下是<strong>完整代码</strong></p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br></pre></td><td class="code"><pre><span class="line"> <span class="keyword">package</span> com.xw.androidqtest</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> android.app.*</span><br><span class="line"><span class="keyword">import</span> android.content.Context</span><br><span class="line"><span class="keyword">import</span> android.content.Intent</span><br><span class="line"><span class="keyword">import</span> android.graphics.Color</span><br><span class="line"><span class="keyword">import</span> android.os.Build</span><br><span class="line"><span class="keyword">import</span> android.os.IBinder</span><br><span class="line"><span class="keyword">import</span> android.util.Log</span><br><span class="line"><span class="keyword">import</span> androidx.<span class="keyword">annotation</span>.RequiresApi</span><br><span class="line"><span class="keyword">import</span> androidx.core.app.NotificationCompat</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ForegroundService</span> : <span class="type">Service</span></span>() &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">val</span> tag: String = ForegroundService::<span class="class"><span class="keyword">class</span>.<span class="title">java</span>.<span class="title">simpleName</span></span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">override</span> <span class="function"><span class="keyword">fun</span> <span class="title">onBind</span><span class="params">(intent: <span class="type">Intent</span>)</span></span>: IBinder? &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">override</span> <span class="function"><span class="keyword">fun</span> <span class="title">onCreate</span><span class="params">()</span></span> &#123;</span><br><span class="line">        <span class="keyword">super</span>.onCreate()</span><br><span class="line">        Log.d(tag, <span class="string">"ForegroundService OnCreate called"</span>)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">override</span> <span class="function"><span class="keyword">fun</span> <span class="title">onStartCommand</span><span class="params">(intent: <span class="type">Intent</span>?, flags: <span class="type">Int</span>, startId: <span class="type">Int</span>)</span></span>: <span class="built_in">Int</span> &#123;</span><br><span class="line">        Log.d(tag, <span class="string">"ForegroundService onStartCommand called"</span>)</span><br><span class="line"></span><br><span class="line">        createNotificationChannel(<span class="string">"channelId"</span>, <span class="string">"channelName"</span>)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">val</span> fullScreenIntent = Intent(<span class="keyword">this</span>, BackgroundActivity::<span class="class"><span class="keyword">class</span>.<span class="title">java</span>)</span></span><br><span class="line">        <span class="keyword">val</span> fullScreenPendingIntent = PendingIntent.getActivity(</span><br><span class="line">            <span class="keyword">this</span>, <span class="number">0</span>,</span><br><span class="line">            fullScreenIntent, PendingIntent.FLAG_UPDATE_CURRENT</span><br><span class="line">        )</span><br><span class="line"></span><br><span class="line">        <span class="keyword">val</span> notificationBuilder = NotificationCompat.Builder(<span class="keyword">this</span>, <span class="string">"channelId"</span>)</span><br><span class="line">            .setSmallIcon(R.mipmap.ic_launcher_round)</span><br><span class="line">            .setContentTitle(getString(R.string.app_name))</span><br><span class="line">            .setContentText(<span class="string">"启动BackgroundActivity"</span>)</span><br><span class="line">            .setPriority(NotificationCompat.PRIORITY_HIGH)</span><br><span class="line">            .setCategory(NotificationCompat.CATEGORY_CALL)</span><br><span class="line"></span><br><span class="line">            <span class="comment">// Use a full-screen intent only for the highest-priority alerts where you</span></span><br><span class="line">            <span class="comment">// have an associated activity that you would like to launch after the user</span></span><br><span class="line">            <span class="comment">// interacts with the notification. Also, if your app targets Android Q, you</span></span><br><span class="line">            <span class="comment">// need to request the USE_FULL_SCREEN_INTENT permission in order for the</span></span><br><span class="line">            <span class="comment">// platform to invoke this notification.</span></span><br><span class="line">            .setFullScreenIntent(fullScreenPendingIntent, <span class="literal">true</span>)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">val</span> incomingCallNotification = notificationBuilder.build()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="comment">// The integer ID that you give to startForeground() must not be 0.</span></span><br><span class="line">        startForeground(<span class="number">1</span>, incomingCallNotification)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> START_STICKY</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="meta">@RequiresApi(Build.VERSION_CODES.O)</span></span><br><span class="line">    <span class="keyword">private</span> <span class="function"><span class="keyword">fun</span> <span class="title">createNotificationChannel</span><span class="params">(channelId: <span class="type">String</span>, channelName: <span class="type">String</span>)</span></span>: String &#123;</span><br><span class="line">        <span class="keyword">val</span> channel = NotificationChannel(</span><br><span class="line">            channelId,</span><br><span class="line">            channelName, NotificationManager.IMPORTANCE_NONE</span><br><span class="line">        )</span><br><span class="line">        channel.lightColor = Color.BLUE</span><br><span class="line">        channel.lockscreenVisibility = Notification.VISIBILITY_PRIVATE</span><br><span class="line">        <span class="keyword">val</span> service = getSystemService(Context.NOTIFICATION_SERVICE) <span class="keyword">as</span> NotificationManager</span><br><span class="line">        service.createNotificationChannel(channel)</span><br><span class="line">        <span class="keyword">return</span> channelId</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">override</span> <span class="function"><span class="keyword">fun</span> <span class="title">onDestroy</span><span class="params">()</span></span> &#123;</span><br><span class="line">        <span class="keyword">super</span>.onDestroy()</span><br><span class="line">        stopForeground(<span class="literal">true</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>清单文件</code>注册权限</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">uses-permission</span> <span class="attr">android:name</span>=<span class="string">"android.permission.FOREGROUND_SERVICE"</span>/&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- New Android Q permission --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">uses-permission</span> <span class="attr">android:name</span>=<span class="string">"android.permission.USE_FULL_SCREEN_INTENT"</span>/&gt;</span></span><br></pre></td></tr></table></figure><p>最后更新<code>onPause</code>方法</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">override</span> <span class="function"><span class="keyword">fun</span> <span class="title">onPause</span><span class="params">()</span></span> &#123;</span><br><span class="line">        <span class="keyword">super</span>.onPause()</span><br><span class="line">        <span class="keyword">val</span> timer = Timer()</span><br><span class="line">        <span class="keyword">val</span> timerTask = <span class="keyword">object</span> : TimerTask() &#123;</span><br><span class="line">            <span class="keyword">override</span> <span class="function"><span class="keyword">fun</span> <span class="title">run</span><span class="params">()</span></span> &#123;</span><br><span class="line">                startService(Intent(<span class="keyword">this</span><span class="symbol">@MainActivity</span>, ForegroundService::<span class="class"><span class="keyword">class</span>.<span class="title">java</span>))</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        timer.schedule(timerTask, <span class="number">5000</span>)</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>运行输出日志：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">2019-03-16 10:25:22.308 9112-9112/com.xw.androidqtest D/ForegroundService: ForegroundService OnCreate called</span><br><span class="line">2019-03-16 10:25:22.309 9112-9112/com.xw.androidqtest D/ForegroundService: ForegroundService onStartCommand called</span><br></pre></td></tr></table></figure><p>通知栏收到了发出的通知</p><p><img alt="warningMsgFix" data-src="/images/warningMsgFix.png"></p><p>点击通知进入了需要后台启动的<code>BackgroundActivity</code><br>日志内容 ：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">2019-03-16 10:29:04.074 1192-4994/? I/ActivityTaskManager: START u0 &#123;cmp=com.xw.androidqtest/.BackgroundActivity&#125; from uid 10505</span><br><span class="line">2019-03-16 10:29:04.074 1192-4994/? W/ActivityTaskManager: startActivity called from non-Activity context; forcing Intent.FLAG_ACTIVITY_NEW_TASK for: Intent &#123; cmp=com.xw.androidqtest/.BackgroundActivity &#125;</span><br><span class="line">2019-03-16 10:29:04.082 9112-9112/com.xw.androidqtest W/ActivityThread: handleWindowVisibility: no activity for token android.os.BinderProxy@46d3c48</span><br><span class="line">2019-03-16 10:29:04.084 1192-1251/? W/WindowManager: TaskSnapshotSurface.create: Failed to find main window for token=AppWindowToken&#123;6b40830 token=Token&#123;fb2f173 ActivityRecord&#123;7d079e2 u0 com.xw.androidqtest/.BackgroundActivity t800&#125;&#125;&#125;</span><br><span class="line">2019-03-16 10:29:04.143 1192-1238/? I/ActivityTaskManager: Displayed com.xw.androidqtest/.BackgroundActivity: +69ms</span><br></pre></td></tr></table></figure><h1 id="开启行为变化"><a href="#开启行为变化" class="headerlink" title="开启行为变化"></a>开启行为变化</h1><p>即使这种行为变化在默认情况下不会在Android Q Beta 1中生效，您也可以通过完成以下任务之一来模拟这种行为变化:</p><blockquote><ul><li>导航到“设置&gt;开发人员选项”，并禁用“允许后台活动启动”选项</li><li>在终端中执行如下命令</li></ul></blockquote><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">adb shell settings put global background_activity_starts_enabled <span class="number">0</span></span><br></pre></td></tr></table></figure><h2 id="模拟测试"><a href="#模拟测试" class="headerlink" title="模拟测试"></a>模拟测试</h2><p>将代码还原成直接调用从后台启动Activity，设置好如上所叙述的操作，测试<br>效果图</p><p><img alt="warningQMsg" data-src="/images/warningQMsg.png"></p><p>与文章一开始测试不同之处就是: <strong>目前在Q Beta1上默认还是会启动起后台的Activity展示并显示toast消息，这次测试模拟了最终完全屏蔽的情况，不会调起后台的Activity</strong></p><blockquote><p>本文参考<span class="exturl" data-url="aHR0cHM6Ly9kZXZlbG9wZXIuYW5kcm9pZC5nb29nbGUuY24vcHJldmlldy9wcml2YWN5L2JhY2tncm91bmQtYWN0aXZpdHktc3RhcnQ=" title="https://developer.android.google.cn/preview/privacy/background-activity-start">官方文档<i class="fa fa-external-link"></i></span>进行简单总结，感谢您的阅读。如有不足，欢迎指正</p></blockquote>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;本文针对Android Q 后台启动Activity简单总结&lt;/p&gt;
&lt;/blockquote&gt;
&lt;hr&gt;
    
    </summary>
    
      <category term="Android" scheme="https://shoewann0402.github.io/categories/Android/"/>
    
      <category term="Android Q" scheme="https://shoewann0402.github.io/categories/Android/Android-Q/"/>
    
    
      <category term="Activity" scheme="https://shoewann0402.github.io/tags/Activity/"/>
    
      <category term="Android" scheme="https://shoewann0402.github.io/tags/Android/"/>
    
      <category term="Android Q" scheme="https://shoewann0402.github.io/tags/Android-Q/"/>
    
      <category term="Background" scheme="https://shoewann0402.github.io/tags/Background/"/>
    
  </entry>
  
  <entry>
    <title>关于 Android Q 定位</title>
    <link href="https://shoewann0402.github.io/2019/03/15/about-android-q-beta-location/"/>
    <id>https://shoewann0402.github.io/2019/03/15/about-android-q-beta-location/</id>
    <published>2019-03-15T02:42:12.000Z</published>
    <updated>2019-07-19T16:42:06.135Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>Android Q Location 的简单总结</p></blockquote><hr><a id="more"></a><blockquote><p><em>当前文章首次编辑于Android Q Beta 1 版本，可能部分内容会在后期版本上发生变化，仅供参考</em></p></blockquote><h2 id="以往情况"><a href="#以往情况" class="headerlink" title="以往情况"></a>以往情况</h2><blockquote><ul><li>Android API &lt; 23 : 无需动态请求，直接注册使用位置权限</li><li>Android API &gt; = 23 &amp;&amp; API &lt; = 28: 需要动态请求权限，并<strong>允许</strong>/<strong>拒绝</strong>权限</li></ul></blockquote><p>从之前来看，用户只有一个控件<code>允许</code>或<code>拒绝</code>应用程序访问设备位置，包括应用程序在使用时和不使用时的位置使用情况。</p><p>在Android Q上，Android团队对控件进行了改进</p><h2 id="有何变化"><a href="#有何变化" class="headerlink" title="有何变化"></a>有何变化</h2><p><img alt="android_q_location_test.png" data-src="/images/android_q_location_test.png"></p><p>从Android Q开始，用户有一个新选项，只有在使用该应用时才能让应用访问该位置; 换句话说，当应用程序在前台时。这意味着用户可以选择三种选项来为应用提供位置：</p><blockquote><ul><li><code>All the time</code> - 意味着APP任何时候都能访问到位置</li><li><code>While in use</code> - 意味着APP只有当在使用的时候才能访问到位置</li><li><code>Deny</code> - 意味着APP无法访问到位置</li></ul></blockquote><p>从Android Q Beta 1开始，此更改具有以下属性：</p><blockquote><ul><li>如果您在后台请求访问用户的位置，则会影响您的应用</li><li>通过使用新权限在后台访问位置并在没有后台位置更新的情况下确保优雅降级来进行缓解</li><li>Android Q上始终启用行为</li></ul></blockquote><h2 id="如何开始"><a href="#如何开始" class="headerlink" title="如何开始"></a>如何开始</h2><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">manifest</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">uses-permission</span> <span class="attr">android:name</span>=<span class="string">"android.permission.ACCESS_COARSE_LOCATION"</span> /&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">uses-permission</span> <span class="attr">android:name</span>=<span class="string">"android.permission.ACCESS_BACKGROUND_LOCATION"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">manifest</span>&gt;</span></span><br></pre></td></tr></table></figure><p>如果您的应用具有需要“始终”权限的功能</p><blockquote><ul><li>target version Q : 您需要为清单文件添加新的<code>ACCESS_BACKGROUND_LOCATION</code>权限</li></ul></blockquote><blockquote><ul><li>target version &lt;= Android 9 (API 28)  :  如果您请求<code>ACCESS_FINE_LOCATION</code>或<code>ACCESS_COARSE_LOCATION</code>中的任何一个，系统将会自动为您添加<code>ACCESS_BACKGROUND_LOCATION</code>权限</li></ul></blockquote><p>用户可以随时通过<code>设置</code>决定提供或删除这些位置权限。 要保持良好的用户体验，请将应用程序设计为在应用程序没有后台位置权限或没有任何位置访问权限时进行优雅处理。</p><blockquote><p><strong>注意</strong>：虽然您的应用可以请求并接收ACCESS_BACKGROUND_LOCATION，但用户可以通过选择您的应用仅应在前台访问位置信息来撤消此权限。</p></blockquote><h2 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h2><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.xw.androidqtest</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> android.Manifest</span><br><span class="line"><span class="keyword">import</span> android.content.pm.PackageManager</span><br><span class="line"><span class="keyword">import</span> androidx.appcompat.app.AppCompatActivity</span><br><span class="line"><span class="keyword">import</span> android.os.Bundle</span><br><span class="line"><span class="keyword">import</span> android.util.Log</span><br><span class="line"><span class="keyword">import</span> androidx.core.app.ActivityCompat</span><br><span class="line"><span class="keyword">import</span> kotlinx.android.synthetic.main.activity_location.*</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">LocationActivity</span> : <span class="type">AppCompatActivity</span></span>() &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">val</span> tag: String = LocationActivity::<span class="class"><span class="keyword">class</span>.<span class="title">java</span>.<span class="title">simpleName</span></span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">companion</span> <span class="keyword">object</span> &#123;</span><br><span class="line">        <span class="keyword">const</span> <span class="keyword">val</span> REQUEST_CODE_FOREGROUND = <span class="number">1</span></span><br><span class="line">        <span class="keyword">const</span> <span class="keyword">val</span> REQUEST_CODE_BACKGROUND = <span class="number">2</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">override</span> <span class="function"><span class="keyword">fun</span> <span class="title">onCreate</span><span class="params">(savedInstanceState: <span class="type">Bundle</span>?)</span></span> &#123;</span><br><span class="line">        <span class="keyword">super</span>.onCreate(savedInstanceState)</span><br><span class="line">        setContentView(R.layout.activity_location)</span><br><span class="line"></span><br><span class="line">        btnForeground.setOnClickListener &#123;</span><br><span class="line">            requestPermission()</span><br><span class="line">        &#125;</span><br><span class="line">        btnBackground.setOnClickListener &#123;</span><br><span class="line">            requestBackgroundPermission()</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">override</span> <span class="function"><span class="keyword">fun</span> <span class="title">onRequestPermissionsResult</span><span class="params">(requestCode: <span class="type">Int</span>, permissions: <span class="type">Array</span>&lt;<span class="type">out</span> <span class="type">String</span>&gt;, grantResults: <span class="type">IntArray</span>)</span></span> &#123;</span><br><span class="line">        <span class="keyword">when</span> (requestCode) &#123;</span><br><span class="line">            REQUEST_CODE_FOREGROUND -&gt; handlePermissionForForeground()</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">super</span>.onRequestPermissionsResult(requestCode, permissions, grantResults)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="function"><span class="keyword">fun</span> <span class="title">requestPermission</span><span class="params">()</span></span> &#123;</span><br><span class="line">        <span class="keyword">val</span> permissionAccessCoarseLocationApproved = ActivityCompat</span><br><span class="line">            .checkSelfPermission(<span class="keyword">this</span>, Manifest.permission.ACCESS_COARSE_LOCATION) ==</span><br><span class="line">                PackageManager.PERMISSION_GRANTED</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (permissionAccessCoarseLocationApproved) &#123;</span><br><span class="line">            handlePermissionForForeground()</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            ActivityCompat.requestPermissions(<span class="keyword">this</span>,</span><br><span class="line">                arrayOf(Manifest.permission.ACCESS_COARSE_LOCATION), REQUEST_CODE_FOREGROUND)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="function"><span class="keyword">fun</span> <span class="title">requestBackgroundPermission</span><span class="params">()</span></span> &#123;</span><br><span class="line">        <span class="keyword">val</span> permissionAccessCoarseLocationApproved = ActivityCompat</span><br><span class="line">            .checkSelfPermission(<span class="keyword">this</span>, Manifest.permission.ACCESS_COARSE_LOCATION) ==</span><br><span class="line">                PackageManager.PERMISSION_GRANTED</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (permissionAccessCoarseLocationApproved) &#123;</span><br><span class="line">            <span class="keyword">val</span> backgroundLocationPermissionApproved = ActivityCompat</span><br><span class="line">                .checkSelfPermission(<span class="keyword">this</span>, Manifest.permission.ACCESS_BACKGROUND_LOCATION) ==</span><br><span class="line">                    PackageManager.PERMISSION_GRANTED</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (backgroundLocationPermissionApproved) &#123;</span><br><span class="line">                <span class="comment">// App can access location both in the foreground and in the background.</span></span><br><span class="line">                <span class="comment">// Start your service that doesn't have a foreground service type</span></span><br><span class="line">                <span class="comment">// defined.</span></span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="comment">// App can only access location in the foreground. Display a dialog</span></span><br><span class="line">                <span class="comment">// warning the user that your app must have all-the-time access to</span></span><br><span class="line">                <span class="comment">// location in order to function properly. Then, request background</span></span><br><span class="line">                <span class="comment">// location.</span></span><br><span class="line">                ActivityCompat.requestPermissions(<span class="keyword">this</span>,</span><br><span class="line">                    arrayOf(Manifest.permission.ACCESS_BACKGROUND_LOCATION), REQUEST_CODE_BACKGROUND)</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="comment">// App doesn't have access to the user's location at all. Make full request</span></span><br><span class="line">            <span class="comment">// for permission.</span></span><br><span class="line">            ActivityCompat.requestPermissions(<span class="keyword">this</span>,</span><br><span class="line">                arrayOf(Manifest.permission.ACCESS_COARSE_LOCATION,</span><br><span class="line">                    Manifest.permission.ACCESS_BACKGROUND_LOCATION), REQUEST_CODE_BACKGROUND)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="function"><span class="keyword">fun</span> <span class="title">handlePermissionForForeground</span><span class="params">()</span></span> &#123;</span><br><span class="line">        Log.d(tag,<span class="string">"handlePermissionForForeground called"</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>以上是对Android Q 位置变化的简单总结，更多使用方法请参阅<span class="exturl" data-url="aHR0cHM6Ly9kZXZlbG9wZXIuYW5kcm9pZC5nb29nbGUuY24vcHJldmlldy9wcml2YWN5L2RldmljZS1sb2NhdGlvbg==" title="https://developer.android.google.cn/preview/privacy/device-location">官方文档<i class="fa fa-external-link"></i></span></p></blockquote>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;Android Q Location 的简单总结&lt;/p&gt;
&lt;/blockquote&gt;
&lt;hr&gt;
    
    </summary>
    
      <category term="Android" scheme="https://shoewann0402.github.io/categories/Android/"/>
    
      <category term="Android Q" scheme="https://shoewann0402.github.io/categories/Android/Android-Q/"/>
    
    
      <category term="Android" scheme="https://shoewann0402.github.io/tags/Android/"/>
    
      <category term="Android Q" scheme="https://shoewann0402.github.io/tags/Android-Q/"/>
    
      <category term="Location" scheme="https://shoewann0402.github.io/tags/Location/"/>
    
      <category term="Permission" scheme="https://shoewann0402.github.io/tags/Permission/"/>
    
  </entry>
  
  <entry>
    <title>介绍 Android Q Beta版</title>
    <link href="https://shoewann0402.github.io/2019/03/14/introducing-android-q-beta/"/>
    <id>https://shoewann0402.github.io/2019/03/14/introducing-android-q-beta/</id>
    <published>2019-03-14T00:10:37.000Z</published>
    <updated>2020-03-01T13:29:46.272Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>原文来自: <span class="exturl" data-url="aHR0cHM6Ly9hbmRyb2lkLWRldmVsb3BlcnMuZ29vZ2xlYmxvZy5jb20vMjAxOS8wMy9pbnRyb2R1Y2luZy1hbmRyb2lkLXEtYmV0YS5odG1s" title="https://android-developers.googleblog.com/2019/03/introducing-android-q-beta.html">Introducing Android Q Beta<i class="fa fa-external-link"></i></span></p></blockquote><a id="more"></a><p>2019年，移动创新比以往更加强大。新型科技从5G到边缘，再到边缘显示器，甚至是可折叠屏幕。<span class="exturl" data-url="aHR0cHM6Ly93d3cuYmxvZy5nb29nbGUvcHJvZHVjdHMvYW5kcm9pZC9zaGFwaW5nLWZ1dHVyZS1tb2JpbGUtYW5kcm9pZC8=" title="https://www.blog.google/products/android/shaping-future-mobile-android/">Android正处于这个创新周期的中心<i class="fa fa-external-link"></i></span>，感谢数十亿设备的合作伙伴广泛的生态系统。Android帮助推动了硬件和软件的界限，带给用户全新的体验和功能。</p><p>随着移动生态系统的发展，Android着重于帮助用户利用最新的创新，确保用户的安全和隐私始终是首要任务，在像Google Pley Protect和运行时权限的基础上构建。Android Q 带来了额外的隐私和安全功能给用户，以及增强可折叠，用于连接新的APIs,新的媒体解码器和相机功能，NNAPI扩展，Vulkan 1.1支持，更快的应用程序启动，以及更多。</p><p>今天我们为早期采纳者发布了Android Q Beta 1 版本并为开发者发布SDK预览版。您今天可以通过<span class="exturl" data-url="aHR0cHM6Ly93d3cuZ29vZ2xlLmNvbS9hbmRyb2lkL2JldGE=" title="https://www.google.com/android/beta">注册任意Pixel设备<i class="fa fa-external-link"></i></span>(包括原版的Pixel和Pixel XL,我们通过大众需求扩大了支持！)请<span class="exturl" data-url="aHR0cHM6Ly9kZXZlbG9wZXIuYW5kcm9pZC5jb20vcHJldmlldy9mZWVkYmFjaw==" title="https://developer.android.com/preview/feedback">让我们知道您的想法！<i class="fa fa-external-link"></i></span>，继续阅读，了解Android Q中的内容，我们将在<span class="exturl" data-url="aHR0cHM6Ly9ldmVudHMuZ29vZ2xlLmNvbS9pby8=" title="https://events.google.com/io/">5月份的Google I / O<i class="fa fa-external-link"></i></span>上看到您，我们将分享更多内容。</p><h1 id="建立在Android的隐私保护之上"><a href="#建立在Android的隐私保护之上" class="headerlink" title="建立在Android的隐私保护之上"></a>建立在Android的隐私保护之上</h1><p>Android的设计以安全和隐私为中心,随着Android的成熟,我们增加了很多功能来保护用户,像<span class="exturl" data-url="aHR0cHM6Ly9zb3VyY2UuYW5kcm9pZC5jb20vc2VjdXJpdHkvZW5jcnlwdGlvbi9maWxlLWJhc2Vk" title="https://source.android.com/security/encryption/file-based">基于文件的加密<i class="fa fa-external-link"></i></span>、操作系统控制要求应用程序在<span class="exturl" data-url="aHR0cHM6Ly9kZXZlbG9wZXIuYW5kcm9pZC5jb20vZ3VpZGUvdG9waWNzL3Blcm1pc3Npb25zL292ZXJ2aWV3" title="https://developer.android.com/guide/topics/permissions/overview">访问敏感资源之前请求权限<i class="fa fa-external-link"></i></span>、锁定<span class="exturl" data-url="aHR0cHM6Ly93d3cudGhldmVyZ2UuY29tLzIwMTgvMy83LzE3MDkxMTA0L2FuZHJvaWQtcC1wcmV2ZW50cy1hcHBzLXVzaW5nLW1pYy1jYW1lcmEtaWRsZS1iYWNrZ3JvdW5k" title="https://www.theverge.com/2018/3/7/17091104/android-p-prevents-apps-using-mic-camera-idle-background">相机/麦克风后台访问<i class="fa fa-external-link"></i></span>、<span class="exturl" data-url="aHR0cHM6Ly93d3cuY29tcHV0ZXJ3b3JsZC5jb20vYXJ0aWNsZS8zMjk3MDM5L2FuZHJvaWQtcGllLXNlY3VyaXR5LXNldHRpbmcuaHRtbA==" title="https://www.computerworld.com/article/3297039/android-pie-security-setting.html">锁定模式<i class="fa fa-external-link"></i></span>、<span class="exturl" data-url="aHR0cHM6Ly9zZWN1cml0eS5nb29nbGVibG9nLmNvbS8yMDE4LzEwL2dvb2dsZS1hbmQtYW5kcm9pZC1oYXZlLXlvdXItYmFjay1ieS5odG1s" title="https://security.googleblog.com/2018/10/google-and-android-have-your-back-by.html">加密备份<i class="fa fa-external-link"></i></span>、<span class="exturl" data-url="aHR0cHM6Ly93d3cuYW5kcm9pZC5jb20vcGxheS1wcm90ZWN0Lw==" title="https://www.android.com/play-protect/">Google Play Protect<i class="fa fa-external-link"></i></span>(每天扫描超过500亿个应用程序，以识别潜在的有害应用程序并删除它们)以及更多。在Android Q中，我们已经做了更多的增强来保护我们的用户，其中许多增强是我们在Strobe项目中工作的一部分。</p><h2 id="给用户更多的位置控制"><a href="#给用户更多的位置控制" class="headerlink" title="给用户更多的位置控制"></a>给用户更多的位置控制</h2><p>使用Android Q，操作系统帮助用户更好地控制应用程序何时可以获得位置。就像之前的操作系统版本一样，应用程序只有在请求你的权限并得到你的许可后才能获得位置信息。</p><p>特别敏感的一件事是，应用程序在不使用的情况下(在后台)访问位置。Android Q 允许用户永远不允许应用程序查看自己的位置，只在应用程序正在使用(运行)或一直在使用(后台)时才允许。</p><p><img alt="android_q_loc_dialog" data-src="/images/android_q_loc_dialog.png"></p><p>例如，一个应用程序询问用户食品配送的位置是有意义的，用户可能希望授予它这样做的能力。但由于应用程序可能不需要当前正在使用的位置之外的位置，用户可能不想授予该访问权限。Android Q现在提供了更高级别的控制。请阅读<span class="exturl" data-url="aHR0cHM6Ly9kZXZlbG9wZXIuYW5kcm9pZC5jb20vcHJldmlldy9wcml2YWN5L2RldmljZS1sb2NhdGlvbg==" title="https://developer.android.com/preview/privacy/device-location">开发人员指南<i class="fa fa-external-link"></i></span>，了解有关如何使应用程序适应此新控件的详细信息。期待更多以用户为中心的改进出现在即将到来的beta中。我们的目标是非常敏感地，始终为开发人员提供尽可能多的通知和支持。</p><h2 id="Android-Q中更多的隐私保护"><a href="#Android-Q中更多的隐私保护" class="headerlink" title="Android Q中更多的隐私保护"></a>Android Q中更多的隐私保护</h2><p>除了位置的改变，我们还在进行进一步的更新，以确保透明度、用户控制权和个人数据的安全。</p><p>在Android Q 中，该操作系统让用户对应用程序有了更多的控制，控制对共享文件的访问。用户将能够通过新的运行时权限控制应用程序对照片、视频或音频集合的访问。对于下载，应用程序必须使用系统文件选择器，这允许用户决定应用程序可以访问哪些下载文件。对于开发人员来说，您的应用程序如何在外部存储上使用共享区域有一些变化。请确保阅读作用<span class="exturl" data-url="aHR0cHM6Ly9kZXZlbG9wZXIuYW5kcm9pZC5jb20vcHJldmlldy9wcml2YWN5L3Njb3BlZC1zdG9yYWdl" title="https://developer.android.com/preview/privacy/scoped-storage">域存储(Scoped Storage)更改<i class="fa fa-external-link"></i></span>以获得详细信息。</p><p>我们还看到，当一个应用程序意外地跳到前台并占据焦点时，用户(和开发人员)会感到不安。为了减少这些干扰，Android Q将阻止应用程序在后台启动活动。如果你的应用程序在后台，需要迅速吸引用户的注意力——比如来电或闹钟——你可以使用高优先级通知，并提供全屏意图。有关更多信息，请参阅<span class="exturl" data-url="aHR0cHM6Ly9kZXZlbG9wZXIuYW5kcm9pZC5jb20vcHJldmlldy9wcml2YWN5L2JhY2tncm91bmQtYWN0aXZpdHktc3RhcnRz" title="https://developer.android.com/preview/privacy/background-activity-starts">文档<i class="fa fa-external-link"></i></span>。</p><p>我们限制对不可重置设备标识符的访问，包括设备IMEI、序列号和类似标识符。阅读<span class="exturl" data-url="aHR0cHM6Ly9kZXZlbG9wZXIuYW5kcm9pZC5jb20vdHJhaW5pbmcvYXJ0aWNsZXMvdXNlci1kYXRhLWlkcw==" title="https://developer.android.com/training/articles/user-data-ids">最佳实践<i class="fa fa-external-link"></i></span>，以帮助您为用例选择正确的标识符，并在<span class="exturl" data-url="aHR0cHM6Ly9kZXZlbG9wZXIuYW5kcm9pZC5jb20vcHJldmlldy9wcml2YWN5L2RhdGEtaWRlbnRpZmllcnM=" title="https://developer.android.com/preview/privacy/data-identifiers">这里<i class="fa fa-external-link"></i></span>查看详细信息。在默认情况下，当连接到不同的Wi-Fi网络时，我们还会随机设置设备的MAC地址——这在Android 9 Pie中是可选的。</p><p>我们提前把这些变化告诉你，这样你就可以有尽可能多的时间来准备。我们还努力为开发人员预先提供详细的信息，我们建议查看关于隐私更改的<span class="exturl" data-url="aHR0cHM6Ly9kZXZlbG9wZXIuYW5kcm9pZC5jb20vcHJldmlldy9wcml2YWN5" title="https://developer.android.com/preview/privacy">详细文档<i class="fa fa-external-link"></i></span>，并立即开始测试。</p><h1 id="吸引用户的新方式"><a href="#吸引用户的新方式" class="headerlink" title="吸引用户的新方式"></a>吸引用户的新方式</h1><p>在Android Q中，我们启用了新的方式将用户带入你的应用程序，并在他们从其他应用程序过渡时简化体验。</p><h2 id="折叠和创新的新屏幕"><a href="#折叠和创新的新屏幕" class="headerlink" title="折叠和创新的新屏幕"></a>折叠和创新的新屏幕</h2><p>可折叠设备开辟了一些创新的经验和用例。为了帮助你的应用程序更好地利用这些和其他大屏幕设备，我们在Android Q中做了很多改进，包括onResume和onPause的改变，以支持多简历，并在你的应用程序有焦点时通知你。我们还更改了resizeableActivity manifest属性的工作方式，以帮助您管理应用程序在可折叠和大屏幕上的显示方式。为了让您开始在这些新设备上构建和测试，我们一直在努力更新Android模拟器，以支持多显示器类型切换——更多细节即将公布!</p><p><img alt="android_q_map" data-src="/images/android_q_map.png"></p><h2 id="分享快捷键"><a href="#分享快捷键" class="headerlink" title="分享快捷键"></a>分享快捷键</h2><p>当用户想在另一个应用程序中与他人分享照片等内容时，过程应该很快。在Android Q中，我们通过共享快捷方式让这一过程变得更快更简单，用户可以直接跳转到另一个应用程序来共享内容。开发人员可以发布共享目标，这些目标在应用程序中启动带有附加内容的特定活动，并在共享UI中显示给用户。因为它们是预先发布的，所以可以在启动时立即加载共享UI。</p><p><img alt="android_q_share" data-src="/images/android_q_share.png"></p><p>共享快捷方式机制类似于应用程序快捷方式的工作方式，因此我们扩展了<span class="exturl" data-url="aHR0cHM6Ly9kZXZlbG9wZXIuYW5kcm9pZC5jb20vcmVmZXJlbmNlL2FuZHJvaWQvY29udGVudC9wbS9TaG9ydGN1dEluZm8=" title="https://developer.android.com/reference/android/content/pm/ShortcutInfo">ShortcutInfo API<i class="fa fa-external-link"></i></span>，以便更容易地集成这两个功能。新的ShareTarget AndroidX库也支持这个新的API。这允许应用程序使用新功能，同时允许pre-Q设备使用直接共享。您可以在<span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL2dvb2dsZXNhbXBsZXMvYW5kcm9pZC1TaGFyaW5nU2hvcnRjdXRz" title="https://github.com/googlesamples/android-SharingShortcuts">这里<i class="fa fa-external-link"></i></span>找到带有源代码的早期示例应用程序。</p><h2 id="设置面板"><a href="#设置面板" class="headerlink" title="设置面板"></a>设置面板</h2><p>现在，您还可以通过一个新的<span class="exturl" data-url="aHR0cHM6Ly9kZXZlbG9wZXIuYW5kcm9pZC5jb20vcmVmZXJlbmNlL2FuZHJvaWQvcHJvdmlkZXIvU2V0dGluZ3MuUGFuZWw=" title="https://developer.android.com/reference/android/provider/Settings.Panel">设置面板API<i class="fa fa-external-link"></i></span>在应用程序上下文中直接显示关键系统设置，该API利用了我们在Android 9 Pie中引入的slice特性。</p><p>设置面板是一个浮动的UI，您可以从应用程序中调用它来显示用户可能需要的系统设置，比如internet连接、NFC和音频音量。例如，浏览器可以显示带有连接设置的面板，如飞机模式、Wi-Fi(包括附近的网络)和移动数据。没有必要离开应用程序;用户可以根据需要从面板管理设置。要显示设置面板，只需使用<span class="exturl" data-url="aHR0cHM6Ly9kZXZlbG9wZXIuYW5kcm9pZC5jb20vcmVmZXJlbmNlL2FuZHJvaWQvcHJvdmlkZXIvU2V0dGluZ3MuUGFuZWwuaHRtbCNBQ1RJT05fSU5URVJORVRfQ09OTkVDVElWSVRZ" title="https://developer.android.com/reference/android/provider/Settings.Panel.html#ACTION_INTERNET_CONNECTIVITY">Settings.Panel actions<i class="fa fa-external-link"></i></span>其中一个新设置触发一个intent</p><h1 id="连接"><a href="#连接" class="headerlink" title="连接"></a>连接</h1><p>在Android Q中，我们扩展了您的应用程序可以使用Android的连接堆栈并添加新的连接API。</p><p><img alt="android_q_connect" data-src="/images/android_q_connect.png"></p><h2 id="连接权限、隐私和安全性"><a href="#连接权限、隐私和安全性" class="headerlink" title="连接权限、隐私和安全性"></a>连接权限、隐私和安全性</h2><p>大多数用于扫描网络的api已经需要粗位置权限，但在Android Q 中，对于蓝牙、蜂窝网络和Wi-Fi，我们正在通过要求精细位置权限来增强对这些api的保护。如果你的应用只需要建立点对点连接或推荐网络，看看下面改进的Wi-Fi api——它们简化了连接，不需要位置许可。</p><p>除了Android Q在连接不同Wi-Fi网络时提供的随机MAC地址，我们还增加了新的Wi-Fi标准支持WP3和OWE，以提高家庭和工作网络以及开放/公共网络的安全性。</p><h2 id="改进的点对点和互联网连接"><a href="#改进的点对点和互联网连接" class="headerlink" title="改进的点对点和互联网连接"></a>改进的点对点和互联网连接</h2><p>在Android Q中，我们重构了Wi-Fi堆栈，以改善隐私和性能，但也改善了常见的用例，比如管理物联网设备和建议互联网连接——不需要位置许可。</p><p>网络连接api使得通过本地Wi-Fi管理物联网设备变得更加容易，可以实现配置、下载或打印等对等功能。应用程序通过指定首选的ssid和bssid作为<span class="exturl" data-url="aHR0cHM6Ly9kZXZlbG9wZXIuYW5kcm9pZC5jb20vcmVmZXJlbmNlL2FuZHJvaWQvbmV0L05ldHdvcmtTcGVjaWZpZXIuaHRtbA==" title="https://developer.android.com/reference/android/net/NetworkSpecifier.html">WiFiNetworkSpecifiers<i class="fa fa-external-link"></i></span>间接启动连接请求。该平台自己处理Wi-Fi扫描，并在Wi-Fi选择器中显示匹配的网络。当用户选择时，平台会自动设置连接。</p><p>网络建议api允许应用程序在互联网连接方面显示用户更喜欢的Wi-Fi网络。应用程序通过提供网络和证书列表作为<span class="exturl" data-url="aHR0cHM6Ly9kZXZlbG9wZXIuYW5kcm9pZC5jb20vcmVmZXJlbmNlL2FuZHJvaWQvbmV0L3dpZmkvV2lmaU5ldHdvcmtTdWdnZXN0aW9u" title="https://developer.android.com/reference/android/net/wifi/WifiNetworkSuggestion">WifiNetworkSuggestion<i class="fa fa-external-link"></i></span>来间接启动连接。该平台将基于过去的性能无缝连接时，在这些网络范围。</p><h2 id="Wi-Fi-性能模式"><a href="#Wi-Fi-性能模式" class="headerlink" title="Wi-Fi 性能模式"></a>Wi-Fi 性能模式</h2><p>现在你可以在Android Q中通过启用高性能和低延迟模式来请求自适应Wi-Fi。在低延迟对用户体验非常重要的情况下，如实时游戏、活动语音呼叫和类似的用例，这些将非常有用。</p><p>要使用新的性能模式，请使用WIFI_MODE_FULL_LOW_LATENCY或WIFI_MODE_FULL_HIGH_PERF调用<span class="exturl" data-url="aHR0cHM6Ly9kZXZlbG9wZXIuYW5kcm9pZC5jb20vcmVmZXJlbmNlL2FuZHJvaWQvbmV0L3dpZmkvV2lmaU1hbmFnZXIuaHRtbCNjcmVhdGVXaWZpTG9jayhpbnQsJTIwamF2YS5sYW5nLlN0cmluZyk=" title="https://developer.android.com/reference/android/net/wifi/WifiManager.html#createWifiLock(int,%20java.lang.String)">WifiManager.WifiLock.createWifiLock()<i class="fa fa-external-link"></i></span>。在这些模式下，平台与设备固件协同工作，以满足功耗最低的要求。</p><h1 id="相机、媒体、图形"><a href="#相机、媒体、图形" class="headerlink" title="相机、媒体、图形"></a>相机、媒体、图形</h1><h2 id="动态深度格式的照片"><a href="#动态深度格式的照片" class="headerlink" title="动态深度格式的照片"></a>动态深度格式的照片</h2><p>许多移动设备上的相机可以通过模糊前景或背景来模拟较窄的景深。它们为图像中的不同点捕获深度元数据，并对图像应用静态模糊，然后丢弃深度元数据。</p><p>从Android Q开始，应用程序可以请求一个动态深度图像，该图像由一个JPEG、XMP元数据(与深度相关的元素相关)和一个深度和置信度地图组成，这些数据嵌入到宣传支持的设备的同一个文件中。</p><p>要求JPEG +动态深度图像可以让你在你的应用程序中提供专门的模糊和bokeh选项。你甚至可以使用这些数据来创建3D图像或支持AR摄影用例。我们正在使动态深度成为生态系统的一种开放格式，我们正在与我们的设备制造商合作伙伴合作，使其在运行Android Q及更高版本的设备上可用。</p><p><img alt="q_depth_image_x.jpg" data-src="/images/q_depth_image_x.jpg"></p><p><img alt="q_depth_image_xx.jpg" data-src="/images/q_depth_image_xx.jpg"></p><p><img alt="q_depth_image_xxx.jpg" data-src="/images/q_depth_image_xxx.jpg"></p><p>使用动态深度图像，你可以在你的应用程序中提供专门的模糊和背景虚化选项。</p><h2 id="新的音频和视频编解码器"><a href="#新的音频和视频编解码器" class="headerlink" title="新的音频和视频编解码器"></a>新的音频和视频编解码器</h2><p>Android Q引入了对开源视频编解码器<span class="exturl" data-url="aHR0cHM6Ly9lbi53aWtpcGVkaWEub3JnL3dpa2kvQVYx" title="https://en.wikipedia.org/wiki/AV1">AV1<i class="fa fa-external-link"></i></span>的支持。这使得媒体供应商可以用<span class="exturl" data-url="aHR0cHM6Ly9lbi53aWtpcGVkaWEub3JnL3dpa2kvQVYxI1F1YWxpdHlfYW5kX2VmZmljaWVuY3k=" title="https://en.wikipedia.org/wiki/AV1#Quality_and_efficiency">更少的带宽<i class="fa fa-external-link"></i></span>向Android设备传输高质量的视频内容。此外，Android Q支持使用<span class="exturl" data-url="aHR0cDovL29wdXMtY29kZWMub3JnLw==" title="http://opus-codec.org/">Opus<i class="fa fa-external-link"></i></span>进行音频编码，Opus是一种针对语音和音乐流媒体进行优化的编解码器，<span class="exturl" data-url="aHR0cHM6Ly9lbi53aWtpcGVkaWEub3JnL3dpa2kvSGlnaC1keW5hbWljLXJhbmdlX3ZpZGVvI0hEUjEwKw==" title="https://en.wikipedia.org/wiki/High-dynamic-range_video#HDR10+">HDR10+<i class="fa fa-external-link"></i></span>用于支持Opus的设备上的高动态范围视频。</p><p><span class="exturl" data-url="aHR0cHM6Ly9kZXZlbG9wZXIuYW5kcm9pZC5jb20vcmVmZXJlbmNlL2FuZHJvaWQvbWVkaWEvTWVkaWFDb2RlY0luZm8=" title="https://developer.android.com/reference/android/media/MediaCodecInfo">MediaCodecInfo API<i class="fa fa-external-link"></i></span>引入了一种更简单的方法来确定Android设备的视频呈现能力。对于任何给定的编解码器，都可以使用VideoCodecCapabilities.getSupportedPerformancePoints()获得支持的大小和帧速率列表。这允许您选择在任何给定设备上呈现的最佳质量的视频内容。</p><h2 id="Vulkan上的ANGLE"><a href="#Vulkan上的ANGLE" class="headerlink" title="Vulkan上的ANGLE"></a>Vulkan上的ANGLE</h2><p>为了使游戏和图形开发人员更加一致，我们正在为所有基于Vulkan的设备开发一个标准的、可更新的OpenGL驱动程序。在Android Q中，我们在Android设备的Vulkan之上添加了对<span class="exturl" data-url="aHR0cHM6Ly9jaHJvbWl1bS5nb29nbGVzb3VyY2UuY29tL2FuZ2xlL2FuZ2xlLysvbWFzdGVyL1JFQURNRS5tZA==" title="https://chromium.googlesource.com/angle/angle/+/master/README.md">ANGLE<i class="fa fa-external-link"></i></span>的实验性支持。ANGLE是一个图形抽象层，用于实现高性能的OpenGL兼容性。通过angular，许多使用OpenGL ES的应用程序和游戏都可以利用Vulkan的性能和稳定性，并从Android设备上对ES的一致、独立于供应商的实现中获益。在Android Q中，我们计划支持OpenGL ES 2.0，下一步将支持ES 3.0。</p><p>我们将使用更多OpenGL功能、bug修复和性能优化来扩展实现。有关Android中当前角度支持的详细信息，如何使用它，以及我们未来的计划，请参阅<span class="exturl" data-url="aHR0cHM6Ly9kZXZlbG9wZXIuYW5kcm9pZC5jb20vcHJldmlldy9mZWF0dXJlcyNhbmdsZQ==" title="https://developer.android.com/preview/features#angle">文档<i class="fa fa-external-link"></i></span>。您可以通过“设置”中的“开发人员选项”选择我们的初始支持来开始测试。今天就试试吧!</p><h2 id="Vulkan-无处不在"><a href="#Vulkan-无处不在" class="headerlink" title="Vulkan 无处不在"></a>Vulkan 无处不在</h2><p>我们正在继续扩大<span class="exturl" data-url="aHR0cHM6Ly93d3cua2hyb25vcy5vcmcvdnVsa2FuLw==" title="https://www.khronos.org/vulkan/">Vulkan<i class="fa fa-external-link"></i></span>对Android的影响，我们为高性能3D图形<span class="exturl" data-url="aHR0cHM6Ly9kZXZlbG9wZXIuYW5kcm9pZC5jb20vbmRrL2d1aWRlcy9ncmFwaGljcy8=" title="https://developer.android.com/ndk/guides/graphics/">实现了<i class="fa fa-external-link"></i></span>低开销、跨平台的API。我们的目标是使Android上的Vulkan成为一个广泛支持的、一致的图形开发人员API。我们正在与我们的设备制造商合作伙伴共同努力，使Vulkan 1.1成为所有运行Android Q或更高版本的64位设备的要求，并成为所有32位设备的推荐标准。未来，这将有助于为应用程序和游戏提供统一的高性能图形API。</p><h2 id="神经网络-API-1-2"><a href="#神经网络-API-1-2" class="headerlink" title="神经网络 API 1.2"></a>神经网络 API 1.2</h2><p>自2017年推出神经网络API (NNAPI)以来，我们继续扩大支持的操作数量，并改进现有功能。在Android Q中，我们增加了60个新操作，包括ARGMAX, ARGMIN，量化LSTM，以及一系列的性能优化。这为加速更大范围的模型奠定了基础，比如用于目标检测和图像分割的模型。我们正在与硬件供应商和流行的机器学习框架(如<span class="exturl" data-url="aHR0cHM6Ly93d3cudGVuc29yZmxvdy5vcmcv" title="https://www.tensorflow.org/">TensorFlow<i class="fa fa-external-link"></i></span>)合作，优化和推出对NNAPI 1.2的支持。</p><h1 id="Android基础的加强"><a href="#Android基础的加强" class="headerlink" title="Android基础的加强"></a>Android基础的加强</h1><h2 id="ART-性能"><a href="#ART-性能" class="headerlink" title="ART 性能"></a>ART 性能</h2><p>Android Q对ART运行时进行了几项新的改进，帮助应用程序更快地启动并消耗更少的内存，而不需要开发人员做任何工作。</p><p>自Android Nougat以来，ART提供了<span class="exturl" data-url="aHR0cHM6Ly9zb3VyY2UuYW5kcm9pZC5jb20vZGV2aWNlcy90ZWNoL2RhbHZpay9qaXQtY29tcGlsZXI=" title="https://source.android.com/devices/tech/dalvik/jit-compiler">Profile Guided Optimization <i class="fa fa-external-link"></i></span>(PGO)，它通过识别和预编译代码中经常执行的部分，随着时间的推移加快了应用程序的启动速度。为了帮助最初的应用程序启动，谷歌Play现在提供了基于云的配置文件和apk。这些都是匿名的、聚合的艺术配置文件，可以让艺术在应用程序运行之前预先编译应用程序的某些部分，从而为整个优化过程提供了一个重要的起点。基于云的配置文件对所有应用程序都有好处，而且运行Android P或更高版本的设备已经可以使用这些配置文件。</p><p><img alt="android_q_art" data-src="/images/android_q_art.png"></p><p>我们还在继续改进ART本身。例如，在Android Q中，我们通过提前启动应用程序进程并将其移至安全容器来优化Zygote进程，因此可以立即启动。 我们将更多信息存储在应用程序的堆映像中，例如类，并使用线程来更快地加载映像。 我们还在ART的Concurrent Copying（CC）垃圾收集器中添加了Generational Garbage Collection。 分代CC更有效率，因为它分别收集年轻代对象，与全堆GC相比，成本更低，同时仍然可以回收大量空间。 这使得垃圾收集整体上在时间和CPU方面更加高效，减少了jank并帮助应用程序在低端设备上更好地运行。</p><h2 id="应用安全"><a href="#应用安全" class="headerlink" title="应用安全"></a>应用安全</h2><p><span class="exturl" data-url="aHR0cHM6Ly9kZXZlbG9wZXIuYW5kcm9pZC5jb20vcmVmZXJlbmNlL2FuZHJvaWQvaGFyZHdhcmUvYmlvbWV0cmljcy9wYWNrYWdlLXN1bW1hcnk=" title="https://developer.android.com/reference/android/hardware/biometrics/package-summary">BiometricPrompt<i class="fa fa-external-link"></i></span>是我们的统一认证框架，支持系统级的生物识别。在Android Q中，我们扩展了对被动身份验证方法(如face)的支持，并添加了隐式和显式身份验证流。在显式流中，用户必须在身份验证期间显式地确认TEE中的事务。隐式流是为使用被动身份验证的事务设计的轻量级替代方案。我们还改进了设备凭据在需要时的回退。</p><p>Android Q增加了对TLS 1.3的支持，<span class="exturl" data-url="aHR0cHM6Ly93d3cuaWV0Zi5vcmcvYmxvZy90bHMxMy8=" title="https://www.ietf.org/blog/tls13/">TLS 1.3<i class="fa fa-external-link"></i></span>是对TLS标准的重大修订，包括性能优势和增强的安全性。 我们的基准测试表明，与TLS 1.2相比，使用TLS 1.3可以将安全连接的速度提高40％。 默认情况下，为所有TLS连接启用TLS 1.3。 有关详细信息，请参阅<span class="exturl" data-url="aHR0cHM6Ly9kZXZlbG9wZXIuYW5kcm9pZC5jb20vcHJldmlldy9mZWF0dXJlcyN0bHMtMS4z" title="https://developer.android.com/preview/features#tls-1.3">文档<i class="fa fa-external-link"></i></span>。</p><h2 id="通过公共api的兼容性"><a href="#通过公共api的兼容性" class="headerlink" title="通过公共api的兼容性"></a>通过公共api的兼容性</h2><p>我们都关心的另一件事是确保应用程序在操作系统变化和发展的过程中运行顺畅。使用非sdk api的应用程序对用户有崩溃的风险，对开发人员有紧急推出的风险。在Android Q中，我们将继续从<span class="exturl" data-url="aHR0cHM6Ly9kZXZlbG9wZXIuYW5kcm9pZC5jb20vYWJvdXQvdmVyc2lvbnMvcGllL3Jlc3RyaWN0aW9ucy1ub24tc2RrLWludGVyZmFjZXM=" title="https://developer.android.com/about/versions/pie/restrictions-non-sdk-interfaces">Android P开始<i class="fa fa-external-link"></i></span>的长期努力，将应用程序转向只使用公共api。我们知道将您的应用程序从非sdk api中移除需要时间，所以我们<span class="exturl" data-url="aHR0cHM6Ly9hbmRyb2lkLWRldmVsb3BlcnMuZ29vZ2xlYmxvZy5jb20vMjAxOC8wNi9hbi11cGRhdGUtb24tbm9uLXNkay1yZXN0cmljdGlvbnMtaW4uaHRtbA==" title="https://android-developers.googleblog.com/2018/06/an-update-on-non-sdk-restrictions-in.html">提前通知您<i class="fa fa-external-link"></i></span>。</p><p>在Android Q中，我们限制了对<span class="exturl" data-url="aHR0cHM6Ly9kZXZlbG9wZXIuYW5kcm9pZC5jb20vcHJldmlldy9ub24tc2RrLXEjZ3JleWxpc3Qtbm93LXJlc3RyaWN0ZWQ=" title="https://developer.android.com/preview/non-sdk-q#greylist-now-restricted">更多非sdk接口<i class="fa fa-external-link"></i></span>的访问，并要求您使用公共接口。为了帮助您进行转换并防止您的应用程序崩溃，我们只在您的应用程序针对Android q时启用这些限制。我们将根据您的请求继续添加公共替代api;如果没有符合您用例的公共API，请让<span class="exturl" data-url="aHR0cHM6Ly9pc3N1ZXRyYWNrZXIuZ29vZ2xlLmNvbS9pc3N1ZXMvbmV3P2NvbXBvbmVudD0zMjg0MDMmdGVtcGxhdGU9MTAyNzI2Nw==" title="https://issuetracker.google.com/issues/new?component=328403&template=1027267">我们知道<i class="fa fa-external-link"></i></span>。</p><p><span class="exturl" data-url="aHR0cHM6Ly9kZXZlbG9wZXIuYW5kcm9pZC5jb20vZGlzdHJpYnV0ZS9iZXN0LXByYWN0aWNlcy9kZXZlbG9wL3Jlc3RyaWN0aW9ucy1ub24tc2RrLWludGVyZmFjZXMjdGVzdC1mb3Itbm9uLXNkaw==" title="https://developer.android.com/distribute/best-practices/develop/restrictions-non-sdk-interfaces#test-for-non-sdk">测试应用程序<i class="fa fa-external-link"></i></span>是否使用非sdk接口非常重要。我们建议使用StrictMode方法<span class="exturl" data-url="aHR0cHM6Ly9kZXZlbG9wZXIuYW5kcm9pZC5jb20vcmVmZXJlbmNlL2FuZHJvaWQvb3MvU3RyaWN0TW9kZS5WbVBvbGljeS5CdWlsZGVyI2RldGVjdE5vblNka0FwaVVzYWdlKCk=" title="https://developer.android.com/reference/android/os/StrictMode.VmPolicy.Builder#detectNonSdkApiUsage()">detectNonSdkApiUsage()<i class="fa fa-external-link"></i></span>在应用程序通过反射或JNI访问非sdk api时发出警告。即使api此时被豁免(灰色列表)，最好还是为将来做好计划，并消除对它们的使用，以减少兼容性问题。有关Android Q中限制的更多细节，请参阅<span class="exturl" data-url="aHR0cHM6Ly9kZXZlbG9wZXIuYW5kcm9pZC5jb20vcHJldmlldy9ub24tc2RrLXE=" title="https://developer.android.com/preview/non-sdk-q">开发人员指南<i class="fa fa-external-link"></i></span>。</p><h2 id="现代化安卓"><a href="#现代化安卓" class="headerlink" title="现代化安卓"></a>现代化安卓</h2><p>我们正在努力让所有应用程序充分利用最新版本Android的安全和性能特性。今年晚些时候，谷歌Play将要求你在新应用和更新中把应用的<span class="exturl" data-url="aHR0cHM6Ly9hbmRyb2lkLWRldmVsb3BlcnMuZ29vZ2xlYmxvZy5jb20vMjAxOS8wMi9leHBhbmRpbmctdGFyZ2V0LWFwaS1sZXZlbC1yZXF1aXJlbWVudHMuaHRtbA==" title="https://android-developers.googleblog.com/2019/02/expanding-target-api-level-requirements.html">targetSdkVersion设置为28<i class="fa fa-external-link"></i></span> (Android 9 Pie)。根据这些变化，Android Q将在用户首次运行针对API级别23 (Android Marshmallow)之前的平台的应用程序时，用对话框警告用户。下面是帮助您迁移应用程序的<span class="exturl" data-url="aHR0cHM6Ly9kZXZlbG9wZXIuYW5kcm9pZC5jb20vZGlzdHJpYnV0ZS9iZXN0LXByYWN0aWNlcy9kZXZlbG9wL3RhcmdldC1zZGsuaHRtbA==" title="https://developer.android.com/distribute/best-practices/develop/target-sdk.html">资源清单<i class="fa fa-external-link"></i></span>。</p><p>我们还在推动生态系统为64位设备做好准备。今年晚些时候，谷歌Play将要求<span class="exturl" data-url="aHR0cHM6Ly9hbmRyb2lkLWRldmVsb3BlcnMuZ29vZ2xlYmxvZy5jb20vMjAxOS8wMS9nZXQteW91ci1hcHBzLXJlYWR5LWZvci02NC1iaXQuaHRtbA==" title="https://android-developers.googleblog.com/2019/01/get-your-apps-ready-for-64-bit.html">所有应用程序都支持64位<i class="fa fa-external-link"></i></span>。如果您的应用程序使用本地sdk或库，请记住，您需要提供这些sdk或库的64位兼容版本。有关如何准备的详细信息，请参阅<span class="exturl" data-url="aHR0cHM6Ly9kZXZlbG9wZXIuYW5kcm9pZC5jb20vZGlzdHJpYnV0ZS9iZXN0LXByYWN0aWNlcy9kZXZlbG9wLzY0LWJpdA==" title="https://developer.android.com/distribute/best-practices/develop/64-bit">开发人员指南<i class="fa fa-external-link"></i></span>。</p><h1 id="开始使用Android-Q测试版"><a href="#开始使用Android-Q测试版" class="headerlink" title="开始使用Android Q测试版"></a>开始使用Android Q测试版</h1><p>对于可能影响您的应用程序的重要隐私特性，我们建议您立即开始测试。特别是，您希望启用和测试Android Q存储更改、新位置权限状态、后台应用程序启动的限制和设备标识符的限制。有关详细信息，请参阅<span class="exturl" data-url="aHR0cHM6Ly9kZXZlbG9wZXIuYW5kcm9pZC5jb20vcHJldmlldy9wcml2YWN5" title="https://developer.android.com/preview/privacy">隐私文档<i class="fa fa-external-link"></i></span>。</p><p>首先，只需将您当前的应用程序从谷歌Play安装到运行Android Q Beta版的设备或Android<span class="exturl" data-url="aHR0cHM6Ly9kZXZlbG9wZXIuYW5kcm9pZC5jb20vc3R1ZGlvL3J1bi9tYW5hZ2luZy1hdmRzLmh0bWw=" title="https://developer.android.com/studio/run/managing-avds.html">虚拟设备<i class="fa fa-external-link"></i></span>上，并处理用户流。该应用程序应该运行良好，看起来很棒，并正确处理所有应用程序的Android Q<span class="exturl" data-url="aHR0cHM6Ly9kZXZlbG9wZXIuYW5kcm9pZC5jb20vcHJldmlldy9iZWhhdmlvci1jaGFuZ2VzLWFsbA==" title="https://developer.android.com/preview/behavior-changes-all">行为变化<i class="fa fa-external-link"></i></span>。如果你发现问题，我们建议你在当前的应用程序中修复它们，而不改变你的目标水平。查看<span class="exturl" data-url="aHR0cHM6Ly9kZXZlbG9wZXIuYW5kcm9pZC5jb20vcHJldmlldy9taWdyYXRpb24uaHRtbA==" title="https://developer.android.com/preview/migration.html">迁移指南<i class="fa fa-external-link"></i></span>中的步骤和建议的时间线。</p><h1 id="探索新特性和api"><a href="#探索新特性和api" class="headerlink" title="探索新特性和api"></a>探索新特性和api</h1><p>当你准备好了，深入Android Q，了解你可以在你的应用程序中使用的<span class="exturl" data-url="aHR0cHM6Ly9kZXZlbG9wZXIuYW5kcm9pZC5jb20vcHJldmlldy9mZWF0dXJlcw==" title="https://developer.android.com/preview/features">新功能和api<i class="fa fa-external-link"></i></span>。以<span class="exturl" data-url="aHR0cHM6Ly9kZXZlbG9wZXIuYW5kcm9pZC5jb20vc2RrL2FwaV9kaWZmL3EtYmV0YTEvY2hhbmdlcy5odG1s" title="https://developer.android.com/sdk/api_diff/q-beta1/changes.html">API diff报告<i class="fa fa-external-link"></i></span>、Android Q Beta <span class="exturl" data-url="aHR0cHM6Ly9kZXZlbG9wZXIuYW5kcm9pZC5jb20vcmVmZXJlbmNlL3BhY2thZ2VzLmh0bWw=" title="https://developer.android.com/reference/packages.html">API参考<i class="fa fa-external-link"></i></span>和开发人员指南作为起点。另外，在<span class="exturl" data-url="aHR0cHM6Ly9kZXZlbG9wZXIuYW5kcm9pZC5jb20vcHJldmlldy9pbmRleC5odG1s" title="https://developer.android.com/preview/index.html">Android Q Beta开发人员站点<i class="fa fa-external-link"></i></span>上，您可以找到<span class="exturl" data-url="aHR0cHM6Ly9kZXZlbG9wZXIuYW5kcm9pZC5jb20vcHJldmlldy9yZWxlYXNlLW5vdGVzLmh0bWw=" title="https://developer.android.com/preview/release-notes.html">发布说明<i class="fa fa-external-link"></i></span>和报告问题的<span class="exturl" data-url="aHR0cHM6Ly9kZXZlbG9wZXIuYW5kcm9pZC5jb20vcHJldmlldy9mZWVkYmFjay5odG1s" title="https://developer.android.com/preview/feedback.html">支持资源<i class="fa fa-external-link"></i></span>。</p><p>要使用Android Q进行构建，请下载Android Q Beta SDK和工具到Android Studio 3.3或更高版本中，并按照<span class="exturl" data-url="aHR0cHM6Ly9kZXZlbG9wZXIuYW5kcm9pZC5jb20vcHJldmlldy9zZXR1cC1zZGs=" title="https://developer.android.com/preview/setup-sdk">以下<i class="fa fa-external-link"></i></span>说明配置您的环境。如果你想要最新的修复Android Q相关的变化，我们建议你使用<span class="exturl" data-url="aHR0cHM6Ly9kZXZlbG9wZXIuYW5kcm9pZC5jb20vc3R1ZGlvL3ByZXZpZXcv" title="https://developer.android.com/studio/preview/">Android Studio 3.5<i class="fa fa-external-link"></i></span>或更高版本。</p><h1 id="我如何得到Android-Q测试版"><a href="#我如何得到Android-Q测试版" class="headerlink" title="我如何得到Android Q测试版?"></a>我如何得到Android Q测试版?</h1><p>这很简单——你可以在<span class="exturl" data-url="aHR0cHM6Ly93d3cuZ29vZ2xlLmNvbS9hbmRyb2lkL2JldGE=" title="https://www.google.com/android/beta">这里注册<i class="fa fa-external-link"></i></span>，在任何像素设备上通过无线方式获得Android Q Beta更新(今年我们支持所有三代Pixel—Pixel3、Pixel2，甚至原始Pixel!)还<span class="exturl" data-url="aHR0cHM6Ly9kZXZlbG9wZXIuYW5kcm9pZC5jb20vcHJldmlldy9kb3dubG9hZA==" title="https://developer.android.com/preview/download">可以<i class="fa fa-external-link"></i></span>下载这些设备的系统映像。如果没有Pixel设备，可以使用Android模拟器，并通过Android Studio中的SDK Manager下载最新的模拟器系统镜像。</p><p>我们计划在整个预览过程中定期更新预览系统图像和SDK。随着Beta版程序的推进，我们将有更多的功能可以分享。</p><p>一如既往，你的反馈是至关重要的，所以请<span class="exturl" data-url="aHR0cHM6Ly9kZXZlbG9wZXIuYW5kcm9pZC5jb20vcHJldmlldy9mZWVkYmFjay5odG1s" title="https://developer.android.com/preview/feedback.html">让我们知道你的想法<i class="fa fa-external-link"></i></span>——我们越早收到你的反馈，我们就能整合更多的反馈。当您发现问题时，请在<span class="exturl" data-url="aHR0cHM6Ly9kZXZlbG9wZXIuYW5kcm9pZC5jb20vcHJldmlldy9idWc=" title="https://developer.android.com/preview/bug">这里报告<i class="fa fa-external-link"></i></span>。我们有单独的热门列表来归档<span class="exturl" data-url="aHR0cHM6Ly9pc3N1ZXRyYWNrZXIuZ29vZ2xlLmNvbS9pc3N1ZXMvbmV3P2NvbXBvbmVudD0xOTA2MDImdGVtcGxhdGU9MTIyNjU3Mw==" title="https://issuetracker.google.com/issues/new?component=190602&template=1226573">平台问题<i class="fa fa-external-link"></i></span>、<span class="exturl" data-url="aHR0cHM6Ly9pc3N1ZXRyYWNrZXIuZ29vZ2xlLmNvbS9pc3N1ZXMvbmV3P2NvbXBvbmVudD0xOTA2MDImdGVtcGxhdGU9MTIyNzM3Ng==" title="https://issuetracker.google.com/issues/new?component=190602&template=1227376">应用程序兼容性问题<i class="fa fa-external-link"></i></span>和<span class="exturl" data-url="aHR0cHM6Ly9pc3N1ZXRyYWNrZXIuZ29vZ2xlLmNvbS9pc3N1ZXMvbmV3P2NvbXBvbmVudD0xOTA2MDImdGVtcGxhdGU9MTIyNzU4Mw==" title="https://issuetracker.google.com/issues/new?component=190602&template=1227583">第三方SDK问题<i class="fa fa-external-link"></i></span>。</p><blockquote><p>以上是对Android官网博客文章的翻译，如果不足，欢迎指正，谢谢</p></blockquote>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;原文来自: &lt;a href=&quot;https://android-developers.googleblog.com/2019/03/introducing-android-q-beta.html&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Introducing Android Q Beta&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="Android" scheme="https://shoewann0402.github.io/categories/Android/"/>
    
      <category term="Android Q" scheme="https://shoewann0402.github.io/categories/Android/Android-Q/"/>
    
    
      <category term="Android" scheme="https://shoewann0402.github.io/tags/Android/"/>
    
      <category term="Android Q" scheme="https://shoewann0402.github.io/tags/Android-Q/"/>
    
  </entry>
  
  <entry>
    <title>Android Jetpack WorkManager 稳定发布</title>
    <link href="https://shoewann0402.github.io/2019/03/06/android-jetpack-workmanager-stable/"/>
    <id>https://shoewann0402.github.io/2019/03/06/android-jetpack-workmanager-stable/</id>
    <published>2019-03-06T07:37:35.000Z</published>
    <updated>2019-03-11T09:33:32.000Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>原文来自: <span class="exturl" data-url="aHR0cHM6Ly9hbmRyb2lkLWRldmVsb3BlcnMuZ29vZ2xlYmxvZy5jb20vMjAxOS8wMy9hbmRyb2lkLWpldHBhY2std29ya21hbmFnZXItc3RhYmxlLmh0bWw=" title="https://android-developers.googleblog.com/2019/03/android-jetpack-workmanager-stable.html">Android Jetpack WorkManager Stable Release<i class="fa fa-external-link"></i></span></p></blockquote><a id="more"></a><p><strong>使用WorkManager的方式简化您的后台管理</strong></p><p>今天我们非常高兴的宣布<span class="exturl" data-url="aHR0cHM6Ly9kZXZlbG9wZXIuYW5kcm9pZC5jb20vdG9waWMvbGlicmFyaWVzL2FyY2hpdGVjdHVyZS93b3JrbWFuYWdlcg==" title="https://developer.android.com/topic/libraries/architecture/workmanager">Android Jetpack WorkManager<i class="fa fa-external-link"></i></span> 1.0 稳定版发布。我们想感谢许多在我们开发社区的您，一路上为我们给予反馈和bug记录 —— 我们到达了这里，感谢您的帮助！</p><p>当我们通过开发者看到面临的主要问题时，我们看见了做可靠的后台处理和友好的电量管理是一个巨大的挑战。这意味着定期刷新内容或者上传您的日志是复杂的。不同的Android版本为工作提供了不同的工具，它们每一个都有自己怪异的API。比如说，监听网络或者存储可用性以及自动重试您的任务涉及到大量工作。</p><p>我们对于这些挑战的回答是WorkManager。在Google <span class="exturl" data-url="aHR0cHM6Ly93d3cueW91dHViZS5jb20vd2F0Y2g/dj1JcktvQkZMd1ROMA==" title="https://www.youtube.com/watch?v=IrKoBFLwTN0">I/O 2018<i class="fa fa-external-link"></i></span>上，我们介绍了Android Jetpack <span class="exturl" data-url="aHR0cHM6Ly9kZXZlbG9wZXIuYW5kcm9pZC5jb20vdG9waWMvbGlicmFyaWVzL2FyY2hpdGVjdHVyZS93b3JrbWFuYWdlcg==" title="https://developer.android.com/topic/libraries/architecture/workmanager">WorkManager库<i class="fa fa-external-link"></i></span>的预览,并且从那之后在它上面迭代了额外的功能核和bug修复，感谢您宝贵的意见。</p><p>WorkManager的目标就是为了您操作后台使其简单。WorkManager考虑到了像电量优化、存储或者网络可用性的约束，同事当满足适当的条件它只能运行它的任务。它也知道去重试或者重新调度您的工作——即使您的设备或者app重启了。</p><p>我们相信ＷOrkManager是友好的，亲切的API,能够处理好Android最复杂的部分之一，您可以将焦点放在让您的App独特代码上。</p><h2 id="WorkManager-亮点"><a href="#WorkManager-亮点" class="headerlink" title="ＷorkManager 亮点"></a>ＷorkManager 亮点</h2><p>这里是WorkManager一些关键点：</p><blockquote><ul><li>让您设置约束，比如网络状态或者充电状态、任务在运行时</li><li>支持异步一次性和周期性</li><li>支持带输入和输出的链式任务</li><li>确保任务执行，及时APP或者设备重启</li><li>支持Android 4.0+ (API 14+)</li></ul></blockquote><p>观看和阅读下面去学习在您的APP里面什么时候以及如何使用WorkManager去简化管理后台工作</p><p><img alt="android_jetpack_introducing_workmanager" data-src="/images/android_jetpack_introducing_workmanager.png"></p><p><span class="exturl" data-url="aHR0cHM6Ly95b3V0dS5iZS9wZV95cU0xNmhQUQ==" title="https://youtu.be/pe_yqM16hPQ">Android Jetpack: 介绍WorkManager<i class="fa fa-external-link"></i></span></p><h2 id="何时使用-WorkManager"><a href="#何时使用-WorkManager" class="headerlink" title="何时使用 WorkManager"></a>何时使用 WorkManager</h2><p>WorkManager是针对于能够被延期任务的最佳套件，但是即使是应用程序或者设备重启(比如: 使用后端服务定期同步数据以及上传日志或者分析数据) 也是仍然有望运行</p><p>对于像需要立即运行去发送即时消息或者APP在退出之后不需要立即运行的任务，去看看<span class="exturl" data-url="aHR0cHM6Ly9kZXZlbG9wZXIuYW5kcm9pZC5jb20vZ3VpZGUvYmFja2dyb3VuZC8=" title="https://developer.android.com/guide/background/">后台处理向导 <i class="fa fa-external-link"></i></span>了解哪一种解决方案满足您的需求。</p><h2 id="如何使用-WorkManager"><a href="#如何使用-WorkManager" class="headerlink" title="如何使用 WorkManager"></a>如何使用 WorkManager</h2><p>开始使用WorkManager API, 添加在<span class="exturl" data-url="aHR0cHM6Ly9kZXZlbG9wZXIuYW5kcm9pZC5jb20vc3R1ZGlvL2J1aWxkL2RlcGVuZGVuY2llcyNnb29nbGUtbWF2ZW4=" title="https://developer.android.com/studio/build/dependencies#google-maven">Google’s Maven repository<i class="fa fa-external-link"></i></span>上WorkManager可用的Java或者Kotlin依赖到您应用程序的<code>build.gradle</code>文件:</p><figure class="highlight gradle"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">dependencies</span> &#123;</span><br><span class="line">    <span class="keyword">def</span> work_version = <span class="number">1.0</span>.<span class="number">0</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// Java</span></span><br><span class="line">    implementation <span class="string">"android.arch.work:work-runtime:$work_version"</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// Kotlin KTX + coroutines</span></span><br><span class="line">    implementation <span class="string">"android.arch.work:work-runtime-ktx:$work_version"</span></span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><p>现在，只需要将<span class="exturl" data-url="aHR0cHM6Ly9kZXZlbG9wZXIuYW5kcm9pZC5jb20vcmVmZXJlbmNlL2FuZHJvaWR4L3dvcmsvV29ya2Vy" title="https://developer.android.com/reference/androidx/work/Worker">Worker<i class="fa fa-external-link"></i></span>子类化并利用<strong>doWork()</strong>实现您的后台工作，并用WorkManager加入列队。</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyWorker</span></span>(ctx: Context, params: WorkerParameters)</span><br><span class="line">  : Worker(ctx, params) &#123;</span><br><span class="line">  <span class="keyword">override</span> <span class="function"><span class="keyword">fun</span> WorkerResult <span class="title">doWork</span><span class="params">()</span></span> &#123;</span><br><span class="line">  </span><br><span class="line">    <span class="comment">//在这里完成一些需要在后台处理的工作</span></span><br><span class="line">    .....</span><br><span class="line">    <span class="keyword">return</span> Result.success()</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 可选, 添加像电源、网络可用性的约束</span></span><br><span class="line"><span class="keyword">val</span> constraints: Constraints = Constraints.Builder()</span><br><span class="line">     .setRequiresCharging(<span class="literal">true</span>)</span><br><span class="line">                .setRequiredNetworkType(NetworkType.CONNECTED)</span><br><span class="line">                .build()</span><br><span class="line"></span><br><span class="line"><span class="keyword">val</span> myWork = OneTimeWorkRequestBuilder&lt;MyWorker&gt;()</span><br><span class="line">                .setConstraints(constraints).build()</span><br><span class="line"></span><br><span class="line"><span class="comment">// 现在，列队您的工作</span></span><br><span class="line">WorkManager.getInstance().enqueue(myWork)</span><br></pre></td></tr></table></figure><p>WorkManager当识别到您的设备正在充电且网络是可用时，它将负责运行您的任务。</p><h2 id="为何使用-WorkManager"><a href="#为何使用-WorkManager" class="headerlink" title="为何使用 WorkManager"></a>为何使用 WorkManager</h2><h3 id="向后兼容"><a href="#向后兼容" class="headerlink" title="向后兼容"></a>向后兼容</h3><p>WorkManager将利用正确的调度API:它使用了<span class="exturl" data-url="aHR0cHM6Ly9kZXZlbG9wZXIuYW5kcm9pZC5jb20vcmVmZXJlbmNlL2FuZHJvaWQvYXBwL2pvYi9Kb2JTY2hlZHVsZXI=" title="https://developer.android.com/reference/android/app/job/JobScheduler">JobScheduler API<i class="fa fa-external-link"></i></span>在Android 6.0+ (API 23+)并且结合了之前版本上的<span class="exturl" data-url="aHR0cHM6Ly9kZXZlbG9wZXIuYW5kcm9pZC5jb20vcmVmZXJlbmNlL2FuZHJvaWQvYXBwL0FsYXJtTWFuYWdlcg==" title="https://developer.android.com/reference/android/app/AlarmManager">AlarmManager<i class="fa fa-external-link"></i></span>和<span class="exturl" data-url="aHR0cHM6Ly9kZXZlbG9wZXIuYW5kcm9pZC5jb20vcmVmZXJlbmNlL2FuZHJvaWQvY29udGVudC9Ccm9hZGNhc3RSZWNlaXZlcg==" title="https://developer.android.com/reference/android/content/BroadcastReceiver">BroadcastReceiver<i class="fa fa-external-link"></i></span></p><p>它也力求最佳行为，这样它就符合了在较新的Android API版本中引入系统优化去最大化电量和强制执行良好的APP行为。</p><p>比如说，当系统是进入了Doze 模式时，对于Android 6.0+(API 23+)的设备，WorkManager将在维护窗口期间调度后台工作。</p><h3 id="可靠的调度"><a href="#可靠的调度" class="headerlink" title="可靠的调度"></a>可靠的调度</h3><p>利用WorkManager,您能够简单的添加像网络可用性或者充电状态的约束。当约束满足您的工作将会运行，并且如果在运行的过程中它们失败了将会自动重试。比如说，如果您的任务要求网络可用，当网络不再可用时任务将会停止并且之后重试。</p><p>您也能够使用<span class="exturl" data-url="aHR0cHM6Ly9kZXZlbG9wZXIuYW5kcm9pZC5jb20vdG9waWMvbGlicmFyaWVzL2FyY2hpdGVjdHVyZS9saXZlZGF0YQ==" title="https://developer.android.com/topic/libraries/architecture/livedata">LiveData<i class="fa fa-external-link"></i></span>监控工作状态和检索工作结果。当您的任务完成时，这样可以通知您的UI。</p><p>您的工作失败了的情况下，您可用通过配置<span class="exturl" data-url="aHR0cHM6Ly9kZXZlbG9wZXIuYW5kcm9pZC5jb20vcmVmZXJlbmNlL2FuZHJvaWR4L3dvcmsvQmFja29mZlBvbGljeQ==" title="https://developer.android.com/reference/androidx/work/BackoffPolicy">backoff(退避)<i class="fa fa-external-link"></i></span>的处理方式来控制您的工作重试方式</p><p>WorkManager也能够重新调度您的工作，如果一个应用程序或者设备重启发生了，使用本地数据库记录您的工作。</p><h3 id="控制您的工作方式"><a href="#控制您的工作方式" class="headerlink" title="控制您的工作方式"></a>控制您的工作方式</h3><p>我们明白每一个APP有不同的需求，您的任务也如此——甚至是在同一个APP内。WorkManager提供了简单但高度灵活的API表面，可以帮助您配置您的工作和运行它的方式。</p><p>利用<span class="exturl" data-url="aHR0cHM6Ly9kZXZlbG9wZXIuYW5kcm9pZC5jb20vcmVmZXJlbmNlL2FuZHJvaWR4L3dvcmsvT25lVGltZVdvcmtSZXF1ZXN0Lmh0bWw=" title="https://developer.android.com/reference/androidx/work/OneTimeWorkRequest.html">OneTimeWorkRequest<i class="fa fa-external-link"></i></span>一次性调度或者<span class="exturl" data-url="aHR0cHM6Ly9kZXZlbG9wZXIuYW5kcm9pZC5jb20vcmVmZXJlbmNlL2FuZHJvaWR4L3dvcmsvUGVyaW9kaWNXb3JrUmVxdWVzdA==" title="https://developer.android.com/reference/androidx/work/PeriodicWorkRequest">PeriodicWorkRequest<i class="fa fa-external-link"></i></span>周期性调度</p><p>您也能够链接您的一次工作请求以按顺序或并行运行。如果任意链接工作失败，WorkManager力求确保剩下的工作链不会运行。阅读更多关于链接工作请求<span class="exturl" data-url="aHR0cHM6Ly9kZXZlbG9wZXIuYW5kcm9pZC5jb20vdG9waWMvbGlicmFyaWVzL2FyY2hpdGVjdHVyZS93b3JrbWFuYWdlci9ob3ctdG8vY2hhaW4td29yay5tZA==" title="https://developer.android.com/topic/libraries/architecture/workmanager/how-to/chain-work.md">这里<i class="fa fa-external-link"></i></span></p><p>如果您需要更多灵活性的WorkManager并行化方式以及消息工作，检出我们<span class="exturl" data-url="aHR0cHM6Ly9kZXZlbG9wZXIuYW5kcm9pZC5jb20vdG9waWMvbGlicmFyaWVzL2FyY2hpdGVjdHVyZS93b3JrbWFuYWdlci9hZHZhbmNlZC90aHJlYWRpbmcubWQ=" title="https://developer.android.com/topic/libraries/architecture/workmanager/advanced/threading.md">高级线程向导<i class="fa fa-external-link"></i></span></p><h2 id="开发者有说什么"><a href="#开发者有说什么" class="headerlink" title="开发者有说什么"></a>开发者有说什么</h2><p><span class="exturl" data-url="aHR0cHM6Ly9wbGF5Lmdvb2dsZS5jb20vc3RvcmUvYXBwcy9kZXRhaWxzP2lkPWluLnJlZGJ1cy5hbmRyb2lk" title="https://play.google.com/store/apps/details?id=in.redbus.android">redBus<i class="fa fa-external-link"></i></span> ，最大在线巴士票务平台，分享他们使用WorkManager的经验，以简化他们在Android应用中收集用户反馈的方式：</p><blockquote><p><em>“随着我们扩展到其他国家，反馈对于readBus至关重要。一个用户给予了关于在redBus应用程序中功能至关重要的反馈，但是当应用程序尝试去上传反馈到后端，这儿或许没有足够的网络覆盖或者电量</em><br><em>WorkManager简化了redBus应用程序向后端提供信息的方式。WorkManager库处理像网络连接、电量参数的能力以及使用像AlarmManager或者JobScheduler适当的处理程序，使我们能够专注于构建业务逻辑并将执行复杂性卸载到WorkManager</em></p></blockquote><p>   ——  Dinesh Shanmugam</p><p>   Android Lead, redBus.in</p><h2 id="开始使用-WorkManager"><a href="#开始使用-WorkManager" class="headerlink" title="开始使用 WorkManager"></a>开始使用 WorkManager</h2><p>根据您后台任务的需要，检出我们<span class="exturl" data-url="aHR0cHM6Ly9kZXZlbG9wZXIuYW5kcm9pZC5jb20vdG9waWMvbGlicmFyaWVzL2FyY2hpdGVjdHVyZS93b3JrbWFuYWdlci9iYXNpY3M=" title="https://developer.android.com/topic/libraries/architecture/workmanager/basics">开始使用向导<i class="fa fa-external-link"></i></span>和<span class="exturl" data-url="aHR0cHM6Ly9jb2RlbGFicy5kZXZlbG9wZXJzLmdvb2dsZS5jb20vY29kZWxhYnMvYW5kcm9pZC13b3JrbWFuYWdlci1rdC8jMA==" title="https://codelabs.developers.google.com/codelabs/android-workmanager-kt/#0">codelab<i class="fa fa-external-link"></i></span>动手去使用WorkManager库</p><p>我们欣赏您的反馈，包括您喜欢的新功能以及您希望看到的新功能</p><p>如果您发现了一个bug或者issue,随时<span class="exturl" data-url="aHR0cHM6Ly9pc3N1ZXRyYWNrZXIuZ29vZ2xlLmNvbS9pc3N1ZXMvbmV3P2NvbXBvbmVudD00MDk5MDYmdGVtcGxhdGU9MTA5NDE5Nw==" title="https://issuetracker.google.com/issues/new?component=409906&template=1094197">提出问题<i class="fa fa-external-link"></i></span></p><blockquote><p>以上是对Android官网博客文章的翻译，如果不足，欢迎指正，谢谢</p></blockquote>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;原文来自: &lt;a href=&quot;https://android-developers.googleblog.com/2019/03/android-jetpack-workmanager-stable.html&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Android Jetpack WorkManager Stable Release&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="Android" scheme="https://shoewann0402.github.io/categories/Android/"/>
    
      <category term="Jetpack" scheme="https://shoewann0402.github.io/categories/Android/Jetpack/"/>
    
      <category term="WorkManager" scheme="https://shoewann0402.github.io/categories/Android/Jetpack/WorkManager/"/>
    
    
      <category term="Android" scheme="https://shoewann0402.github.io/tags/Android/"/>
    
      <category term="WorkManager" scheme="https://shoewann0402.github.io/tags/WorkManager/"/>
    
      <category term="Jetpack" scheme="https://shoewann0402.github.io/tags/Jetpack/"/>
    
  </entry>
  
  <entry>
    <title>Android P 默认通过TLS保护用户</title>
    <link href="https://shoewann0402.github.io/2018/04/11/protecting-users-with-tls-by-default-in/"/>
    <id>https://shoewann0402.github.io/2018/04/11/protecting-users-with-tls-by-default-in/</id>
    <published>2018-04-11T14:29:28.000Z</published>
    <updated>2019-03-11T09:33:32.000Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>原文来自：<span class="exturl" data-url="aHR0cHM6Ly9hbmRyb2lkLWRldmVsb3BlcnMuZ29vZ2xlYmxvZy5jb20vMjAxOC8wNC9wcm90ZWN0aW5nLXVzZXJzLXdpdGgtdGxzLWJ5LWRlZmF1bHQtaW4uaHRtbA==" title="https://android-developers.googleblog.com/2018/04/protecting-users-with-tls-by-default-in.html">Protecting users with TLS by default in Android P<i class="fa fa-external-link"></i></span></p></blockquote><p>Android承诺去保持用户他们的设备和数据安全。保持数据安全之一的方式是,通过保护Android设备在进入或者离开中转传输层安全（TLS）的所有数据。正如我们在Android P开发者预览版中<span class="exturl" data-url="aHR0cHM6Ly9hbmRyb2lkLWRldmVsb3BlcnMuZ29vZ2xlYmxvZy5jb20vMjAxOC8wMy9wcmV2aWV3aW5nLWFuZHJvaWQtcC5odG1s" title="https://android-developers.googleblog.com/2018/03/previewing-android-p.html">宣布<i class="fa fa-external-link"></i></span>的那样，我们将进一步改善这些保护，通过阻止目标版本是Android P的应用程序来自默认允许未加密的连接。</p><a id="more"></a><p>这是我们为保护Android用户，多年来做出的各种改变。去阻止偶发的未加密连接，在Android Marshmallow(6.0)中我们介绍了android:usesCleartextTraffic清单属性。在Android Nougat(7.0),我们通过创建<span class="exturl" data-url="aHR0cHM6Ly9kZXZlbG9wZXIuYW5kcm9pZC5jb20vdHJhaW5pbmcvYXJ0aWNsZXMvc2VjdXJpdHktY29uZmlnLmh0bWw=" title="https://developer.android.com/training/articles/security-config.html">Network Security Config<i class="fa fa-external-link"></i></span>(网络安全配置)功能特性去扩展了这个属性，允许应用程序去表明它们不打算在没有加密的情况下发送网络流量。在Android Nougat(7.0)和Android Oreo(8.0)，我们仍然允许明文连接。</p><h1 id="我怎么更新我的应用程序？"><a href="#我怎么更新我的应用程序？" class="headerlink" title="我怎么更新我的应用程序？"></a>我怎么更新我的应用程序？</h1><p>如果你的应用程序对于所有的连接都使用了TLS，然后你不需要做什么了。如果你还没有，就去使用TLS去加密所有的连接更新你的应用程序。如果你仍然需要去使用明文进行连接,继续去阅读一下最佳做法。</p><h1 id="为什么我应该使用TLS？"><a href="#为什么我应该使用TLS？" class="headerlink" title="为什么我应该使用TLS？"></a>为什么我应该使用TLS？</h1><p>Android考虑到所有的网络可能有敌意，因此加密流量应该在所有时间对于所有的连接都被使用。移动设备尤其面临风险，因为它们经常会连接到许多不同的网络，比如在咖啡店的Wi-Fi</p><p>所有的流量应该被加密，无论内容是什么。作为任意一种未加密的连接能够注入内容被使用，对于那些可能弱势的客户端代码增加攻击面，或者攻击用户。更多信息，看我们过去的<span class="exturl" data-url="aHR0cHM6Ly9hbmRyb2lkLWRldmVsb3BlcnMuZ29vZ2xlYmxvZy5jb20vMjAxNi8wNC9wcm90ZWN0aW5nLWFnYWluc3QtdW5pbnRlbnRpb25hbC5odG1s" title="https://android-developers.googleblog.com/2016/04/protecting-against-unintentional.html">博客文章<i class="fa fa-external-link"></i></span>和<span class="exturl" data-url="aHR0cHM6Ly93d3cueW91dHViZS5jb20vd2F0Y2g/dj1mY1dWVjBIYWZ1ayZ0PTFz" title="https://www.youtube.com/watch?v=fcWVV0Hafuk&t=1s">开发者高峰论坛<i class="fa fa-external-link"></i></span></p><h1 id="TLS是不是很慢？"><a href="#TLS是不是很慢？" class="headerlink" title="TLS是不是很慢？"></a>TLS是不是很慢？</h1><p><span class="exturl" data-url="aHR0cHM6Ly9pc3Rsc2Zhc3R5ZXQuY29tLw==" title="https://istlsfastyet.com/">不，它不是<i class="fa fa-external-link"></i></span></p><h1 id="我如何在我的应用程序中使用TLS"><a href="#我如何在我的应用程序中使用TLS" class="headerlink" title="我如何在我的应用程序中使用TLS ?"></a>我如何在我的应用程序中使用TLS ?</h1><p>只要你的服务器支持TLS, 只需要在你的应用程序和服务器响应中把URLs 从http://改变成https:// 。你的HTTP栈处理TLS握手，无需其他更多操作。</p><p>如果你是自己制作的Socket,使用<span class="exturl" data-url="aHR0cHM6Ly9kZXZlbG9wZXIuYW5kcm9pZC5jb20vcmVmZXJlbmNlL2phdmF4L25ldC9zc2wvU1NMU29ja2V0RmFjdG9yeS5odG1s" title="https://developer.android.com/reference/javax/net/ssl/SSLSocketFactory.html">SSLSocketFactory<i class="fa fa-external-link"></i></span>去替代<span class="exturl" data-url="aHR0cHM6Ly9kZXZlbG9wZXIuYW5kcm9pZC5jb20vcmVmZXJlbmNlL2phdmF4L25ldC9Tb2NrZXRGYWN0b3J5Lmh0bWw=" title="https://developer.android.com/reference/javax/net/SocketFactory.html">SocketFactory<i class="fa fa-external-link"></i></span><br>要格外小心去正确使用作为SSLSocket的socket，它不会去验证主机。你的应用程序需要做的是它自己的主机验证。优选通过调用<span class="exturl" data-url="aHR0cHM6Ly9kZXZlbG9wZXIuYW5kcm9pZC5jb20vcmVmZXJlbmNlL2phdmF4L25ldC9zc2wvSHR0cHNVUkxDb25uZWN0aW9uLmh0bWwjZ2V0RGVmYXVsdEhvc3RuYW1lVmVyaWZpZXIoKQ==" title="https://developer.android.com/reference/javax/net/ssl/HttpsURLConnection.html#getDefaultHostnameVerifier()">getDefaultHostnameVerifier()<i class="fa fa-external-link"></i></span>期望的主机名。进一步，谨防<span class="exturl" data-url="aHR0cHM6Ly9kZXZlbG9wZXIuYW5kcm9pZC5jb20vcmVmZXJlbmNlL2phdmF4L25ldC9zc2wvSG9zdG5hbWVWZXJpZmllci5odG1sI3ZlcmlmeShqYXZhLmxhbmcuU3RyaW5nLCUyMGphdmF4Lm5ldC5zc2wuU1NMU2Vzc2lvbik=" title="https://developer.android.com/reference/javax/net/ssl/HostnameVerifier.html#verify(java.lang.String,%20javax.net.ssl.SSLSession)">HostnameVerifier.verify()<i class="fa fa-external-link"></i></span>在发生异常时不会抛出错误，但是相反的會返回一个boolean的结果，你必须明确的检查。</p><h1 id="我需要去使用一个明文去…"><a href="#我需要去使用一个明文去…" class="headerlink" title="我需要去使用一个明文去…"></a>我需要去使用一个明文去…</h1><p>当你应该对所有连接使用TLS，可能你需要去使用一个明文流量针对于遗留原因。比如连接到一些服务器。因此，改变你的应用程序的网络安全配置，以允许这些连接。</p><p>我们包括了一组示例配置，更多帮助查看<span class="exturl" data-url="aHR0cHM6Ly9kZXZlbG9wZXIuYW5kcm9pZC5jb20vdHJhaW5pbmcvYXJ0aWNsZXMvc2VjdXJpdHktY29uZmlnLmh0bWw=" title="https://developer.android.com/training/articles/security-config.html">network security config<i class="fa fa-external-link"></i></span>文档。</p><h1 id="允许明文连接到一个具体的域，你可以使用如下的配置作为一个向导："><a href="#允许明文连接到一个具体的域，你可以使用如下的配置作为一个向导：" class="headerlink" title="允许明文连接到一个具体的域，你可以使用如下的配置作为一个向导："></a>允许明文连接到一个具体的域，你可以使用如下的配置作为一个向导：</h1><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">network-security-config</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">domain-config</span> <span class="attr">cleartextTrafficPermitted</span>=<span class="string">"true"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">domain</span> <span class="attr">includeSubdomains</span>=<span class="string">"true"</span>&gt;</span>insecure.example.com<span class="tag">&lt;/<span class="name">domain</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">domain</span> <span class="attr">includeSubdomains</span>=<span class="string">"true"</span>&gt;</span>insecure.cdn.example.com<span class="tag">&lt;/<span class="name">domain</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">domain-config</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">network-security-config</span>&gt;</span></span><br></pre></td></tr></table></figure><h1 id="允许连接到任意不安全的域"><a href="#允许连接到任意不安全的域" class="headerlink" title="允许连接到任意不安全的域"></a>允许连接到任意不安全的域</h1><p>如果你的应用程序支持打开任意来自不安全URLs的内容，当支持明文连接到任意主机，你应该禁用明文连接到你自己的服务器。记住，对于这些通过<br>不安全连接接收到的数据你应该谨慎，它能够在传输的过程当中被篡改。</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">network-security-config</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">domain-config</span> <span class="attr">cleartextTrafficPermitted</span>=<span class="string">"false"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">domain</span> <span class="attr">includeSubdomains</span>=<span class="string">"true"</span>&gt;</span>example.com<span class="tag">&lt;/<span class="name">domain</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">domain</span> <span class="attr">includeSubdomains</span>=<span class="string">"true"</span>&gt;</span>cdn.example2.com<span class="tag">&lt;/<span class="name">domain</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">domain-config</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">base-config</span> <span class="attr">cleartextTrafficPermitted</span>=<span class="string">"true"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">network-security-config</span>&gt;</span></span><br></pre></td></tr></table></figure><h1 id="我应该怎么更新我的库？"><a href="#我应该怎么更新我的库？" class="headerlink" title="我应该怎么更新我的库？"></a>我应该怎么更新我的库？</h1><p>如果你的库是直接创建安全/不安全的连接，确保它在打开任意明文连接之前通过检查<span class="exturl" data-url="aHR0cHM6Ly9kZXZlbG9wZXIuYW5kcm9pZC5jb20vcmVmZXJlbmNlL2FuZHJvaWQvc2VjdXJpdHkvTmV0d29ya1NlY3VyaXR5UG9saWN5Lmh0bWwjaXNDbGVhcnRleHRUcmFmZmljUGVybWl0dGVkKGphdmEubGFuZy5TdHJpbmcp" title="https://developer.android.com/reference/android/security/NetworkSecurityPolicy.html#isCleartextTrafficPermitted(java.lang.String)">isCleartextTrafficPermitted<i class="fa fa-external-link"></i></span>来尊重应用程序明文设置。</p><blockquote><p>以上是对Android官网博客文章的翻译，如果不足，欢迎指正，谢谢</p></blockquote>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;原文来自：&lt;a href=&quot;https://android-developers.googleblog.com/2018/04/protecting-users-with-tls-by-default-in.html&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Protecting users with TLS by default in Android P&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Android承诺去保持用户他们的设备和数据安全。保持数据安全之一的方式是,通过保护Android设备在进入或者离开中转传输层安全（TLS）的所有数据。正如我们在Android P开发者预览版中&lt;a href=&quot;https://android-developers.googleblog.com/2018/03/previewing-android-p.html&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;宣布&lt;/a&gt;的那样，我们将进一步改善这些保护，通过阻止目标版本是Android P的应用程序来自默认允许未加密的连接。&lt;/p&gt;
    
    </summary>
    
      <category term="TLS" scheme="https://shoewann0402.github.io/categories/TLS/"/>
    
      <category term="android p" scheme="https://shoewann0402.github.io/categories/TLS/android-p/"/>
    
    
      <category term="android p" scheme="https://shoewann0402.github.io/tags/android-p/"/>
    
      <category term="android security" scheme="https://shoewann0402.github.io/tags/android-security/"/>
    
      <category term="connection encryption" scheme="https://shoewann0402.github.io/tags/connection-encryption/"/>
    
      <category term="HTTPS" scheme="https://shoewann0402.github.io/tags/HTTPS/"/>
    
      <category term="network security" scheme="https://shoewann0402.github.io/tags/network-security/"/>
    
      <category term="TLS" scheme="https://shoewann0402.github.io/tags/TLS/"/>
    
      <category term="TLS by default" scheme="https://shoewann0402.github.io/tags/TLS-by-default/"/>
    
  </entry>
  
  <entry>
    <title>Android Studio 切换到D8 dexer</title>
    <link href="https://shoewann0402.github.io/2018/04/07/android-studio-switching-to-d8-dexer/"/>
    <id>https://shoewann0402.github.io/2018/04/07/android-studio-switching-to-d8-dexer/</id>
    <published>2018-04-07T01:58:21.000Z</published>
    <updated>2019-03-11T09:33:32.000Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>原文来自：<span class="exturl" data-url="aHR0cHM6Ly9hbmRyb2lkLWRldmVsb3BlcnMuZ29vZ2xlYmxvZy5jb20vMjAxOC8wNC9hbmRyb2lkLXN0dWRpby1zd2l0Y2hpbmctdG8tZDgtZGV4ZXIuaHRtbA==" title="https://android-developers.googleblog.com/2018/04/android-studio-switching-to-d8-dexer.html">Android Studio switching to D8 dexer<i class="fa fa-external-link"></i></span></p></blockquote><a id="more"></a><h1 id="D8现在是默认的dex编译器"><a href="#D8现在是默认的dex编译器" class="headerlink" title="D8现在是默认的dex编译器"></a>D8现在是默认的dex编译器</h1><p>更快、更小的应用程序编译一直是Android工具团队的目标，那也是为什么我们此前宣布了<span class="exturl" data-url="aHR0cHM6Ly9hbmRyb2lkLWRldmVsb3BlcnMuZ29vZ2xlYmxvZy5jb20vMjAxNy8wOC9uZXh0LWdlbmVyYXRpb24tZGV4LWNvbXBpbGVyLW5vdy1pbi5odG1s" title="https://android-developers.googleblog.com/2017/08/next-generation-dex-compiler-now-in.html">D8<i class="fa fa-external-link"></i></span>,下一代的dex编译器。相比历史编译器-DX,D8运行更快并生成更小的.dex文件具有相当或者更佳的运行时性能。</p><p>我们最近宣布了D8成为Android Studio 3.1中默认的编译器。如果你之前还没有去尝试D8，我们希望你在切换的时候注意到更佳、更快的dex编译。</p><p>D8首次在Android Studio3.0中作为一个可选的功能被发出。除此之外我们自己也在严格测试，我们现在已经看到了它在各种各样的应用程序中良好的表现。最后，我们确信D8对于每一个开始在3.1中使用他的人来说都将良好运作。然而，如果你在使用的时候有什么问题，你现在能够通过在你的项目gradle.properties文件下一直设置如下还原到DX</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">android.enableD8=<span class="keyword">false</span></span><br></pre></td></tr></table></figure><p>如果你确实遇到什么问题导致你禁用了D8，请<span class="exturl" data-url="aHR0cHM6Ly9pc3N1ZXRyYWNrZXIuZ29vZ2xlLmNvbS9pc3N1ZXMvbmV3P2NvbXBvbmVudD0xOTI3MDgmdGVtcGxhdGU9ODQwNTMz" title="https://issuetracker.google.com/issues/new?component=192708&template=840533">让我们知道!<i class="fa fa-external-link"></i></span></p><h1 id="下一步"><a href="#下一步" class="headerlink" title="下一步"></a>下一步</h1><p>我们的目标是确保每一个人都能访问到快速、正确的dex编译器。因此避免冒着任一個用户的回归，我们将分为3个阶段去弃用DX</p><p>第一阶段打算防止过早的弃用DX。在这个阶段期间，DX将仍然可以在studio中使用。我们将修复它的关键性问题，但是不会再有新的功能特性了。这个阶段将会持续至少6个月，期间我们将打开任何一个D8的错误去决定如果是回归，将会阻止一些用户使用D8替换DX。第一个阶段直到团队解决完全部的迁移阻滞者问题才会结束。在这个窗口中我们将会特别注意到错误追踪器，因此如果你遭遇任何回归，<span class="exturl" data-url="aHR0cHM6Ly9pc3N1ZXRyYWNrZXIuZ29vZ2xlLmNvbS9pc3N1ZXMvbmV3P2NvbXBvbmVudD0xOTI3MDgmdGVtcGxhdGU9ODQwNTMz" title="https://issuetracker.google.com/issues/new?component=192708&template=840533">请提出问题<i class="fa fa-external-link"></i></span>。</p><p>一旦我们将查看6个月的窗口没有了D8替换DX的主要回归问题，我们将进入第二阶段。这个阶段将会至少是一年，打算确保那些即使是复杂的项目都有大量时间去进行迁移。在这个阶段期间，我们仍然保持着DX可用，但是我们将它视为完全弃用，我们将不会修复它的任何问题。</p><p>再第三阶段也就是最后阶段，DX将会从Android Studio中移除。在此时，为了能继续使用DX去构建，你将需要使用一个legacy版本的Android Gradle插件。</p><blockquote><p>以上是对Android官网博客文章的翻译，如果不足，欢迎指正，谢谢</p></blockquote>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;原文来自：&lt;a href=&quot;https://android-developers.googleblog.com/2018/04/android-studio-switching-to-d8-dexer.html&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Android Studio switching to D8 dexer&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="Dex" scheme="https://shoewann0402.github.io/categories/Dex/"/>
    
      <category term="Android Studio" scheme="https://shoewann0402.github.io/categories/Dex/Android-Studio/"/>
    
    
      <category term="Android Studio" scheme="https://shoewann0402.github.io/tags/Android-Studio/"/>
    
      <category term="Dex" scheme="https://shoewann0402.github.io/tags/Dex/"/>
    
  </entry>
  
  <entry>
    <title>关于Android O 通知渠道总结</title>
    <link href="https://shoewann0402.github.io/2018/01/08/about-android-o-notification-channels/"/>
    <id>https://shoewann0402.github.io/2018/01/08/about-android-o-notification-channels/</id>
    <published>2018-01-08T02:56:22.000Z</published>
    <updated>2019-03-11T09:33:32.000Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>本文是关于针对Android O 通知渠道的总结。 </p></blockquote><a id="more"></a><p>Android O 引入了通知渠道<span class="exturl" data-url="aHR0cHM6Ly9kZXZlbG9wZXIuYW5kcm9pZC5nb29nbGUuY24vZ3VpZGUvdG9waWNzL3VpL25vdGlmaWVycy9ub3RpZmljYXRpb25zLmh0bWwjTWFuYWdlQ2hhbm5lbHM=" title="https://developer.android.google.cn/guide/topics/ui/notifiers/notifications.html#ManageChannels">Notification Channels<i class="fa fa-external-link"></i></span>，更好的方便用户管理通知栏消息。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">NotificationChannel</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">final</span> <span class="class"><span class="keyword">class</span> <span class="title">NotificationChannel</span> </span></span><br><span class="line"><span class="class"><span class="keyword">extends</span> <span class="title">Object</span> <span class="keyword">implements</span> <span class="title">Parcelable</span></span></span><br><span class="line"><span class="class"></span></span><br><span class="line"><span class="class"><span class="title">java</span>.<span class="title">lang</span>.<span class="title">Object</span></span></span><br><span class="line"><span class="class">   ↳<span class="title">android</span>.<span class="title">app</span>.<span class="title">NotificationChannel</span></span></span><br></pre></td></tr></table></figure><p>距离上一次总结通知栏相关的东西好像有很久了，可以去<span class="exturl" data-url="aHR0cDovL3Nob2V3YW5uLnRvcC8yMDE2LzA1LzEyL0FuZHJvaWQtTm90aWZpY2F0aW9uLSVFOSU4MCU5QSVFNyU5RiVBNSVFNiVBMCVCNyVFNSVCQyU4RiVFNiU4MCVCQiVFNyVCQiU5My8=" title="http://shoewann.top/2016/05/12/Android-Notification-%E9%80%9A%E7%9F%A5%E6%A0%B7%E5%BC%8F%E6%80%BB%E7%BB%93/">这里查看<i class="fa fa-external-link"></i></span></p><p>今天我们从一个基本的通知示例开始，来总结下Android O 通知渠道相关的使用。</p><h2 id="基本示例"><a href="#基本示例" class="headerlink" title="基本示例"></a>基本示例</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//创建通知栏管理对象</span></span><br><span class="line">NotificationManager mNotificationManager = (NotificationManager) getSystemService(NOTIFICATION_SERVICE);</span><br><span class="line"><span class="comment">//为了版本兼容  选择V7包下的NotificationCompat进行构造</span></span><br><span class="line">NotificationCompat.Builder builder = <span class="keyword">new</span> NotificationCompat.Builder(<span class="keyword">this</span>);</span><br><span class="line"><span class="comment">//setTicker 在5.0以上不显示Ticker属性信息</span></span><br><span class="line">builder.setTicker(<span class="string">"状态栏显示的提示"</span>);;</span><br><span class="line"><span class="comment">//setContentTitle 通知栏通知的标题</span></span><br><span class="line">builder.setContentTitle(<span class="string">"内容标题"</span>);</span><br><span class="line"><span class="comment">//setContentText  通知栏通知的详细内容</span></span><br><span class="line">builder.setContentText(<span class="string">"内容文本信息"</span>);</span><br><span class="line"><span class="comment">//setAutoCancel 点击通知的清除按钮是否清除该消息（true/false）</span></span><br><span class="line">builder.setAutoCancel(<span class="keyword">true</span>);</span><br><span class="line"><span class="comment">//setLargeIcon  通知消息上的大图标</span></span><br><span class="line">builder.setLargeIcon(BitmapFactory.decodeResource(getResources(), R.mipmap.ic_launcher));</span><br><span class="line"><span class="comment">//setSmallIcon  通知上面的小图标</span></span><br><span class="line">builder.setSmallIcon(R.mipmap.ic_launcher);<span class="comment">//小图标</span></span><br><span class="line"><span class="comment">//创建一个意图</span></span><br><span class="line">Intent intent = <span class="keyword">new</span> Intent(Intent.ACTION_VIEW, Uri.parse(<span class="string">"https://www.baidu.com"</span>));</span><br><span class="line">PendingIntent pIntent = PendingIntent.getActivity(<span class="keyword">this</span>, <span class="number">1</span>, intent, <span class="number">0</span>);</span><br><span class="line"><span class="comment">//setContentIntent  将意图设置到通知上</span></span><br><span class="line">builder.setContentIntent(pIntent);</span><br><span class="line"><span class="comment">//通知默认的声音 震动 呼吸灯</span></span><br><span class="line">builder.setDefaults(NotificationCompat.DEFAULT_ALL);</span><br><span class="line"><span class="comment">//构建通知</span></span><br><span class="line">Notification notification = builder.build();</span><br><span class="line"><span class="comment">//将构建好的通知添加到通知管理器中，执行通知</span></span><br><span class="line">mNotificationManager.notify(<span class="number">0</span>, notification);</span><br></pre></td></tr></table></figure><p>这段代码很简单，已经添加了注释，没有什么可以说的。</p><h2 id="差异复现"><a href="#差异复现" class="headerlink" title="差异复现"></a>差异复现</h2><h3 id="SDK-lt-8-0-API-26"><a href="#SDK-lt-8-0-API-26" class="headerlink" title="SDK &lt; 8.0(API 26)"></a>SDK &lt; 8.0(API 26)</h3><p>这种情况，上面的示例代码是能无障碍的将通知消息显示出来。</p><h3 id="SDK-gt-8-0-API-26"><a href="#SDK-gt-8-0-API-26" class="headerlink" title="SDK &gt; = 8.0(API 26)"></a>SDK &gt; = 8.0(API 26)</h3><p>这种情况，上面的示例代码，是死活都不会把通知消息显示出来的。</p><p>在Android Oreo上的开发者选项中，新增加了一个<strong>show notification channel warnings</strong>的选项功能，可以通过<strong>Settings</strong> &gt; <strong>System</strong> &gt; <strong>Developer options</strong> 下找到开启。</p><p>再次运行代码后，界面上会弹出类似于下面的这样一个<strong>Toast</strong>,告知你的通知消息post失败，详细情况查看log</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Developer warning for package &quot;com.shoewann.notificationsimple&quot; </span><br><span class="line">Failed to post notification on channel &quot;null&quot; </span><br><span class="line">See log for more details</span><br></pre></td></tr></table></figure><p>查看log是这样的：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">E/NotificationService: No Channel found for pkg=com.shoewann.notificationsimple, channelId=null, id=0, tag=null, opPkg=com.shoewann.notificationsimple, callingUid=10083, userId=0, incomingUserId=0, notificationUid=10083, notification=Notification(channel=null pri=0 contentView=null vibrate=default sound=default tick defaults=0xffffffff flags=0x11 color=0x00000000 vis=PRIVATE)</span><br></pre></td></tr></table></figure><p>通过跟踪查看相关源代码，分析到了，在NotificationCompat这个类中的Builder方法。</p><p>在版本<strong>com.android.support:appcompat-v7:26.1.0</strong>的兼容库中，可以看到传一个参数的<strong>Builder(Context context)</strong>方法已经过期，使用传入两个参数的<strong>Builder(@NonNull Context context, @NonNull String channelId)</strong>新方法代替。</p><p><strong>注意</strong>：该新方法需要传入的这两个参数都是标注了<strong>@NonNull</strong>，也就是<strong>不能传入null</strong>或者<strong>未初始化的变量</strong>。</p><h2 id="兼容代码"><a href="#兼容代码" class="headerlink" title="兼容代码"></a>兼容代码</h2><p>通过以上的分析，也就是我们在Android Oreo上面使用Notification，就必须要为你的Notification创建一个Notification Channels(通知渠道)。</p><h3 id="创建通知渠道"><a href="#创建通知渠道" class="headerlink" title="创建通知渠道"></a>创建通知渠道</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line">NotificationCompat.Builder builder = <span class="keyword">null</span>;</span><br><span class="line"><span class="keyword">if</span> (android.os.Build.VERSION.SDK_INT &gt;= android.os.Build.VERSION_CODES.O) &#123;</span><br><span class="line">    NotificationChannel channel = <span class="keyword">new</span> NotificationChannel(<span class="string">"通知渠道ID"</span>,</span><br><span class="line">                    <span class="string">"通知渠道名称"</span>, NotificationManager.IMPORTANCE_DEFAULT);</span><br><span class="line">    channel.enableLights(<span class="keyword">true</span>); <span class="comment">//设置开启指示灯，如果设备有的话</span></span><br><span class="line">    channel.setLightColor(Color.RED); <span class="comment">//设置指示灯颜色</span></span><br><span class="line">    channel.setShowBadge(<span class="keyword">true</span>); <span class="comment">//设置是否显示角标</span></span><br><span class="line">    channel.setLockscreenVisibility(Notification.VISIBILITY_PRIVATE);<span class="comment">//设置是否应在锁定屏幕上显示此频道的通知</span></span><br><span class="line">    channel.setDescription(<span class="string">"通知渠道描述"</span>);<span class="comment">//设置渠道描述</span></span><br><span class="line">    channel.setVibrationPattern(<span class="keyword">new</span> <span class="keyword">long</span>[]&#123;<span class="number">100</span>,<span class="number">200</span>,<span class="number">300</span>,<span class="number">400</span>,<span class="number">500</span>,<span class="number">600</span>&#125;);<span class="comment">//设置震动频率</span></span><br><span class="line">    channel.setBypassDnd(<span class="keyword">true</span>);<span class="comment">//设置是否绕过免打扰模式</span></span><br><span class="line">    mNotificationManager.createNotificationChannel(channel);</span><br><span class="line">    createNotificationChannelGroups();</span><br><span class="line">    setNotificationChannelGroups(channel);</span><br><span class="line">    builder = <span class="keyword">new</span> NotificationCompat.Builder(<span class="keyword">this</span>, <span class="string">"通知渠道ID"</span>);</span><br><span class="line">    builder.setBadgeIconType(BADGE_ICON_SMALL);<span class="comment">//设置显示角标的样式</span></span><br><span class="line">    builder.setNumber(<span class="number">3</span>);<span class="comment">//设置显示角标的数量</span></span><br><span class="line">    builder.setTimeoutAfter(<span class="number">5000</span>);<span class="comment">//设置通知被创建多长时间之后自动取消通知栏的通知。</span></span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">builder = <span class="keyword">new</span> NotificationCompat.Builder(<span class="keyword">this</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//setContentTitle 通知栏通知的标题</span></span><br><span class="line">builder.setContentTitle(<span class="string">"内容标题"</span>);</span><br><span class="line"><span class="comment">//setContentText  通知栏通知的详细内容</span></span><br><span class="line">builder.setContentText(<span class="string">"内容文本信息"</span>);</span><br><span class="line"><span class="comment">//setAutoCancel 点击通知的清除按钮是否清除该消息（true/false）</span></span><br><span class="line">builder.setAutoCancel(<span class="keyword">true</span>);</span><br><span class="line"><span class="comment">//setLargeIcon  通知消息上的大图标</span></span><br><span class="line">builder.setLargeIcon(BitmapFactory.decodeResource(getResources(), R.mipmap.ic_launcher));</span><br><span class="line"><span class="comment">//setSmallIcon  通知上面的小图标</span></span><br><span class="line">builder.setSmallIcon(R.mipmap.ic_launcher);<span class="comment">//小图标</span></span><br><span class="line"><span class="comment">//创建一个意图</span></span><br><span class="line">Intent intent = <span class="keyword">new</span> Intent(Intent.ACTION_VIEW, Uri.parse(<span class="string">"https://www.baidu.com"</span>));</span><br><span class="line">PendingIntent pIntent = PendingIntent.getActivity(<span class="keyword">this</span>, <span class="number">1</span>, intent, <span class="number">0</span>);</span><br><span class="line"><span class="comment">//setContentIntent  将意图设置到通知上</span></span><br><span class="line">builder.setContentIntent(pIntent);</span><br><span class="line"><span class="comment">//通知默认的声音 震动 呼吸灯</span></span><br><span class="line">builder.setDefaults(NotificationCompat.DEFAULT_ALL);</span><br><span class="line"><span class="comment">//构建通知</span></span><br><span class="line">Notification notification = builder.build();</span><br><span class="line"><span class="comment">//将构建好的通知添加到通知管理器中，执行通知</span></span><br><span class="line">mNotificationManager.notify(<span class="number">0</span>, notification);</span><br></pre></td></tr></table></figure><p>效果图:</p><p><img alt="android-o-notification-channel-1" data-src="/images/android-o-notification-channel-1.png"></p><p>向右滑动通知消息，可以显示延迟本条消息显示和设置选项</p><p><img alt="android-o-notification-channel-2" data-src="/images/android-o-notification-channel-2.png"></p><p>点击左边的延迟本条消息显示的时间</p><p><img alt="android-o-notification-channel-3" data-src="/images/android-o-notification-channel-3.png"></p><p>点击右边的设置选项，可以显示进入操作通知的设置入口</p><p><img alt="android-o-notification-channel-4" data-src="/images/android-o-notification-channel-4.png"></p><p>在桌面上的快捷方式上会显示角标</p><p><img alt="android-o-notification-channel-6" data-src="/images/android-o-notification-channel-6.png"></p><p>长按快捷方式，会在快捷方式旁边弹出通知栏窗口，显示通知栏消息等信息。</p><p><img alt="android-o-notification-channel-7" data-src="/images/android-o-notification-channel-7.png"></p><h3 id="移除通知渠道"><a href="#移除通知渠道" class="headerlink" title="移除通知渠道"></a>移除通知渠道</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (android.os.Build.VERSION.SDK_INT &gt;= android.os.Build.VERSION_CODES.O) &#123;</span><br><span class="line">    mNotificationManager.deleteNotificationChannel(<span class="string">"通知渠道ID"</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="跳转到通知渠道设置"><a href="#跳转到通知渠道设置" class="headerlink" title="跳转到通知渠道设置"></a>跳转到通知渠道设置</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (android.os.Build.VERSION.SDK_INT &gt;= android.os.Build.VERSION_CODES.O) &#123;</span><br><span class="line">    Intent intent = <span class="keyword">new</span> Intent(Settings.ACTION_CHANNEL_NOTIFICATION_SETTINGS);</span><br><span class="line">    intent.putExtra(Settings.EXTRA_CHANNEL_ID, <span class="string">"通知渠道ID"</span>);</span><br><span class="line">    intent.putExtra(Settings.EXTRA_APP_PACKAGE, getPackageName());</span><br><span class="line">    startActivity(intent);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img alt="android-o-notification-channel-5" data-src="/images/android-o-notification-channel-5.png"></p><h3 id="创建通知渠道组"><a href="#创建通知渠道组" class="headerlink" title="创建通知渠道组"></a>创建通知渠道组</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (android.os.Build.VERSION.SDK_INT &gt;= android.os.Build.VERSION_CODES.O) &#123;</span><br><span class="line">    mNotificationManager.createNotificationChannelGroup(<span class="keyword">new</span> NotificationChannelGroup(<span class="string">"通知渠道组ID"</span>, <span class="string">"通知渠道组名称"</span>));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="绑定通知渠道组"><a href="#绑定通知渠道组" class="headerlink" title="绑定通知渠道组"></a>绑定通知渠道组</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (android.os.Build.VERSION.SDK_INT &gt;= android.os.Build.VERSION_CODES.O) &#123;</span><br><span class="line">    channel.setGroup(<span class="string">"通知渠道组ID"</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>本文只是简要的总结了通知渠道的基本用法，还有更多的使用方法，请参考<span class="exturl" data-url="aHR0cHM6Ly9kZXZlbG9wZXIuYW5kcm9pZC5nb29nbGUuY24vcmVmZXJlbmNlL2FuZHJvaWQvYXBwL05vdGlmaWNhdGlvbkNoYW5uZWwuaHRtbA==" title="https://developer.android.google.cn/reference/android/app/NotificationChannel.html">Android官方文档-NotificationChannel<i class="fa fa-external-link"></i></span>。关于本文如有不足之处，欢迎指正，谢谢。</p></blockquote>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;本文是关于针对Android O 通知渠道的总结。 &lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="Android" scheme="https://shoewann0402.github.io/categories/Android/"/>
    
      <category term="Notification" scheme="https://shoewann0402.github.io/categories/Android/Notification/"/>
    
    
      <category term="Notification Channels" scheme="https://shoewann0402.github.io/tags/Notification-Channels/"/>
    
      <category term="Android O" scheme="https://shoewann0402.github.io/tags/Android-O/"/>
    
      <category term="通知渠道" scheme="https://shoewann0402.github.io/tags/%E9%80%9A%E7%9F%A5%E6%B8%A0%E9%81%93/"/>
    
  </entry>
  
  <entry>
    <title>关于Android WindowManager行为变化</title>
    <link href="https://shoewann0402.github.io/2018/01/01/about-android-windowmanager-behavior-changes/"/>
    <id>https://shoewann0402.github.io/2018/01/01/about-android-windowmanager-behavior-changes/</id>
    <published>2018-01-01T04:25:14.000Z</published>
    <updated>2019-03-11T09:33:32.000Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>本文是关于针对Android WindowManager悬浮窗行为变化的总结。</p></blockquote><a id="more"></a><h2 id="官方参考"><a href="#官方参考" class="headerlink" title="官方参考"></a>官方参考</h2><p><span class="exturl" data-url="aHR0cHM6Ly9kZXZlbG9wZXIuYW5kcm9pZC5nb29nbGUuY24vcmVmZXJlbmNlL2FuZHJvaWQvdmlldy9XaW5kb3dNYW5hZ2VyLmh0bWw=" title="https://developer.android.google.cn/reference/android/view/WindowManager.html"><strong>WindowManager</strong><i class="fa fa-external-link"></i></span><br>public interface WindowManager<br>implements ViewManager</p><p>android.view.WindowManager</p><h2 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h2><p>首先创建一个简单的WindowManager悬浮窗，具体代码如下:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.shoewann.windowmanager;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> android.graphics.PixelFormat;</span><br><span class="line"><span class="keyword">import</span> android.support.v7.app.AppCompatActivity;</span><br><span class="line"><span class="keyword">import</span> android.os.Bundle;</span><br><span class="line"><span class="keyword">import</span> android.view.Gravity;</span><br><span class="line"><span class="keyword">import</span> android.view.View;</span><br><span class="line"><span class="keyword">import</span> android.view.WindowManager;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.shoewann.windowmanager.view.FloatView;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MainActivity</span> <span class="keyword">extends</span> <span class="title">AppCompatActivity</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onCreate</span><span class="params">(Bundle savedInstanceState)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>.onCreate(savedInstanceState);</span><br><span class="line">        setContentView(R.layout.activity_main);</span><br><span class="line">        (findViewById(R.id.btn_show)).setOnClickListener(<span class="keyword">new</span> View.OnClickListener() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onClick</span><span class="params">(View view)</span> </span>&#123;</span><br><span class="line">                setUpFloatView();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setUpFloatView</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        WindowManager windowManager = (WindowManager) getSystemService(WINDOW_SERVICE);</span><br><span class="line">        FloatView floatView = <span class="keyword">new</span> FloatView(getApplicationContext());</span><br><span class="line">        WindowManager.LayoutParams params = <span class="keyword">new</span> WindowManager.LayoutParams();</span><br><span class="line">        params.type = WindowManager.LayoutParams.TYPE_PHONE;</span><br><span class="line">        params.format = PixelFormat.RGBA_8888;</span><br><span class="line">        params.gravity = Gravity.START | Gravity.TOP;</span><br><span class="line">        params.flags = WindowManager.LayoutParams.FLAG_NOT_TOUCH_MODAL | WindowManager.LayoutParams.FLAG_NOT_FOCUSABLE;</span><br><span class="line">        params.width = <span class="number">200</span>;</span><br><span class="line">        params.height = <span class="number">200</span>;</span><br><span class="line">        params.x = <span class="number">0</span>;</span><br><span class="line">        params.y = <span class="number">0</span>;</span><br><span class="line">        floatView.setImageResource(R.mipmap.ic_launcher_round);</span><br><span class="line">        windowManager.addView(floatView, params);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>上面的代码简单易懂，这里就不再进行解释了。</p><p>最后不要忘记了，在AndroidManifest.xml添加所需要的权限。</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">uses-permission</span> <span class="attr">android:name</span>=<span class="string">"android.permission.SYSTEM_ALERT_WINDOW"</span> /&gt;</span></span><br></pre></td></tr></table></figure><h2 id="行为变化"><a href="#行为变化" class="headerlink" title="行为变化"></a>行为变化</h2><h3 id="SDK-lt-Android-M"><a href="#SDK-lt-Android-M" class="headerlink" title="SDK &lt; Android M"></a>SDK &lt; Android M</h3><p>以上的示例代码，在这种情况下(比如Kitkat 4.4)的设备上现在就已经可以成功创建出一个系统悬浮窗了。</p><p>运行，效果图如下</p><p><img alt="windowmanager-k" data-src="/images/windowmanager-k.png"></p><h3 id="SDK-gt-Android-M"><a href="#SDK-gt-Android-M" class="headerlink" title="SDK &gt;= Android M"></a>SDK &gt;= Android M</h3><p>到了Android M 之后的设备，也就是targetSdkVersion要指定23(及其以上)，程序就会崩溃，抛出如下异常信息：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">E/AndroidRuntime: FATAL EXCEPTION: main</span><br><span class="line">                  Process: com.shoewann.windowmanager, PID: 3120</span><br><span class="line">                  android.view.WindowManager$BadTokenException: Unable to add window android.view.ViewRootImpl$W@c1fda7 -- permission denied for this window type</span><br><span class="line">                      at android.view.ViewRootImpl.setView(ViewRootImpl.java:591)</span><br><span class="line">                      at android.view.WindowManagerGlobal.addView(WindowManagerGlobal.java:310)</span><br><span class="line">                      at android.view.WindowManagerImpl.addView(WindowManagerImpl.java:85)</span><br><span class="line">                      at com.shoewann.windowmanager.MainActivity.setUpFloatView(MainActivity.java:39)</span><br><span class="line">                      at com.shoewann.windowmanager.MainActivity$1.onClick(MainActivity.java:21)</span><br><span class="line">                      at android.view.View.performClick(View.java:5198)</span><br><span class="line">                      at android.view.View$PerformClick.run(View.java:21147)</span><br><span class="line">                      at android.os.Handler.handleCallback(Handler.java:739)</span><br><span class="line">                      at android.os.Handler.dispatchMessage(Handler.java:95)</span><br><span class="line">                      at android.os.Looper.loop(Looper.java:148)</span><br><span class="line">                      at android.app.ActivityThread.main(ActivityThread.java:5417)</span><br><span class="line">                      at java.lang.reflect.Method.invoke(Native Method)</span><br><span class="line">                      at com.android.internal.os.ZygoteInit$MethodAndArgsCaller.run(ZygoteInit.java:726)</span><br><span class="line">                      at com.android.internal.os.ZygoteInit.main(ZygoteInit.java:616)</span><br></pre></td></tr></table></figure><p><strong>参考</strong>:<span class="exturl" data-url="aHR0cHM6Ly9kZXZlbG9wZXIuYW5kcm9pZC5nb29nbGUuY24vcmVmZXJlbmNlL2FuZHJvaWQvTWFuaWZlc3QucGVybWlzc2lvbi5odG1sI1dSSVRFX1NFVFRJTkdT" title="https://developer.android.google.cn/reference/android/Manifest.permission.html#WRITE_SETTINGS">SYSTEM_ALERT_WINDOW<i class="fa fa-external-link"></i></span></p><blockquote><p>Note: If the app targets API level 23 or higher, the app user must explicitly grant this permission to the app through a permission management screen. The app requests the user’s approval by sending an intent with action ACTION_MANAGE_OVERLAY_PERMISSION. The app can check whether it has this authorization by calling Settings.canDrawOverlays().</p></blockquote><p>官方的解释是，如果你的应用程序目标API等级为23或者更高版本，在使用SYSTEM_ALERT_WINDOW权限时，需要先调用Settings.canDrawOverlays()来判断一下是否允许创建悬浮窗，如果允许的话就可以创建了，不允许的话还要发送一个action值为ACTION_MANAGE_OVERLAY_PERMISSION的Intent来让用户同意创建悬浮窗。</p><p>针对该行为变化，对上面的示例代码进行了修改,添加<strong>权限请求</strong>，以兼容Android M：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.shoewann.windowmanager;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> android.content.Context;</span><br><span class="line"><span class="keyword">import</span> android.content.Intent;</span><br><span class="line"><span class="keyword">import</span> android.graphics.PixelFormat;</span><br><span class="line"><span class="keyword">import</span> android.net.Uri;</span><br><span class="line"><span class="keyword">import</span> android.os.Build;</span><br><span class="line"><span class="keyword">import</span> android.provider.Settings;</span><br><span class="line"><span class="keyword">import</span> android.support.v7.app.AppCompatActivity;</span><br><span class="line"><span class="keyword">import</span> android.os.Bundle;</span><br><span class="line"><span class="keyword">import</span> android.util.Log;</span><br><span class="line"><span class="keyword">import</span> android.view.Gravity;</span><br><span class="line"><span class="keyword">import</span> android.view.View;</span><br><span class="line"><span class="keyword">import</span> android.view.WindowManager;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.shoewann.windowmanager.view.FloatView;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Method;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MainActivity</span> <span class="keyword">extends</span> <span class="title">AppCompatActivity</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String TAG = <span class="string">"MainActivity"</span>;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onCreate</span><span class="params">(Bundle savedInstanceState)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>.onCreate(savedInstanceState);</span><br><span class="line">        setContentView(R.layout.activity_main);</span><br><span class="line">        (findViewById(R.id.btn_show)).setOnClickListener(<span class="keyword">new</span> View.OnClickListener() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onClick</span><span class="params">(View view)</span> </span>&#123;</span><br><span class="line">                <span class="keyword">if</span> (!commonROMPermissionCheck(MainActivity.<span class="keyword">this</span>)) &#123;</span><br><span class="line">                    requestAlertWindowPermission();</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    setUpFloatView();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setUpFloatView</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        Log.d(TAG, <span class="string">"setUpFloatView() called"</span>);</span><br><span class="line">        WindowManager windowManager = (WindowManager) getSystemService(WINDOW_SERVICE);</span><br><span class="line">        FloatView floatView = <span class="keyword">new</span> FloatView(getApplicationContext());</span><br><span class="line">        WindowManager.LayoutParams params = <span class="keyword">new</span> WindowManager.LayoutParams();</span><br><span class="line">        params.type = WindowManager.LayoutParams.TYPE_PHONE;</span><br><span class="line">        params.format = PixelFormat.RGBA_8888;</span><br><span class="line">        params.gravity = Gravity.START | Gravity.TOP;</span><br><span class="line">        params.flags = WindowManager.LayoutParams.FLAG_NOT_TOUCH_MODAL | WindowManager.LayoutParams.FLAG_NOT_FOCUSABLE;</span><br><span class="line">        params.width = <span class="number">200</span>;</span><br><span class="line">        params.height = <span class="number">200</span>;</span><br><span class="line">        params.x = <span class="number">0</span>;</span><br><span class="line">        params.y = <span class="number">0</span>;</span><br><span class="line">        floatView.setImageResource(R.mipmap.ic_launcher_round);</span><br><span class="line">        windowManager.addView(floatView, params);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> REQUEST_CODE = <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//判断权限</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">boolean</span> <span class="title">commonROMPermissionCheck</span><span class="params">(Context context)</span> </span>&#123;</span><br><span class="line">        Log.d(TAG, <span class="string">"commonROMPermissionCheck() called with: context = ["</span> + context + <span class="string">"]"</span>);</span><br><span class="line">        Boolean result = <span class="keyword">true</span>;</span><br><span class="line">        <span class="keyword">if</span> (Build.VERSION.SDK_INT &gt;= <span class="number">23</span>) &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                Class clazz = Settings.class;</span><br><span class="line">                Method canDrawOverlays = clazz.getDeclaredMethod(<span class="string">"canDrawOverlays"</span>, Context.class);</span><br><span class="line">                result = (Boolean) canDrawOverlays.invoke(<span class="keyword">null</span>, context);</span><br><span class="line">            &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">                Log.e(TAG, Log.getStackTraceString(e));</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//申请权限</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">requestAlertWindowPermission</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        Log.d(TAG, <span class="string">"requestAlertWindowPermission() called"</span>);</span><br><span class="line">        <span class="keyword">if</span> (android.os.Build.VERSION.SDK_INT &gt;= android.os.Build.VERSION_CODES.M) &#123;</span><br><span class="line">            Intent intent = <span class="keyword">new</span> Intent(Settings.ACTION_MANAGE_OVERLAY_PERMISSION);</span><br><span class="line">            intent.setData(Uri.parse(<span class="string">"package:"</span> + getPackageName()));</span><br><span class="line">            startActivityForResult(intent, REQUEST_CODE);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="comment">//处理回调</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onActivityResult</span><span class="params">(<span class="keyword">int</span> requestCode, <span class="keyword">int</span> resultCode, Intent data)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>.onActivityResult(requestCode, resultCode, data);</span><br><span class="line">        <span class="keyword">if</span> (requestCode == REQUEST_CODE) &#123;</span><br><span class="line">            <span class="keyword">if</span> (Build.VERSION.SDK_INT &gt;= Build.VERSION_CODES.M) &#123;</span><br><span class="line">                <span class="keyword">if</span> (Settings.canDrawOverlays(<span class="keyword">this</span>)) &#123;</span><br><span class="line">                    Log.i(TAG, <span class="string">"onActivityResult granted"</span>);</span><br><span class="line">                    setUpFloatView();</span><br><span class="line">                &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">                    Log.i(TAG, <span class="string">"onActivityResult denied"</span>);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>运行,效果图如下</p><p><img alt="windowmanager-m" data-src="/images/windowmanager-m.png"></p><h4 id="SDK-gt-Android-O"><a href="#SDK-gt-Android-O" class="headerlink" title="SDK &gt;= Android O"></a>SDK &gt;= Android O</h4><p>到了Android O 的设备运行上面在M上二次修改的动态请求权限的代码，程序抛出运行时异常，随后崩溃，这又是为什么呢？</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">E/AndroidRuntime: FATAL EXCEPTION: main</span><br><span class="line">                  Process: com.shoewann.windowmanager, PID: 17929</span><br><span class="line">                  android.view.WindowManager$BadTokenException: Unable to add window android.view.ViewRootImpl$W@d422e7c -- permission denied for window type 2002</span><br><span class="line">                      at android.view.ViewRootImpl.setView(ViewRootImpl.java:789)</span><br><span class="line">                      at android.view.WindowManagerGlobal.addView(WindowManagerGlobal.java:356)</span><br><span class="line">                      at android.view.WindowManagerImpl.addView(WindowManagerImpl.java:93)</span><br><span class="line">                      at com.shoewann.windowmanager.MainActivity.setUpFloatView(MainActivity.java:54)</span><br><span class="line">                      at com.shoewann.windowmanager.MainActivity$1.onClick(MainActivity.java:34)</span><br><span class="line">                      at android.view.View.performClick(View.java:6294)</span><br><span class="line">                      at android.view.View$PerformClick.run(View.java:24770)</span><br><span class="line">                      at android.os.Handler.handleCallback(Handler.java:790)</span><br><span class="line">                      at android.os.Handler.dispatchMessage(Handler.java:99)</span><br><span class="line">                      at android.os.Looper.loop(Looper.java:164)</span><br><span class="line">                      at android.app.ActivityThread.main(ActivityThread.java:6494)</span><br><span class="line">                      at java.lang.reflect.Method.invoke(Native Method)</span><br><span class="line">                      at com.android.internal.os.RuntimeInit$MethodAndArgsCaller.run(RuntimeInit.java:438)</span><br><span class="line">                      at com.android.internal.os.ZygoteInit.main(ZygoteInit.java:807)</span><br></pre></td></tr></table></figure><p>查阅Android Oreo官方文档，<span class="exturl" data-url="aHR0cHM6Ly9kZXZlbG9wZXIuYW5kcm9pZC5nb29nbGUuY24vYWJvdXQvdmVyc2lvbnMvb3Jlby9hbmRyb2lkLTguMC1jaGFuZ2VzLmh0bWwjY3d0" title="https://developer.android.google.cn/about/versions/oreo/android-8.0-changes.html#cwt">Alert windows行为变化<i class="fa fa-external-link"></i></span></p><p>应用程序使用<span class="exturl" data-url="aHR0cHM6Ly9kZXZlbG9wZXIuYW5kcm9pZC5nb29nbGUuY24vcmVmZXJlbmNlL2FuZHJvaWQvTWFuaWZlc3QucGVybWlzc2lvbi5odG1sI1NZU1RFTV9BTEVSVF9XSU5ET1c=" title="https://developer.android.google.cn/reference/android/Manifest.permission.html#SYSTEM_ALERT_WINDOW">SYSTEM_ALERT_WINDOW<i class="fa fa-external-link"></i></span>权限时，不再支持如下窗口类型在其他应用和系统窗口之上显示警告窗口了：</p><blockquote><ul><li><span class="exturl" data-url="aHR0cHM6Ly9kZXZlbG9wZXIuYW5kcm9pZC5nb29nbGUuY24vcmVmZXJlbmNlL2FuZHJvaWQvdmlldy9XaW5kb3dNYW5hZ2VyLkxheW91dFBhcmFtcy5odG1sI1RZUEVfUEhPTkU=" title="https://developer.android.google.cn/reference/android/view/WindowManager.LayoutParams.html#TYPE_PHONE">TYPE_PHONE<i class="fa fa-external-link"></i></span></li><li><span class="exturl" data-url="aHR0cHM6Ly9kZXZlbG9wZXIuYW5kcm9pZC5nb29nbGUuY24vcmVmZXJlbmNlL2FuZHJvaWQvdmlldy9XaW5kb3dNYW5hZ2VyLkxheW91dFBhcmFtcy5odG1sI1RZUEVfUFJJT1JJVFlfUEhPTkU=" title="https://developer.android.google.cn/reference/android/view/WindowManager.LayoutParams.html#TYPE_PRIORITY_PHONE">TYPE_PRIORITY_PHONE<i class="fa fa-external-link"></i></span></li><li><span class="exturl" data-url="aHR0cHM6Ly9kZXZlbG9wZXIuYW5kcm9pZC5nb29nbGUuY24vcmVmZXJlbmNlL2FuZHJvaWQvdmlldy9XaW5kb3dNYW5hZ2VyLkxheW91dFBhcmFtcy5odG1sI1RZUEVfU1lTVEVNX0FMRVJU" title="https://developer.android.google.cn/reference/android/view/WindowManager.LayoutParams.html#TYPE_SYSTEM_ALERT">TYPE_SYSTEM_ALERT<i class="fa fa-external-link"></i></span></li><li><span class="exturl" data-url="aHR0cHM6Ly9kZXZlbG9wZXIuYW5kcm9pZC5nb29nbGUuY24vcmVmZXJlbmNlL2FuZHJvaWQvdmlldy9XaW5kb3dNYW5hZ2VyLkxheW91dFBhcmFtcy5odG1sI1RZUEVfU1lTVEVNX09WRVJMQVk=" title="https://developer.android.google.cn/reference/android/view/WindowManager.LayoutParams.html#TYPE_SYSTEM_OVERLAY">TYPE_SYSTEM_OVERLAY<i class="fa fa-external-link"></i></span></li><li><span class="exturl" data-url="aHR0cHM6Ly9kZXZlbG9wZXIuYW5kcm9pZC5nb29nbGUuY24vcmVmZXJlbmNlL2FuZHJvaWQvdmlldy9XaW5kb3dNYW5hZ2VyLkxheW91dFBhcmFtcy5odG1sI1RZUEVfU1lTVEVNX0VSUk9S" title="https://developer.android.google.cn/reference/android/view/WindowManager.LayoutParams.html#TYPE_SYSTEM_ERROR">TYPE_SYSTEM_ERROR<i class="fa fa-external-link"></i></span></li></ul></blockquote><p>应用必须使用一个被叫做<span class="exturl" data-url="aHR0cHM6Ly9kZXZlbG9wZXIuYW5kcm9pZC5nb29nbGUuY24vcmVmZXJlbmNlL2FuZHJvaWQvdmlldy9XaW5kb3dNYW5hZ2VyLkxheW91dFBhcmFtcy5odG1sI1RZUEVfQVBQTElDQVRJT05fT1ZFUkxBWQ==" title="https://developer.android.google.cn/reference/android/view/WindowManager.LayoutParams.html#TYPE_APPLICATION_OVERLAY">TYPE_APPLICATION_OVERLAY<i class="fa fa-external-link"></i></span>类型的新窗口类型替代。</p><p>当使用<span class="exturl" data-url="aHR0cHM6Ly9kZXZlbG9wZXIuYW5kcm9pZC5nb29nbGUuY24vcmVmZXJlbmNlL2FuZHJvaWQvdmlldy9XaW5kb3dNYW5hZ2VyLkxheW91dFBhcmFtcy5odG1sI1RZUEVfQVBQTElDQVRJT05fT1ZFUkxBWQ==" title="https://developer.android.google.cn/reference/android/view/WindowManager.LayoutParams.html#TYPE_APPLICATION_OVERLAY">TYPE_APPLICATION_OVERLAY<i class="fa fa-external-link"></i></span>类型的窗口为你的应用程序去显示警告窗口，请记住新窗口的如下特征：</p><blockquote><ul><li>一个应用程序的警告窗口总是显示在系统窗口之下，比如状态栏和输入法。</li><li>系统能够移除和重置窗口大小，使用<span class="exturl" data-url="aHR0cHM6Ly9kZXZlbG9wZXIuYW5kcm9pZC5nb29nbGUuY24vcmVmZXJlbmNlL2FuZHJvaWQvdmlldy9XaW5kb3dNYW5hZ2VyLkxheW91dFBhcmFtcy5odG1sI1RZUEVfQVBQTElDQVRJT05fT1ZFUkxBWQ==" title="https://developer.android.google.cn/reference/android/view/WindowManager.LayoutParams.html#TYPE_APPLICATION_OVERLAY">TYPE_APPLICATION_OVERLAY<i class="fa fa-external-link"></i></span>类型的窗口去提高屏幕演示</li><li>通过打开通知栏窗帘，用户能够访问设置去屏蔽一个应用通过<span class="exturl" data-url="aHR0cHM6Ly9kZXZlbG9wZXIuYW5kcm9pZC5nb29nbGUuY24vcmVmZXJlbmNlL2FuZHJvaWQvdmlldy9XaW5kb3dNYW5hZ2VyLkxheW91dFBhcmFtcy5odG1sI1RZUEVfQVBQTElDQVRJT05fT1ZFUkxBWQ==" title="https://developer.android.google.cn/reference/android/view/WindowManager.LayoutParams.html#TYPE_APPLICATION_OVERLAY">TYPE_APPLICATION_OVERLAY<i class="fa fa-external-link"></i></span>窗口类型去显示警告窗口的显示</li></ul></blockquote><p>针对该行为变化，对上面的示例代码进行了修改，以兼容Android O：</p><p>更改<strong>TYPE_PHONE</strong>为<strong>TYPE_APPLICATION_OVERLAY</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">-  params.type = WindowManager.LayoutParams.TYPE_PHONE;</span><br><span class="line">+  params.type = WindowManager.LayoutParams.TYPE_APPLICATION_OVERLAY;</span><br></pre></td></tr></table></figure><p>运行,效果图如下</p><p><img alt="windowmanager-o" data-src="/images/windowmanager-o.png"></p><blockquote><p>以上就是简单的对Android WindowManager悬浮窗行为变化的简单总结。如有不足，欢迎指正，谢谢。</p></blockquote>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;本文是关于针对Android WindowManager悬浮窗行为变化的总结。&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="Android" scheme="https://shoewann0402.github.io/categories/Android/"/>
    
      <category term="WindowManager" scheme="https://shoewann0402.github.io/categories/Android/WindowManager/"/>
    
    
      <category term="Android O" scheme="https://shoewann0402.github.io/tags/Android-O/"/>
    
      <category term="WindowManager" scheme="https://shoewann0402.github.io/tags/WindowManager/"/>
    
      <category term="Android M" scheme="https://shoewann0402.github.io/tags/Android-M/"/>
    
  </entry>
  
</feed>
