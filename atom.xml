<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Shoewann&#39;s Personal Blog</title>
  
  <subtitle>【&quot; OK Google &quot;】</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://shoewann0402.github.io/"/>
  <updated>2019-03-06T09:37:38.348Z</updated>
  <id>https://shoewann0402.github.io/</id>
  
  <author>
    <name>Shoewann</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Android Jetpack WorkManager 稳定发布</title>
    <link href="https://shoewann0402.github.io/2019/03/06/android-jetpack-workmanager-stable/"/>
    <id>https://shoewann0402.github.io/2019/03/06/android-jetpack-workmanager-stable/</id>
    <published>2019-03-06T07:37:35.000Z</published>
    <updated>2019-03-06T09:37:38.348Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>原文来自: <span class="exturl" data-url="aHR0cHM6Ly9hbmRyb2lkLWRldmVsb3BlcnMuZ29vZ2xlYmxvZy5jb20vMjAxOS8wMy9hbmRyb2lkLWpldHBhY2std29ya21hbmFnZXItc3RhYmxlLmh0bWw=" title="https://android-developers.googleblog.com/2019/03/android-jetpack-workmanager-stable.html">Android Jetpack WorkManager Stable Release<i class="fa fa-external-link"></i></span></p></blockquote><a id="more"></a><p><strong>使用WorkManager的方式简化您的后台管理</strong></p><p>今天我们非常高兴的宣布<span class="exturl" data-url="aHR0cHM6Ly9kZXZlbG9wZXIuYW5kcm9pZC5jb20vdG9waWMvbGlicmFyaWVzL2FyY2hpdGVjdHVyZS93b3JrbWFuYWdlcg==" title="https://developer.android.com/topic/libraries/architecture/workmanager">Android Jetpack WorkManager<i class="fa fa-external-link"></i></span> 1.0 稳定版发布。我们想感谢许多在我们开发社区的您，一路上为我们给予反馈和bug记录 —— 我们到达了这里，感谢您的帮助！</p><p>当我们通过开发者看到面临的主要问题时，我们看见了做可靠的后台处理和友好的电量管理是一个巨大的挑战。这意味着定期刷新内容或者上传您的日志是复杂的。不同的Android版本为工作提供了不同的工具，它们每一个都有自己怪异的API。比如说，监听网络或者存储可用性以及自动重试您的任务涉及到大量工作。</p><p>我们对于这些挑战的回答是WorkManager。在Google <span class="exturl" data-url="aHR0cHM6Ly93d3cueW91dHViZS5jb20vd2F0Y2g/dj1JcktvQkZMd1ROMA==" title="https://www.youtube.com/watch?v=IrKoBFLwTN0">I/O 2018<i class="fa fa-external-link"></i></span>上，我们介绍了Android Jetpack <span class="exturl" data-url="aHR0cHM6Ly9kZXZlbG9wZXIuYW5kcm9pZC5jb20vdG9waWMvbGlicmFyaWVzL2FyY2hpdGVjdHVyZS93b3JrbWFuYWdlcg==" title="https://developer.android.com/topic/libraries/architecture/workmanager">WorkManager库<i class="fa fa-external-link"></i></span>的预览,并且从那之后在它上面迭代了额外的功能核和bug修复，感谢您宝贵的意见。</p><p>WorkManager的目标就是为了您操作后台使其简单。WorkManager考虑到了像电量优化、存储或者网络可用性的约束，同事当满足适当的条件它只能运行它的任务。它也知道去重试或者重新调度您的工作——即使您的设备或者app重启了。</p><p>我们相信ＷOrkManager是友好的，亲切的API,能够处理好Android最复杂的部分之一，您可以将焦点放在让您的App独特代码上。</p><h2 id="WorkManager-亮点"><a href="#WorkManager-亮点" class="headerlink" title="ＷorkManager 亮点"></a>ＷorkManager 亮点</h2><p>这里是WorkManager一些关键点：</p><blockquote><ul><li>让您设置约束，比如网络状态或者充电状态、任务在运行时</li><li>支持异步一次性和周期性</li><li>支持带输入和输出的链式任务</li><li>确保任务执行，及时APP或者设备重启</li><li>支持Android 4.0+ (API 14+)</li></ul></blockquote><p>观看和阅读下面去学习在您的APP里面什么时候以及如何使用WorkManager去简化管理后台工作</p><p><img src="/images/android_jetpack_introducing_workmanager.png" alt="android_jetpack_introducing_workmanager"></p><p><span class="exturl" data-url="aHR0cHM6Ly95b3V0dS5iZS9wZV95cU0xNmhQUQ==" title="https://youtu.be/pe_yqM16hPQ">Android Jetpack: 介绍WorkManager<i class="fa fa-external-link"></i></span></p><h2 id="何时使用-WorkManager"><a href="#何时使用-WorkManager" class="headerlink" title="何时使用 WorkManager"></a>何时使用 WorkManager</h2><p>WorkManager是针对于能够被延期任务的最佳套件，但是即使是应用程序或者设备重启(比如: 使用后端服务定期同步数据以及上传日志或者分析数据) 也是仍然有望运行</p><p>对于像需要立即运行去发送即时消息或者APP在退出之后不需要立即运行的任务，去看看<span class="exturl" data-url="aHR0cHM6Ly9kZXZlbG9wZXIuYW5kcm9pZC5jb20vZ3VpZGUvYmFja2dyb3VuZC8=" title="https://developer.android.com/guide/background/">后台处理向导 <i class="fa fa-external-link"></i></span>了解哪一种解决方案满足您的需求。</p><h2 id="如何使用-WorkManager"><a href="#如何使用-WorkManager" class="headerlink" title="如何使用 WorkManager"></a>如何使用 WorkManager</h2><p>开始使用WorkManager API, 添加在<span class="exturl" data-url="aHR0cHM6Ly9kZXZlbG9wZXIuYW5kcm9pZC5jb20vc3R1ZGlvL2J1aWxkL2RlcGVuZGVuY2llcyNnb29nbGUtbWF2ZW4=" title="https://developer.android.com/studio/build/dependencies#google-maven">Google’s Maven repository<i class="fa fa-external-link"></i></span>上WorkManager可用的Java或者Kotlin依赖到您应用程序的<code>build.gradle</code>文件:</p><figure class="highlight gradle"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">dependencies</span> &#123;</span><br><span class="line">    <span class="keyword">def</span> work_version = <span class="number">1.0</span>.<span class="number">0</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// Java</span></span><br><span class="line">    implementation <span class="string">"android.arch.work:work-runtime:$work_version"</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// Kotlin KTX + coroutines</span></span><br><span class="line">    implementation <span class="string">"android.arch.work:work-runtime-ktx:$work_version"</span></span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><p>现在，只需要将<span class="exturl" data-url="aHR0cHM6Ly9kZXZlbG9wZXIuYW5kcm9pZC5jb20vcmVmZXJlbmNlL2FuZHJvaWR4L3dvcmsvV29ya2Vy" title="https://developer.android.com/reference/androidx/work/Worker">Worker<i class="fa fa-external-link"></i></span>子类化并利用<strong>doWork()</strong>实现您的后台工作，并用WorkManager加入列队。</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyWorker</span></span>(ctx: Context, params: WorkerParameters)</span><br><span class="line">  : Worker(ctx, params) &#123;</span><br><span class="line">  <span class="keyword">override</span> <span class="function"><span class="keyword">fun</span> WorkerResult <span class="title">doWork</span><span class="params">()</span></span> &#123;</span><br><span class="line">  </span><br><span class="line">    <span class="comment">//在这里完成一些需要在后台处理的工作</span></span><br><span class="line">    .....</span><br><span class="line">    <span class="keyword">return</span> Result.success()</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 可选, 添加像电源、网络可用性的约束</span></span><br><span class="line"><span class="keyword">val</span> constraints: Constraints = Constraints.Builder()</span><br><span class="line">     .setRequiresCharging(<span class="literal">true</span>)</span><br><span class="line">                .setRequiredNetworkType(NetworkType.CONNECTED)</span><br><span class="line">                .build()</span><br><span class="line"></span><br><span class="line"><span class="keyword">val</span> myWork = OneTimeWorkRequestBuilder&lt;MyWorker&gt;()</span><br><span class="line">                .setConstraints(constraints).build()</span><br><span class="line"></span><br><span class="line"><span class="comment">// 现在，列队您的工作</span></span><br><span class="line">WorkManager.getInstance().enqueue(myWork)</span><br></pre></td></tr></table></figure><p>WorkManager当识别到您的设备正在充电且网络是可用时，它将负责运行您的任务。</p><h2 id="为何使用-WorkManager"><a href="#为何使用-WorkManager" class="headerlink" title="为何使用 WorkManager"></a>为何使用 WorkManager</h2><h3 id="向后兼容"><a href="#向后兼容" class="headerlink" title="向后兼容"></a>向后兼容</h3><p>WorkManager将利用正确的调度API:它使用了<span class="exturl" data-url="aHR0cHM6Ly9kZXZlbG9wZXIuYW5kcm9pZC5jb20vcmVmZXJlbmNlL2FuZHJvaWQvYXBwL2pvYi9Kb2JTY2hlZHVsZXI=" title="https://developer.android.com/reference/android/app/job/JobScheduler">JobScheduler API<i class="fa fa-external-link"></i></span>在Android 6.0+ (API 23+)并且结合了之前版本上的<span class="exturl" data-url="aHR0cHM6Ly9kZXZlbG9wZXIuYW5kcm9pZC5jb20vcmVmZXJlbmNlL2FuZHJvaWQvYXBwL0FsYXJtTWFuYWdlcg==" title="https://developer.android.com/reference/android/app/AlarmManager">AlarmManager<i class="fa fa-external-link"></i></span>和<span class="exturl" data-url="aHR0cHM6Ly9kZXZlbG9wZXIuYW5kcm9pZC5jb20vcmVmZXJlbmNlL2FuZHJvaWQvY29udGVudC9Ccm9hZGNhc3RSZWNlaXZlcg==" title="https://developer.android.com/reference/android/content/BroadcastReceiver">BroadcastReceiver<i class="fa fa-external-link"></i></span></p><p>它也力求最佳行为，这样它就符合了在较新的Android API版本中引入系统优化去最大化电量和强制执行良好的APP行为。</p><p>比如说，当系统是进入了Doze 模式时，对于Android 6.0+(API 23+)的设备，WorkManager将在维护窗口期间调度后台工作。</p><h3 id="可靠的调度"><a href="#可靠的调度" class="headerlink" title="可靠的调度"></a>可靠的调度</h3><p>利用WorkManager,您能够简单的添加像网络可用性或者充电状态的约束。当约束满足您的工作将会运行，并且如果在运行的过程中它们失败了将会自动重试。比如说，如果您的任务要求网络可用，当网络不再可用时任务将会停止并且之后重试。</p><p>您也能够使用<span class="exturl" data-url="aHR0cHM6Ly9kZXZlbG9wZXIuYW5kcm9pZC5jb20vdG9waWMvbGlicmFyaWVzL2FyY2hpdGVjdHVyZS9saXZlZGF0YQ==" title="https://developer.android.com/topic/libraries/architecture/livedata">LiveData<i class="fa fa-external-link"></i></span>监控工作状态和检索工作结果。当您的任务完成时，这样可以通知您的UI。</p><p>您的工作失败了的情况下，您可用通过配置<span class="exturl" data-url="aHR0cHM6Ly9kZXZlbG9wZXIuYW5kcm9pZC5jb20vcmVmZXJlbmNlL2FuZHJvaWR4L3dvcmsvQmFja29mZlBvbGljeQ==" title="https://developer.android.com/reference/androidx/work/BackoffPolicy">backoff(退避)<i class="fa fa-external-link"></i></span>的处理方式来控制您的工作重试方式</p><p>WorkManager也能够重新调度您的工作，如果一个应用程序或者设备重启发生了，使用本地数据库记录您的工作。</p><h3 id="控制您的工作方式"><a href="#控制您的工作方式" class="headerlink" title="控制您的工作方式"></a>控制您的工作方式</h3><p>我们明白每一个APP有不同的需求，您的任务也如此——甚至是在同一个APP内。WorkManager提供了简单但高度灵活的API表面，可以帮助您配置您的工作和运行它的方式。</p><p>利用<span class="exturl" data-url="aHR0cHM6Ly9kZXZlbG9wZXIuYW5kcm9pZC5jb20vcmVmZXJlbmNlL2FuZHJvaWR4L3dvcmsvT25lVGltZVdvcmtSZXF1ZXN0Lmh0bWw=" title="https://developer.android.com/reference/androidx/work/OneTimeWorkRequest.html">OneTimeWorkRequest<i class="fa fa-external-link"></i></span>一次性调度或者<span class="exturl" data-url="aHR0cHM6Ly9kZXZlbG9wZXIuYW5kcm9pZC5jb20vcmVmZXJlbmNlL2FuZHJvaWR4L3dvcmsvUGVyaW9kaWNXb3JrUmVxdWVzdA==" title="https://developer.android.com/reference/androidx/work/PeriodicWorkRequest">PeriodicWorkRequest<i class="fa fa-external-link"></i></span>周期性调度</p><p>您也能够链接您的一次工作请求以按顺序或并行运行。如果任意链接工作失败，WorkManager力求确保剩下的工作链不会运行。阅读更多关于链接工作请求<span class="exturl" data-url="aHR0cHM6Ly9kZXZlbG9wZXIuYW5kcm9pZC5jb20vdG9waWMvbGlicmFyaWVzL2FyY2hpdGVjdHVyZS93b3JrbWFuYWdlci9ob3ctdG8vY2hhaW4td29yay5tZA==" title="https://developer.android.com/topic/libraries/architecture/workmanager/how-to/chain-work.md">这里<i class="fa fa-external-link"></i></span></p><p>如果您需要更多灵活性的WorkManager并行化方式以及消息工作，检出我们<span class="exturl" data-url="aHR0cHM6Ly9kZXZlbG9wZXIuYW5kcm9pZC5jb20vdG9waWMvbGlicmFyaWVzL2FyY2hpdGVjdHVyZS93b3JrbWFuYWdlci9hZHZhbmNlZC90aHJlYWRpbmcubWQ=" title="https://developer.android.com/topic/libraries/architecture/workmanager/advanced/threading.md">高级线程向导<i class="fa fa-external-link"></i></span></p><h2 id="开发者必须说什么"><a href="#开发者必须说什么" class="headerlink" title="开发者必须说什么"></a>开发者必须说什么</h2><p><span class="exturl" data-url="aHR0cHM6Ly9wbGF5Lmdvb2dsZS5jb20vc3RvcmUvYXBwcy9kZXRhaWxzP2lkPWluLnJlZGJ1cy5hbmRyb2lk" title="https://play.google.com/store/apps/details?id=in.redbus.android">redBus<i class="fa fa-external-link"></i></span> ，最大在线巴士票务平台，分享他们使用WorkManager的经验，以简化他们在Android应用中收集用户反馈的方式：</p><blockquote><p><em>“随着我们扩展到其他国家，反馈对于readBus至关重要。一个用户给予了关于在redBus应用程序中功能至关重要的反馈，但是当应用程序尝试去上传反馈到后端，这儿或许没有足够的网络覆盖或者电量</em><br><em>WorkManager简化了redBus应用程序向后端提供信息的方式。WorkManager库处理像网络连接、电量参数的能力以及使用像AlarmManager或者JobScheduler适当的处理程序，使我们能够专注于构建业务逻辑并将执行复杂性卸载到WorkManager</em></p></blockquote><p>   ——  Dinesh Shanmugam</p><p>   Android Lead, redBus.in</p><h2 id="开始使用-WorkManager"><a href="#开始使用-WorkManager" class="headerlink" title="开始使用 WorkManager"></a>开始使用 WorkManager</h2><p>根据您后台任务的需要，检出我们<span class="exturl" data-url="aHR0cHM6Ly9kZXZlbG9wZXIuYW5kcm9pZC5jb20vdG9waWMvbGlicmFyaWVzL2FyY2hpdGVjdHVyZS93b3JrbWFuYWdlci9iYXNpY3M=" title="https://developer.android.com/topic/libraries/architecture/workmanager/basics">开始使用向导<i class="fa fa-external-link"></i></span>和<span class="exturl" data-url="aHR0cHM6Ly9jb2RlbGFicy5kZXZlbG9wZXJzLmdvb2dsZS5jb20vY29kZWxhYnMvYW5kcm9pZC13b3JrbWFuYWdlci1rdC8jMA==" title="https://codelabs.developers.google.com/codelabs/android-workmanager-kt/#0">codelab<i class="fa fa-external-link"></i></span>动手去使用WorkManager库</p><p>我们欣赏您的反馈，包括您喜欢的新功能以及您希望看到的新功能</p><p>如果您发现了一个bug或者issue,随时<span class="exturl" data-url="aHR0cHM6Ly9pc3N1ZXRyYWNrZXIuZ29vZ2xlLmNvbS9pc3N1ZXMvbmV3P2NvbXBvbmVudD00MDk5MDYmYW1wO3RlbXBsYXRlPTEwOTQxOTc=" title="https://issuetracker.google.com/issues/new?component=409906&amp;template=1094197">提出问题<i class="fa fa-external-link"></i></span></p><blockquote><p>以上是对Android官网博客文章的翻译，如果不足，欢迎指正，谢谢</p></blockquote>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;原文来自: &lt;a href=&quot;https://android-developers.googleblog.com/2019/03/android-jetpack-workmanager-stable.html&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Android Jetpack WorkManager Stable Release&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="Android" scheme="https://shoewann0402.github.io/categories/Android/"/>
    
      <category term="Jetpack" scheme="https://shoewann0402.github.io/categories/Android/Jetpack/"/>
    
      <category term="WorkManager" scheme="https://shoewann0402.github.io/categories/Android/Jetpack/WorkManager/"/>
    
    
      <category term="Android" scheme="https://shoewann0402.github.io/tags/Android/"/>
    
      <category term="Jetpack" scheme="https://shoewann0402.github.io/tags/Jetpack/"/>
    
      <category term="WorkManager" scheme="https://shoewann0402.github.io/tags/WorkManager/"/>
    
  </entry>
  
  <entry>
    <title>Android P 默认通过TLS保护用户</title>
    <link href="https://shoewann0402.github.io/2018/04/11/protecting-users-with-tls-by-default-in/"/>
    <id>https://shoewann0402.github.io/2018/04/11/protecting-users-with-tls-by-default-in/</id>
    <published>2018-04-11T14:29:28.000Z</published>
    <updated>2018-04-11T15:08:59.000Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>原文来自：<span class="exturl" data-url="aHR0cHM6Ly9hbmRyb2lkLWRldmVsb3BlcnMuZ29vZ2xlYmxvZy5jb20vMjAxOC8wNC9wcm90ZWN0aW5nLXVzZXJzLXdpdGgtdGxzLWJ5LWRlZmF1bHQtaW4uaHRtbA==" title="https://android-developers.googleblog.com/2018/04/protecting-users-with-tls-by-default-in.html">Protecting users with TLS by default in Android P<i class="fa fa-external-link"></i></span></p></blockquote><p>Android承诺去保持用户他们的设备和数据安全。保持数据安全之一的方式是,通过保护Android设备在进入或者离开中转传输层安全（TLS）的所有数据。正如我们在Android P开发者预览版中<span class="exturl" data-url="aHR0cHM6Ly9hbmRyb2lkLWRldmVsb3BlcnMuZ29vZ2xlYmxvZy5jb20vMjAxOC8wMy9wcmV2aWV3aW5nLWFuZHJvaWQtcC5odG1s" title="https://android-developers.googleblog.com/2018/03/previewing-android-p.html">宣布<i class="fa fa-external-link"></i></span>的那样，我们将进一步改善这些保护，通过阻止目标版本是Android P的应用程序来自默认允许未加密的连接。</p><a id="more"></a><p>这是我们为保护Android用户，多年来做出的各种改变。去阻止偶发的未加密连接，在Android Marshmallow(6.0)中我们介绍了android:usesCleartextTraffic清单属性。在Android Nougat(7.0),我们通过创建<span class="exturl" data-url="aHR0cHM6Ly9kZXZlbG9wZXIuYW5kcm9pZC5jb20vdHJhaW5pbmcvYXJ0aWNsZXMvc2VjdXJpdHktY29uZmlnLmh0bWw=" title="https://developer.android.com/training/articles/security-config.html">Network Security Config<i class="fa fa-external-link"></i></span>(网络安全配置)功能特性去扩展了这个属性，允许应用程序去表明它们不打算在没有加密的情况下发送网络流量。在Android Nougat(7.0)和Android Oreo(8.0)，我们仍然允许明文连接。</p><h1 id="我怎么更新我的应用程序？"><a href="#我怎么更新我的应用程序？" class="headerlink" title="我怎么更新我的应用程序？"></a>我怎么更新我的应用程序？</h1><p>如果你的应用程序对于所有的连接都使用了TLS，然后你不需要做什么了。如果你还没有，就去使用TLS去加密所有的连接更新你的应用程序。如果你仍然需要去使用明文进行连接,继续去阅读一下最佳做法。</p><h1 id="为什么我应该使用TLS？"><a href="#为什么我应该使用TLS？" class="headerlink" title="为什么我应该使用TLS？"></a>为什么我应该使用TLS？</h1><p>Android考虑到所有的网络可能有敌意，因此加密流量应该在所有时间对于所有的连接都被使用。移动设备尤其面临风险，因为它们经常会连接到许多不同的网络，比如在咖啡店的Wi-Fi</p><p>所有的流量应该被加密，无论内容是什么。作为任意一种未加密的连接能够注入内容被使用，对于那些可能弱势的客户端代码增加攻击面，或者攻击用户。更多信息，看我们过去的<span class="exturl" data-url="aHR0cHM6Ly9hbmRyb2lkLWRldmVsb3BlcnMuZ29vZ2xlYmxvZy5jb20vMjAxNi8wNC9wcm90ZWN0aW5nLWFnYWluc3QtdW5pbnRlbnRpb25hbC5odG1s" title="https://android-developers.googleblog.com/2016/04/protecting-against-unintentional.html">博客文章<i class="fa fa-external-link"></i></span>和<span class="exturl" data-url="aHR0cHM6Ly93d3cueW91dHViZS5jb20vd2F0Y2g/dj1mY1dWVjBIYWZ1ayZhbXA7dD0xcw==" title="https://www.youtube.com/watch?v=fcWVV0Hafuk&amp;t=1s">开发者高峰论坛<i class="fa fa-external-link"></i></span></p><h1 id="TLS是不是很慢？"><a href="#TLS是不是很慢？" class="headerlink" title="TLS是不是很慢？"></a>TLS是不是很慢？</h1><p><span class="exturl" data-url="aHR0cHM6Ly9pc3Rsc2Zhc3R5ZXQuY29tLw==" title="https://istlsfastyet.com/">不，它不是<i class="fa fa-external-link"></i></span></p><h1 id="我如何在我的应用程序中使用TLS"><a href="#我如何在我的应用程序中使用TLS" class="headerlink" title="我如何在我的应用程序中使用TLS ?"></a>我如何在我的应用程序中使用TLS ?</h1><p>只要你的服务器支持TLS, 只需要在你的应用程序和服务器响应中把URLs 从http://改变成https:// 。你的HTTP栈处理TLS握手，无需其他更多操作。</p><p>如果你是自己制作的Socket,使用<span class="exturl" data-url="aHR0cHM6Ly9kZXZlbG9wZXIuYW5kcm9pZC5jb20vcmVmZXJlbmNlL2phdmF4L25ldC9zc2wvU1NMU29ja2V0RmFjdG9yeS5odG1s" title="https://developer.android.com/reference/javax/net/ssl/SSLSocketFactory.html">SSLSocketFactory<i class="fa fa-external-link"></i></span>去替代<span class="exturl" data-url="aHR0cHM6Ly9kZXZlbG9wZXIuYW5kcm9pZC5jb20vcmVmZXJlbmNlL2phdmF4L25ldC9Tb2NrZXRGYWN0b3J5Lmh0bWw=" title="https://developer.android.com/reference/javax/net/SocketFactory.html">SocketFactory<i class="fa fa-external-link"></i></span><br>要格外小心去正确使用作为SSLSocket的socket，它不会去验证主机。你的应用程序需要做的是它自己的主机验证。优选通过调用<span class="exturl" data-url="aHR0cHM6Ly9kZXZlbG9wZXIuYW5kcm9pZC5jb20vcmVmZXJlbmNlL2phdmF4L25ldC9zc2wvSHR0cHNVUkxDb25uZWN0aW9uLmh0bWwjZ2V0RGVmYXVsdEhvc3RuYW1lVmVyaWZpZXIo" title="https://developer.android.com/reference/javax/net/ssl/HttpsURLConnection.html#getDefaultHostnameVerifier(">getDefaultHostnameVerifier()<i class="fa fa-external-link"></i></span>)期望的主机名。进一步，谨防<span class="exturl" data-url="aHR0cHM6Ly9kZXZlbG9wZXIuYW5kcm9pZC5jb20vcmVmZXJlbmNlL2phdmF4L25ldC9zc2wvSG9zdG5hbWVWZXJpZmllci5odG1sI3ZlcmlmeShqYXZhLmxhbmcuU3RyaW5nLCUyMGphdmF4Lm5ldC5zc2wuU1NMU2Vzc2lvbg==" title="https://developer.android.com/reference/javax/net/ssl/HostnameVerifier.html#verify(java.lang.String,%20javax.net.ssl.SSLSession">HostnameVerifier.verify()<i class="fa fa-external-link"></i></span>)在发生异常时不会抛出错误，但是相反的會返回一个boolean的结果，你必须明确的检查。</p><h1 id="我需要去使用一个明文去…"><a href="#我需要去使用一个明文去…" class="headerlink" title="我需要去使用一个明文去…"></a>我需要去使用一个明文去…</h1><p>当你应该对所有连接使用TLS，可能你需要去使用一个明文流量针对于遗留原因。比如连接到一些服务器。因此，改变你的应用程序的网络安全配置，以允许这些连接。</p><p>我们包括了一组示例配置，更多帮助查看<span class="exturl" data-url="aHR0cHM6Ly9kZXZlbG9wZXIuYW5kcm9pZC5jb20vdHJhaW5pbmcvYXJ0aWNsZXMvc2VjdXJpdHktY29uZmlnLmh0bWw=" title="https://developer.android.com/training/articles/security-config.html">network security config<i class="fa fa-external-link"></i></span>文档。</p><h1 id="允许明文连接到一个具体的域，你可以使用如下的配置作为一个向导："><a href="#允许明文连接到一个具体的域，你可以使用如下的配置作为一个向导：" class="headerlink" title="允许明文连接到一个具体的域，你可以使用如下的配置作为一个向导："></a>允许明文连接到一个具体的域，你可以使用如下的配置作为一个向导：</h1><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">network-security-config</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">domain-config</span> <span class="attr">cleartextTrafficPermitted</span>=<span class="string">"true"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">domain</span> <span class="attr">includeSubdomains</span>=<span class="string">"true"</span>&gt;</span>insecure.example.com<span class="tag">&lt;/<span class="name">domain</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">domain</span> <span class="attr">includeSubdomains</span>=<span class="string">"true"</span>&gt;</span>insecure.cdn.example.com<span class="tag">&lt;/<span class="name">domain</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">domain-config</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">network-security-config</span>&gt;</span></span><br></pre></td></tr></table></figure><h1 id="允许连接到任意不安全的域"><a href="#允许连接到任意不安全的域" class="headerlink" title="允许连接到任意不安全的域"></a>允许连接到任意不安全的域</h1><p>如果你的应用程序支持打开任意来自不安全URLs的内容，当支持明文连接到任意主机，你应该禁用明文连接到你自己的服务器。记住，对于这些通过<br>不安全连接接收到的数据你应该谨慎，它能够在传输的过程当中被篡改。</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">network-security-config</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">domain-config</span> <span class="attr">cleartextTrafficPermitted</span>=<span class="string">"false"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">domain</span> <span class="attr">includeSubdomains</span>=<span class="string">"true"</span>&gt;</span>example.com<span class="tag">&lt;/<span class="name">domain</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">domain</span> <span class="attr">includeSubdomains</span>=<span class="string">"true"</span>&gt;</span>cdn.example2.com<span class="tag">&lt;/<span class="name">domain</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">domain-config</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">base-config</span> <span class="attr">cleartextTrafficPermitted</span>=<span class="string">"true"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">network-security-config</span>&gt;</span></span><br></pre></td></tr></table></figure><h1 id="我应该怎么更新我的库？"><a href="#我应该怎么更新我的库？" class="headerlink" title="我应该怎么更新我的库？"></a>我应该怎么更新我的库？</h1><p>如果你的库是直接创建安全/不安全的连接，确保它在打开任意明文连接之前通过检查<span class="exturl" data-url="aHR0cHM6Ly9kZXZlbG9wZXIuYW5kcm9pZC5jb20vcmVmZXJlbmNlL2FuZHJvaWQvc2VjdXJpdHkvTmV0d29ya1NlY3VyaXR5UG9saWN5Lmh0bWwjaXNDbGVhcnRleHRUcmFmZmljUGVybWl0dGVkKGphdmEubGFuZy5TdHJpbmc=" title="https://developer.android.com/reference/android/security/NetworkSecurityPolicy.html#isCleartextTrafficPermitted(java.lang.String">isCleartextTrafficPermitted<i class="fa fa-external-link"></i></span>)来尊重应用程序明文设置。</p><blockquote><p>以上是对Android官网博客文章的翻译，如果不足，欢迎指正，谢谢</p></blockquote>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;原文来自：&lt;a href=&quot;https://android-developers.googleblog.com/2018/04/protecting-users-with-tls-by-default-in.html&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Protecting users with TLS by default in Android P&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Android承诺去保持用户他们的设备和数据安全。保持数据安全之一的方式是,通过保护Android设备在进入或者离开中转传输层安全（TLS）的所有数据。正如我们在Android P开发者预览版中&lt;a href=&quot;https://android-developers.googleblog.com/2018/03/previewing-android-p.html&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;宣布&lt;/a&gt;的那样，我们将进一步改善这些保护，通过阻止目标版本是Android P的应用程序来自默认允许未加密的连接。&lt;/p&gt;
    
    </summary>
    
      <category term="TLS" scheme="https://shoewann0402.github.io/categories/TLS/"/>
    
      <category term="android p" scheme="https://shoewann0402.github.io/categories/TLS/android-p/"/>
    
    
      <category term="android p" scheme="https://shoewann0402.github.io/tags/android-p/"/>
    
      <category term="android security" scheme="https://shoewann0402.github.io/tags/android-security/"/>
    
      <category term="connection encryption" scheme="https://shoewann0402.github.io/tags/connection-encryption/"/>
    
      <category term="HTTPS" scheme="https://shoewann0402.github.io/tags/HTTPS/"/>
    
      <category term="network security" scheme="https://shoewann0402.github.io/tags/network-security/"/>
    
      <category term="TLS" scheme="https://shoewann0402.github.io/tags/TLS/"/>
    
      <category term="TLS by default" scheme="https://shoewann0402.github.io/tags/TLS-by-default/"/>
    
  </entry>
  
  <entry>
    <title>Android Studio 切换到D8 dexer</title>
    <link href="https://shoewann0402.github.io/2018/04/07/android-studio-switching-to-d8-dexer/"/>
    <id>https://shoewann0402.github.io/2018/04/07/android-studio-switching-to-d8-dexer/</id>
    <published>2018-04-07T01:58:21.000Z</published>
    <updated>2018-04-07T05:52:25.000Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>原文来自：<span class="exturl" data-url="aHR0cHM6Ly9hbmRyb2lkLWRldmVsb3BlcnMuZ29vZ2xlYmxvZy5jb20vMjAxOC8wNC9hbmRyb2lkLXN0dWRpby1zd2l0Y2hpbmctdG8tZDgtZGV4ZXIuaHRtbA==" title="https://android-developers.googleblog.com/2018/04/android-studio-switching-to-d8-dexer.html">Android Studio switching to D8 dexer<i class="fa fa-external-link"></i></span></p></blockquote><a id="more"></a><h1 id="D8现在是默认的dex编译器"><a href="#D8现在是默认的dex编译器" class="headerlink" title="D8现在是默认的dex编译器"></a>D8现在是默认的dex编译器</h1><p>更快、更小的应用程序编译一直是Android工具团队的目标，那也是为什么我们此前宣布了<span class="exturl" data-url="aHR0cHM6Ly9hbmRyb2lkLWRldmVsb3BlcnMuZ29vZ2xlYmxvZy5jb20vMjAxNy8wOC9uZXh0LWdlbmVyYXRpb24tZGV4LWNvbXBpbGVyLW5vdy1pbi5odG1s" title="https://android-developers.googleblog.com/2017/08/next-generation-dex-compiler-now-in.html">D8<i class="fa fa-external-link"></i></span>,下一代的dex编译器。相比历史编译器-DX,D8运行更快并生成更小的.dex文件具有相当或者更佳的运行时性能。</p><p>我们最近宣布了D8成为Android Studio 3.1中默认的编译器。如果你之前还没有去尝试D8，我们希望你在切换的时候注意到更佳、更快的dex编译。</p><p>D8首次在Android Studio3.0中作为一个可选的功能被发出。除此之外我们自己也在严格测试，我们现在已经看到了它在各种各样的应用程序中良好的表现。最后，我们确信D8对于每一个开始在3.1中使用他的人来说都将良好运作。然而，如果你在使用的时候有什么问题，你现在能够通过在你的项目gradle.properties文件下一直设置如下还原到DX</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">android.enableD8=<span class="keyword">false</span></span><br></pre></td></tr></table></figure><p>如果你确实遇到什么问题导致你禁用了D8，请<span class="exturl" data-url="aHR0cHM6Ly9pc3N1ZXRyYWNrZXIuZ29vZ2xlLmNvbS9pc3N1ZXMvbmV3P2NvbXBvbmVudD0xOTI3MDgmYW1wO3RlbXBsYXRlPTg0MDUzMw==" title="https://issuetracker.google.com/issues/new?component=192708&amp;template=840533">让我们知道!<i class="fa fa-external-link"></i></span></p><h1 id="下一步"><a href="#下一步" class="headerlink" title="下一步"></a>下一步</h1><p>我们的目标是确保每一个人都能访问到快速、正确的dex编译器。因此避免冒着任一個用户的回归，我们将分为3个阶段去弃用DX</p><p>第一阶段打算防止过早的弃用DX。在这个阶段期间，DX将仍然可以在studio中使用。我们将修复它的关键性问题，但是不会再有新的功能特性了。这个阶段将会持续至少6个月，期间我们将打开任何一个D8的错误去决定如果是回归，将会阻止一些用户使用D8替换DX。第一个阶段直到团队解决完全部的迁移阻滞者问题才会结束。在这个窗口中我们将会特别注意到错误追踪器，因此如果你遭遇任何回归，<span class="exturl" data-url="aHR0cHM6Ly9pc3N1ZXRyYWNrZXIuZ29vZ2xlLmNvbS9pc3N1ZXMvbmV3P2NvbXBvbmVudD0xOTI3MDgmYW1wO3RlbXBsYXRlPTg0MDUzMw==" title="https://issuetracker.google.com/issues/new?component=192708&amp;template=840533">请提出问题<i class="fa fa-external-link"></i></span>。</p><p>一旦我们将查看6个月的窗口没有了D8替换DX的主要回归问题，我们将进入第二阶段。这个阶段将会至少是一年，打算确保那些即使是复杂的项目都有大量时间去进行迁移。在这个阶段期间，我们仍然保持着DX可用，但是我们将它视为完全弃用，我们将不会修复它的任何问题。</p><p>再第三阶段也就是最后阶段，DX将会从Android Studio中移除。在此时，为了能继续使用DX去构建，你将需要使用一个legacy版本的Android Gradle插件。</p><blockquote><p>以上是对Android官网博客文章的翻译，如果不足，欢迎指正，谢谢</p></blockquote>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;原文来自：&lt;a href=&quot;https://android-developers.googleblog.com/2018/04/android-studio-switching-to-d8-dexer.html&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Android Studio switching to D8 dexer&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="Dex" scheme="https://shoewann0402.github.io/categories/Dex/"/>
    
      <category term="Android Studio" scheme="https://shoewann0402.github.io/categories/Dex/Android-Studio/"/>
    
    
      <category term="Android Studio" scheme="https://shoewann0402.github.io/tags/Android-Studio/"/>
    
      <category term="Dex" scheme="https://shoewann0402.github.io/tags/Dex/"/>
    
  </entry>
  
  <entry>
    <title>关于Android O 通知渠道总结</title>
    <link href="https://shoewann0402.github.io/2018/01/08/about-android-o-notification-channels/"/>
    <id>https://shoewann0402.github.io/2018/01/08/about-android-o-notification-channels/</id>
    <published>2018-01-08T02:56:22.000Z</published>
    <updated>2018-01-08T07:40:38.000Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>本文是关于针对Android O 通知渠道的总结。 </p></blockquote><a id="more"></a><p>Android O 引入了通知渠道<span class="exturl" data-url="aHR0cHM6Ly9kZXZlbG9wZXIuYW5kcm9pZC5nb29nbGUuY24vZ3VpZGUvdG9waWNzL3VpL25vdGlmaWVycy9ub3RpZmljYXRpb25zLmh0bWwjTWFuYWdlQ2hhbm5lbHM=" title="https://developer.android.google.cn/guide/topics/ui/notifiers/notifications.html#ManageChannels">Notification Channels<i class="fa fa-external-link"></i></span>，更好的方便用户管理通知栏消息。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">NotificationChannel</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">final</span> <span class="class"><span class="keyword">class</span> <span class="title">NotificationChannel</span> </span></span><br><span class="line"><span class="class"><span class="keyword">extends</span> <span class="title">Object</span> <span class="keyword">implements</span> <span class="title">Parcelable</span></span></span><br><span class="line"><span class="class"></span></span><br><span class="line"><span class="class"><span class="title">java</span>.<span class="title">lang</span>.<span class="title">Object</span></span></span><br><span class="line"><span class="class">   ↳<span class="title">android</span>.<span class="title">app</span>.<span class="title">NotificationChannel</span></span></span><br></pre></td></tr></table></figure><p>距离上一次总结通知栏相关的东西好像有很久了，可以去<span class="exturl" data-url="aHR0cDovL3Nob2V3YW5uLnRvcC8yMDE2LzA1LzEyL0FuZHJvaWQtTm90aWZpY2F0aW9uLSVFOSU4MCU5QSVFNyU5RiVBNSVFNiVBMCVCNyVFNSVCQyU4RiVFNiU4MCVCQiVFNyVCQiU5My8=" title="http://shoewann.top/2016/05/12/Android-Notification-%E9%80%9A%E7%9F%A5%E6%A0%B7%E5%BC%8F%E6%80%BB%E7%BB%93/">这里查看<i class="fa fa-external-link"></i></span></p><p>今天我们从一个基本的通知示例开始，来总结下Android O 通知渠道相关的使用。</p><h2 id="基本示例"><a href="#基本示例" class="headerlink" title="基本示例"></a>基本示例</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//创建通知栏管理对象</span></span><br><span class="line">NotificationManager mNotificationManager = (NotificationManager) getSystemService(NOTIFICATION_SERVICE);</span><br><span class="line"><span class="comment">//为了版本兼容  选择V7包下的NotificationCompat进行构造</span></span><br><span class="line">NotificationCompat.Builder builder = <span class="keyword">new</span> NotificationCompat.Builder(<span class="keyword">this</span>);</span><br><span class="line"><span class="comment">//setTicker 在5.0以上不显示Ticker属性信息</span></span><br><span class="line">builder.setTicker(<span class="string">"状态栏显示的提示"</span>);;</span><br><span class="line"><span class="comment">//setContentTitle 通知栏通知的标题</span></span><br><span class="line">builder.setContentTitle(<span class="string">"内容标题"</span>);</span><br><span class="line"><span class="comment">//setContentText  通知栏通知的详细内容</span></span><br><span class="line">builder.setContentText(<span class="string">"内容文本信息"</span>);</span><br><span class="line"><span class="comment">//setAutoCancel 点击通知的清除按钮是否清除该消息（true/false）</span></span><br><span class="line">builder.setAutoCancel(<span class="keyword">true</span>);</span><br><span class="line"><span class="comment">//setLargeIcon  通知消息上的大图标</span></span><br><span class="line">builder.setLargeIcon(BitmapFactory.decodeResource(getResources(), R.mipmap.ic_launcher));</span><br><span class="line"><span class="comment">//setSmallIcon  通知上面的小图标</span></span><br><span class="line">builder.setSmallIcon(R.mipmap.ic_launcher);<span class="comment">//小图标</span></span><br><span class="line"><span class="comment">//创建一个意图</span></span><br><span class="line">Intent intent = <span class="keyword">new</span> Intent(Intent.ACTION_VIEW, Uri.parse(<span class="string">"https://www.baidu.com"</span>));</span><br><span class="line">PendingIntent pIntent = PendingIntent.getActivity(<span class="keyword">this</span>, <span class="number">1</span>, intent, <span class="number">0</span>);</span><br><span class="line"><span class="comment">//setContentIntent  将意图设置到通知上</span></span><br><span class="line">builder.setContentIntent(pIntent);</span><br><span class="line"><span class="comment">//通知默认的声音 震动 呼吸灯</span></span><br><span class="line">builder.setDefaults(NotificationCompat.DEFAULT_ALL);</span><br><span class="line"><span class="comment">//构建通知</span></span><br><span class="line">Notification notification = builder.build();</span><br><span class="line"><span class="comment">//将构建好的通知添加到通知管理器中，执行通知</span></span><br><span class="line">mNotificationManager.notify(<span class="number">0</span>, notification);</span><br></pre></td></tr></table></figure><p>这段代码很简单，已经添加了注释，没有什么可以说的。</p><h2 id="差异复现"><a href="#差异复现" class="headerlink" title="差异复现"></a>差异复现</h2><h3 id="SDK-lt-8-0-API-26"><a href="#SDK-lt-8-0-API-26" class="headerlink" title="SDK &lt; 8.0(API 26)"></a>SDK &lt; 8.0(API 26)</h3><p>这种情况，上面的示例代码是能无障碍的将通知消息显示出来。</p><h3 id="SDK-gt-8-0-API-26"><a href="#SDK-gt-8-0-API-26" class="headerlink" title="SDK &gt; = 8.0(API 26)"></a>SDK &gt; = 8.0(API 26)</h3><p>这种情况，上面的示例代码，是死活都不会把通知消息显示出来的。</p><p>在Android Oreo上的开发者选项中，新增加了一个<strong>show notification channel warnings</strong>的选项功能，可以通过<strong>Settings</strong> &gt; <strong>System</strong> &gt; <strong>Developer options</strong> 下找到开启。</p><p>再次运行代码后，界面上会弹出类似于下面的这样一个<strong>Toast</strong>,告知你的通知消息post失败，详细情况查看log</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Developer warning for package &quot;com.shoewann.notificationsimple&quot; </span><br><span class="line">Failed to post notification on channel &quot;null&quot; </span><br><span class="line">See log for more details</span><br></pre></td></tr></table></figure><p>查看log是这样的：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">E/NotificationService: No Channel found for pkg=com.shoewann.notificationsimple, channelId=null, id=0, tag=null, opPkg=com.shoewann.notificationsimple, callingUid=10083, userId=0, incomingUserId=0, notificationUid=10083, notification=Notification(channel=null pri=0 contentView=null vibrate=default sound=default tick defaults=0xffffffff flags=0x11 color=0x00000000 vis=PRIVATE)</span><br></pre></td></tr></table></figure><p>通过跟踪查看相关源代码，分析到了，在NotificationCompat这个类中的Builder方法。</p><p>在版本<strong>com.android.support:appcompat-v7:26.1.0</strong>的兼容库中，可以看到传一个参数的<strong>Builder(Context context)</strong>方法已经过期，使用传入两个参数的<strong>Builder(@NonNull Context context, @NonNull String channelId)</strong>新方法代替。</p><p><strong>注意</strong>：该新方法需要传入的这两个参数都是标注了<strong>@NonNull</strong>，也就是<strong>不能传入null</strong>或者<strong>未初始化的变量</strong>。</p><h2 id="兼容代码"><a href="#兼容代码" class="headerlink" title="兼容代码"></a>兼容代码</h2><p>通过以上的分析，也就是我们在Android Oreo上面使用Notification，就必须要为你的Notification创建一个Notification Channels(通知渠道)。</p><h3 id="创建通知渠道"><a href="#创建通知渠道" class="headerlink" title="创建通知渠道"></a>创建通知渠道</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line">NotificationCompat.Builder builder = <span class="keyword">null</span>;</span><br><span class="line"><span class="keyword">if</span> (android.os.Build.VERSION.SDK_INT &gt;= android.os.Build.VERSION_CODES.O) &#123;</span><br><span class="line">    NotificationChannel channel = <span class="keyword">new</span> NotificationChannel(<span class="string">"通知渠道ID"</span>,</span><br><span class="line">                    <span class="string">"通知渠道名称"</span>, NotificationManager.IMPORTANCE_DEFAULT);</span><br><span class="line">    channel.enableLights(<span class="keyword">true</span>); <span class="comment">//设置开启指示灯，如果设备有的话</span></span><br><span class="line">    channel.setLightColor(Color.RED); <span class="comment">//设置指示灯颜色</span></span><br><span class="line">    channel.setShowBadge(<span class="keyword">true</span>); <span class="comment">//设置是否显示角标</span></span><br><span class="line">    channel.setLockscreenVisibility(Notification.VISIBILITY_PRIVATE);<span class="comment">//设置是否应在锁定屏幕上显示此频道的通知</span></span><br><span class="line">    channel.setDescription(<span class="string">"通知渠道描述"</span>);<span class="comment">//设置渠道描述</span></span><br><span class="line">    channel.setVibrationPattern(<span class="keyword">new</span> <span class="keyword">long</span>[]&#123;<span class="number">100</span>,<span class="number">200</span>,<span class="number">300</span>,<span class="number">400</span>,<span class="number">500</span>,<span class="number">600</span>&#125;);<span class="comment">//设置震动频率</span></span><br><span class="line">    channel.setBypassDnd(<span class="keyword">true</span>);<span class="comment">//设置是否绕过免打扰模式</span></span><br><span class="line">    mNotificationManager.createNotificationChannel(channel);</span><br><span class="line">    createNotificationChannelGroups();</span><br><span class="line">    setNotificationChannelGroups(channel);</span><br><span class="line">    builder = <span class="keyword">new</span> NotificationCompat.Builder(<span class="keyword">this</span>, <span class="string">"通知渠道ID"</span>);</span><br><span class="line">    builder.setBadgeIconType(BADGE_ICON_SMALL);<span class="comment">//设置显示角标的样式</span></span><br><span class="line">    builder.setNumber(<span class="number">3</span>);<span class="comment">//设置显示角标的数量</span></span><br><span class="line">    builder.setTimeoutAfter(<span class="number">5000</span>);<span class="comment">//设置通知被创建多长时间之后自动取消通知栏的通知。</span></span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">builder = <span class="keyword">new</span> NotificationCompat.Builder(<span class="keyword">this</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//setContentTitle 通知栏通知的标题</span></span><br><span class="line">builder.setContentTitle(<span class="string">"内容标题"</span>);</span><br><span class="line"><span class="comment">//setContentText  通知栏通知的详细内容</span></span><br><span class="line">builder.setContentText(<span class="string">"内容文本信息"</span>);</span><br><span class="line"><span class="comment">//setAutoCancel 点击通知的清除按钮是否清除该消息（true/false）</span></span><br><span class="line">builder.setAutoCancel(<span class="keyword">true</span>);</span><br><span class="line"><span class="comment">//setLargeIcon  通知消息上的大图标</span></span><br><span class="line">builder.setLargeIcon(BitmapFactory.decodeResource(getResources(), R.mipmap.ic_launcher));</span><br><span class="line"><span class="comment">//setSmallIcon  通知上面的小图标</span></span><br><span class="line">builder.setSmallIcon(R.mipmap.ic_launcher);<span class="comment">//小图标</span></span><br><span class="line"><span class="comment">//创建一个意图</span></span><br><span class="line">Intent intent = <span class="keyword">new</span> Intent(Intent.ACTION_VIEW, Uri.parse(<span class="string">"https://www.baidu.com"</span>));</span><br><span class="line">PendingIntent pIntent = PendingIntent.getActivity(<span class="keyword">this</span>, <span class="number">1</span>, intent, <span class="number">0</span>);</span><br><span class="line"><span class="comment">//setContentIntent  将意图设置到通知上</span></span><br><span class="line">builder.setContentIntent(pIntent);</span><br><span class="line"><span class="comment">//通知默认的声音 震动 呼吸灯</span></span><br><span class="line">builder.setDefaults(NotificationCompat.DEFAULT_ALL);</span><br><span class="line"><span class="comment">//构建通知</span></span><br><span class="line">Notification notification = builder.build();</span><br><span class="line"><span class="comment">//将构建好的通知添加到通知管理器中，执行通知</span></span><br><span class="line">mNotificationManager.notify(<span class="number">0</span>, notification);</span><br></pre></td></tr></table></figure><p>效果图:</p><p><img src="/images/android-o-notification-channel-1.png" alt="android-o-notification-channel-1"></p><p>向右滑动通知消息，可以显示延迟本条消息显示和设置选项</p><p><img src="/images/android-o-notification-channel-2.png" alt="android-o-notification-channel-2"></p><p>点击左边的延迟本条消息显示的时间</p><p><img src="/images/android-o-notification-channel-3.png" alt="android-o-notification-channel-3"></p><p>点击右边的设置选项，可以显示进入操作通知的设置入口</p><p><img src="/images/android-o-notification-channel-4.png" alt="android-o-notification-channel-4"></p><p>在桌面上的快捷方式上会显示角标</p><p><img src="/images/android-o-notification-channel-6.png" alt="android-o-notification-channel-6"></p><p>长按快捷方式，会在快捷方式旁边弹出通知栏窗口，显示通知栏消息等信息。</p><p><img src="/images/android-o-notification-channel-7.png" alt="android-o-notification-channel-7"></p><h3 id="移除通知渠道"><a href="#移除通知渠道" class="headerlink" title="移除通知渠道"></a>移除通知渠道</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (android.os.Build.VERSION.SDK_INT &gt;= android.os.Build.VERSION_CODES.O) &#123;</span><br><span class="line">    mNotificationManager.deleteNotificationChannel(<span class="string">"通知渠道ID"</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="跳转到通知渠道设置"><a href="#跳转到通知渠道设置" class="headerlink" title="跳转到通知渠道设置"></a>跳转到通知渠道设置</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (android.os.Build.VERSION.SDK_INT &gt;= android.os.Build.VERSION_CODES.O) &#123;</span><br><span class="line">    Intent intent = <span class="keyword">new</span> Intent(Settings.ACTION_CHANNEL_NOTIFICATION_SETTINGS);</span><br><span class="line">    intent.putExtra(Settings.EXTRA_CHANNEL_ID, <span class="string">"通知渠道ID"</span>);</span><br><span class="line">    intent.putExtra(Settings.EXTRA_APP_PACKAGE, getPackageName());</span><br><span class="line">    startActivity(intent);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="/images/android-o-notification-channel-5.png" alt="android-o-notification-channel-5"></p><h3 id="创建通知渠道组"><a href="#创建通知渠道组" class="headerlink" title="创建通知渠道组"></a>创建通知渠道组</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (android.os.Build.VERSION.SDK_INT &gt;= android.os.Build.VERSION_CODES.O) &#123;</span><br><span class="line">    mNotificationManager.createNotificationChannelGroup(<span class="keyword">new</span> NotificationChannelGroup(<span class="string">"通知渠道组ID"</span>, <span class="string">"通知渠道组名称"</span>));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="绑定通知渠道组"><a href="#绑定通知渠道组" class="headerlink" title="绑定通知渠道组"></a>绑定通知渠道组</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (android.os.Build.VERSION.SDK_INT &gt;= android.os.Build.VERSION_CODES.O) &#123;</span><br><span class="line">    channel.setGroup(<span class="string">"通知渠道组ID"</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>本文只是简要的总结了通知渠道的基本用法，还有更多的使用方法，请参考<span class="exturl" data-url="aHR0cHM6Ly9kZXZlbG9wZXIuYW5kcm9pZC5nb29nbGUuY24vcmVmZXJlbmNlL2FuZHJvaWQvYXBwL05vdGlmaWNhdGlvbkNoYW5uZWwuaHRtbA==" title="https://developer.android.google.cn/reference/android/app/NotificationChannel.html">Android官方文档-NotificationChannel<i class="fa fa-external-link"></i></span>。关于本文如有不足之处，欢迎指正，谢谢。</p></blockquote>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;本文是关于针对Android O 通知渠道的总结。 &lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="Android" scheme="https://shoewann0402.github.io/categories/Android/"/>
    
      <category term="Notification" scheme="https://shoewann0402.github.io/categories/Android/Notification/"/>
    
    
      <category term="Notification Channels" scheme="https://shoewann0402.github.io/tags/Notification-Channels/"/>
    
      <category term="Android O" scheme="https://shoewann0402.github.io/tags/Android-O/"/>
    
      <category term="通知渠道" scheme="https://shoewann0402.github.io/tags/%E9%80%9A%E7%9F%A5%E6%B8%A0%E9%81%93/"/>
    
  </entry>
  
  <entry>
    <title>关于Android WindowManager行为变化</title>
    <link href="https://shoewann0402.github.io/2018/01/01/about-android-windowmanager-behavior-changes/"/>
    <id>https://shoewann0402.github.io/2018/01/01/about-android-windowmanager-behavior-changes/</id>
    <published>2018-01-01T04:25:14.000Z</published>
    <updated>2018-01-01T08:33:01.000Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>本文是关于针对Android WindowManager悬浮窗行为变化的总结。</p></blockquote><a id="more"></a><h2 id="官方参考"><a href="#官方参考" class="headerlink" title="官方参考"></a>官方参考</h2><p><span class="exturl" data-url="aHR0cHM6Ly9kZXZlbG9wZXIuYW5kcm9pZC5nb29nbGUuY24vcmVmZXJlbmNlL2FuZHJvaWQvdmlldy9XaW5kb3dNYW5hZ2VyLmh0bWw=" title="https://developer.android.google.cn/reference/android/view/WindowManager.html"><strong>WindowManager</strong><i class="fa fa-external-link"></i></span><br>public interface WindowManager<br>implements ViewManager</p><p>android.view.WindowManager</p><h2 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h2><p>首先创建一个简单的WindowManager悬浮窗，具体代码如下:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.shoewann.windowmanager;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> android.graphics.PixelFormat;</span><br><span class="line"><span class="keyword">import</span> android.support.v7.app.AppCompatActivity;</span><br><span class="line"><span class="keyword">import</span> android.os.Bundle;</span><br><span class="line"><span class="keyword">import</span> android.view.Gravity;</span><br><span class="line"><span class="keyword">import</span> android.view.View;</span><br><span class="line"><span class="keyword">import</span> android.view.WindowManager;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.shoewann.windowmanager.view.FloatView;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MainActivity</span> <span class="keyword">extends</span> <span class="title">AppCompatActivity</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onCreate</span><span class="params">(Bundle savedInstanceState)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>.onCreate(savedInstanceState);</span><br><span class="line">        setContentView(R.layout.activity_main);</span><br><span class="line">        (findViewById(R.id.btn_show)).setOnClickListener(<span class="keyword">new</span> View.OnClickListener() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onClick</span><span class="params">(View view)</span> </span>&#123;</span><br><span class="line">                setUpFloatView();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setUpFloatView</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        WindowManager windowManager = (WindowManager) getSystemService(WINDOW_SERVICE);</span><br><span class="line">        FloatView floatView = <span class="keyword">new</span> FloatView(getApplicationContext());</span><br><span class="line">        WindowManager.LayoutParams params = <span class="keyword">new</span> WindowManager.LayoutParams();</span><br><span class="line">        params.type = WindowManager.LayoutParams.TYPE_PHONE;</span><br><span class="line">        params.format = PixelFormat.RGBA_8888;</span><br><span class="line">        params.gravity = Gravity.START | Gravity.TOP;</span><br><span class="line">        params.flags = WindowManager.LayoutParams.FLAG_NOT_TOUCH_MODAL | WindowManager.LayoutParams.FLAG_NOT_FOCUSABLE;</span><br><span class="line">        params.width = <span class="number">200</span>;</span><br><span class="line">        params.height = <span class="number">200</span>;</span><br><span class="line">        params.x = <span class="number">0</span>;</span><br><span class="line">        params.y = <span class="number">0</span>;</span><br><span class="line">        floatView.setImageResource(R.mipmap.ic_launcher_round);</span><br><span class="line">        windowManager.addView(floatView, params);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>上面的代码简单易懂，这里就不再进行解释了。</p><p>最后不要忘记了，在AndroidManifest.xml添加所需要的权限。</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">uses-permission</span> <span class="attr">android:name</span>=<span class="string">"android.permission.SYSTEM_ALERT_WINDOW"</span> /&gt;</span></span><br></pre></td></tr></table></figure><h2 id="行为变化"><a href="#行为变化" class="headerlink" title="行为变化"></a>行为变化</h2><h3 id="SDK-lt-Android-M"><a href="#SDK-lt-Android-M" class="headerlink" title="SDK &lt; Android M"></a>SDK &lt; Android M</h3><p>以上的示例代码，在这种情况下(比如Kitkat 4.4)的设备上现在就已经可以成功创建出一个系统悬浮窗了。</p><p>运行，效果图如下</p><p><img src="/images/windowmanager-k.png" alt="windowmanager-k"></p><h3 id="SDK-gt-Android-M"><a href="#SDK-gt-Android-M" class="headerlink" title="SDK &gt;= Android M"></a>SDK &gt;= Android M</h3><p>到了Android M 之后的设备，也就是targetSdkVersion要指定23(及其以上)，程序就会崩溃，抛出如下异常信息：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">E/AndroidRuntime: FATAL EXCEPTION: main</span><br><span class="line">                  Process: com.shoewann.windowmanager, PID: 3120</span><br><span class="line">                  android.view.WindowManager$BadTokenException: Unable to add window android.view.ViewRootImpl$W@c1fda7 -- permission denied for this window type</span><br><span class="line">                      at android.view.ViewRootImpl.setView(ViewRootImpl.java:591)</span><br><span class="line">                      at android.view.WindowManagerGlobal.addView(WindowManagerGlobal.java:310)</span><br><span class="line">                      at android.view.WindowManagerImpl.addView(WindowManagerImpl.java:85)</span><br><span class="line">                      at com.shoewann.windowmanager.MainActivity.setUpFloatView(MainActivity.java:39)</span><br><span class="line">                      at com.shoewann.windowmanager.MainActivity$1.onClick(MainActivity.java:21)</span><br><span class="line">                      at android.view.View.performClick(View.java:5198)</span><br><span class="line">                      at android.view.View$PerformClick.run(View.java:21147)</span><br><span class="line">                      at android.os.Handler.handleCallback(Handler.java:739)</span><br><span class="line">                      at android.os.Handler.dispatchMessage(Handler.java:95)</span><br><span class="line">                      at android.os.Looper.loop(Looper.java:148)</span><br><span class="line">                      at android.app.ActivityThread.main(ActivityThread.java:5417)</span><br><span class="line">                      at java.lang.reflect.Method.invoke(Native Method)</span><br><span class="line">                      at com.android.internal.os.ZygoteInit$MethodAndArgsCaller.run(ZygoteInit.java:726)</span><br><span class="line">                      at com.android.internal.os.ZygoteInit.main(ZygoteInit.java:616)</span><br></pre></td></tr></table></figure><p><strong>参考</strong>:<span class="exturl" data-url="aHR0cHM6Ly9kZXZlbG9wZXIuYW5kcm9pZC5nb29nbGUuY24vcmVmZXJlbmNlL2FuZHJvaWQvTWFuaWZlc3QucGVybWlzc2lvbi5odG1sI1dSSVRFX1NFVFRJTkdT" title="https://developer.android.google.cn/reference/android/Manifest.permission.html#WRITE_SETTINGS">SYSTEM_ALERT_WINDOW<i class="fa fa-external-link"></i></span></p><blockquote><p>Note: If the app targets API level 23 or higher, the app user must explicitly grant this permission to the app through a permission management screen. The app requests the user’s approval by sending an intent with action ACTION_MANAGE_OVERLAY_PERMISSION. The app can check whether it has this authorization by calling Settings.canDrawOverlays().</p></blockquote><p>官方的解释是，如果你的应用程序目标API等级为23或者更高版本，在使用SYSTEM_ALERT_WINDOW权限时，需要先调用Settings.canDrawOverlays()来判断一下是否允许创建悬浮窗，如果允许的话就可以创建了，不允许的话还要发送一个action值为ACTION_MANAGE_OVERLAY_PERMISSION的Intent来让用户同意创建悬浮窗。</p><p>针对该行为变化，对上面的示例代码进行了修改,添加<strong>权限请求</strong>，以兼容Android M：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.shoewann.windowmanager;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> android.content.Context;</span><br><span class="line"><span class="keyword">import</span> android.content.Intent;</span><br><span class="line"><span class="keyword">import</span> android.graphics.PixelFormat;</span><br><span class="line"><span class="keyword">import</span> android.net.Uri;</span><br><span class="line"><span class="keyword">import</span> android.os.Build;</span><br><span class="line"><span class="keyword">import</span> android.provider.Settings;</span><br><span class="line"><span class="keyword">import</span> android.support.v7.app.AppCompatActivity;</span><br><span class="line"><span class="keyword">import</span> android.os.Bundle;</span><br><span class="line"><span class="keyword">import</span> android.util.Log;</span><br><span class="line"><span class="keyword">import</span> android.view.Gravity;</span><br><span class="line"><span class="keyword">import</span> android.view.View;</span><br><span class="line"><span class="keyword">import</span> android.view.WindowManager;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.shoewann.windowmanager.view.FloatView;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Method;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MainActivity</span> <span class="keyword">extends</span> <span class="title">AppCompatActivity</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String TAG = <span class="string">"MainActivity"</span>;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onCreate</span><span class="params">(Bundle savedInstanceState)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>.onCreate(savedInstanceState);</span><br><span class="line">        setContentView(R.layout.activity_main);</span><br><span class="line">        (findViewById(R.id.btn_show)).setOnClickListener(<span class="keyword">new</span> View.OnClickListener() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onClick</span><span class="params">(View view)</span> </span>&#123;</span><br><span class="line">                <span class="keyword">if</span> (!commonROMPermissionCheck(MainActivity.<span class="keyword">this</span>)) &#123;</span><br><span class="line">                    requestAlertWindowPermission();</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    setUpFloatView();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setUpFloatView</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        Log.d(TAG, <span class="string">"setUpFloatView() called"</span>);</span><br><span class="line">        WindowManager windowManager = (WindowManager) getSystemService(WINDOW_SERVICE);</span><br><span class="line">        FloatView floatView = <span class="keyword">new</span> FloatView(getApplicationContext());</span><br><span class="line">        WindowManager.LayoutParams params = <span class="keyword">new</span> WindowManager.LayoutParams();</span><br><span class="line">        params.type = WindowManager.LayoutParams.TYPE_PHONE;</span><br><span class="line">        params.format = PixelFormat.RGBA_8888;</span><br><span class="line">        params.gravity = Gravity.START | Gravity.TOP;</span><br><span class="line">        params.flags = WindowManager.LayoutParams.FLAG_NOT_TOUCH_MODAL | WindowManager.LayoutParams.FLAG_NOT_FOCUSABLE;</span><br><span class="line">        params.width = <span class="number">200</span>;</span><br><span class="line">        params.height = <span class="number">200</span>;</span><br><span class="line">        params.x = <span class="number">0</span>;</span><br><span class="line">        params.y = <span class="number">0</span>;</span><br><span class="line">        floatView.setImageResource(R.mipmap.ic_launcher_round);</span><br><span class="line">        windowManager.addView(floatView, params);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> REQUEST_CODE = <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//判断权限</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">boolean</span> <span class="title">commonROMPermissionCheck</span><span class="params">(Context context)</span> </span>&#123;</span><br><span class="line">        Log.d(TAG, <span class="string">"commonROMPermissionCheck() called with: context = ["</span> + context + <span class="string">"]"</span>);</span><br><span class="line">        Boolean result = <span class="keyword">true</span>;</span><br><span class="line">        <span class="keyword">if</span> (Build.VERSION.SDK_INT &gt;= <span class="number">23</span>) &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                Class clazz = Settings.class;</span><br><span class="line">                Method canDrawOverlays = clazz.getDeclaredMethod(<span class="string">"canDrawOverlays"</span>, Context.class);</span><br><span class="line">                result = (Boolean) canDrawOverlays.invoke(<span class="keyword">null</span>, context);</span><br><span class="line">            &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">                Log.e(TAG, Log.getStackTraceString(e));</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//申请权限</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">requestAlertWindowPermission</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        Log.d(TAG, <span class="string">"requestAlertWindowPermission() called"</span>);</span><br><span class="line">        <span class="keyword">if</span> (android.os.Build.VERSION.SDK_INT &gt;= android.os.Build.VERSION_CODES.M) &#123;</span><br><span class="line">            Intent intent = <span class="keyword">new</span> Intent(Settings.ACTION_MANAGE_OVERLAY_PERMISSION);</span><br><span class="line">            intent.setData(Uri.parse(<span class="string">"package:"</span> + getPackageName()));</span><br><span class="line">            startActivityForResult(intent, REQUEST_CODE);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="comment">//处理回调</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onActivityResult</span><span class="params">(<span class="keyword">int</span> requestCode, <span class="keyword">int</span> resultCode, Intent data)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>.onActivityResult(requestCode, resultCode, data);</span><br><span class="line">        <span class="keyword">if</span> (requestCode == REQUEST_CODE) &#123;</span><br><span class="line">            <span class="keyword">if</span> (Build.VERSION.SDK_INT &gt;= Build.VERSION_CODES.M) &#123;</span><br><span class="line">                <span class="keyword">if</span> (Settings.canDrawOverlays(<span class="keyword">this</span>)) &#123;</span><br><span class="line">                    Log.i(TAG, <span class="string">"onActivityResult granted"</span>);</span><br><span class="line">                    setUpFloatView();</span><br><span class="line">                &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">                    Log.i(TAG, <span class="string">"onActivityResult denied"</span>);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>运行,效果图如下</p><p><img src="/images/windowmanager-m.png" alt="windowmanager-m"></p><h4 id="SDK-gt-Android-O"><a href="#SDK-gt-Android-O" class="headerlink" title="SDK &gt;= Android O"></a>SDK &gt;= Android O</h4><p>到了Android O 的设备运行上面在M上二次修改的动态请求权限的代码，程序抛出运行时异常，随后崩溃，这又是为什么呢？</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">E/AndroidRuntime: FATAL EXCEPTION: main</span><br><span class="line">                  Process: com.shoewann.windowmanager, PID: 17929</span><br><span class="line">                  android.view.WindowManager$BadTokenException: Unable to add window android.view.ViewRootImpl$W@d422e7c -- permission denied for window type 2002</span><br><span class="line">                      at android.view.ViewRootImpl.setView(ViewRootImpl.java:789)</span><br><span class="line">                      at android.view.WindowManagerGlobal.addView(WindowManagerGlobal.java:356)</span><br><span class="line">                      at android.view.WindowManagerImpl.addView(WindowManagerImpl.java:93)</span><br><span class="line">                      at com.shoewann.windowmanager.MainActivity.setUpFloatView(MainActivity.java:54)</span><br><span class="line">                      at com.shoewann.windowmanager.MainActivity$1.onClick(MainActivity.java:34)</span><br><span class="line">                      at android.view.View.performClick(View.java:6294)</span><br><span class="line">                      at android.view.View$PerformClick.run(View.java:24770)</span><br><span class="line">                      at android.os.Handler.handleCallback(Handler.java:790)</span><br><span class="line">                      at android.os.Handler.dispatchMessage(Handler.java:99)</span><br><span class="line">                      at android.os.Looper.loop(Looper.java:164)</span><br><span class="line">                      at android.app.ActivityThread.main(ActivityThread.java:6494)</span><br><span class="line">                      at java.lang.reflect.Method.invoke(Native Method)</span><br><span class="line">                      at com.android.internal.os.RuntimeInit$MethodAndArgsCaller.run(RuntimeInit.java:438)</span><br><span class="line">                      at com.android.internal.os.ZygoteInit.main(ZygoteInit.java:807)</span><br></pre></td></tr></table></figure><p>查阅Android Oreo官方文档，<span class="exturl" data-url="aHR0cHM6Ly9kZXZlbG9wZXIuYW5kcm9pZC5nb29nbGUuY24vYWJvdXQvdmVyc2lvbnMvb3Jlby9hbmRyb2lkLTguMC1jaGFuZ2VzLmh0bWwjY3d0" title="https://developer.android.google.cn/about/versions/oreo/android-8.0-changes.html#cwt">Alert windows行为变化<i class="fa fa-external-link"></i></span></p><p>应用程序使用<span class="exturl" data-url="aHR0cHM6Ly9kZXZlbG9wZXIuYW5kcm9pZC5nb29nbGUuY24vcmVmZXJlbmNlL2FuZHJvaWQvTWFuaWZlc3QucGVybWlzc2lvbi5odG1sI1NZU1RFTV9BTEVSVF9XSU5ET1c=" title="https://developer.android.google.cn/reference/android/Manifest.permission.html#SYSTEM_ALERT_WINDOW">SYSTEM_ALERT_WINDOW<i class="fa fa-external-link"></i></span>权限时，不再支持如下窗口类型在其他应用和系统窗口之上显示警告窗口了：</p><blockquote><ul><li><span class="exturl" data-url="aHR0cHM6Ly9kZXZlbG9wZXIuYW5kcm9pZC5nb29nbGUuY24vcmVmZXJlbmNlL2FuZHJvaWQvdmlldy9XaW5kb3dNYW5hZ2VyLkxheW91dFBhcmFtcy5odG1sI1RZUEVfUEhPTkU=" title="https://developer.android.google.cn/reference/android/view/WindowManager.LayoutParams.html#TYPE_PHONE">TYPE_PHONE<i class="fa fa-external-link"></i></span></li><li><span class="exturl" data-url="aHR0cHM6Ly9kZXZlbG9wZXIuYW5kcm9pZC5nb29nbGUuY24vcmVmZXJlbmNlL2FuZHJvaWQvdmlldy9XaW5kb3dNYW5hZ2VyLkxheW91dFBhcmFtcy5odG1sI1RZUEVfUFJJT1JJVFlfUEhPTkU=" title="https://developer.android.google.cn/reference/android/view/WindowManager.LayoutParams.html#TYPE_PRIORITY_PHONE">TYPE_PRIORITY_PHONE<i class="fa fa-external-link"></i></span></li><li><span class="exturl" data-url="aHR0cHM6Ly9kZXZlbG9wZXIuYW5kcm9pZC5nb29nbGUuY24vcmVmZXJlbmNlL2FuZHJvaWQvdmlldy9XaW5kb3dNYW5hZ2VyLkxheW91dFBhcmFtcy5odG1sI1RZUEVfU1lTVEVNX0FMRVJU" title="https://developer.android.google.cn/reference/android/view/WindowManager.LayoutParams.html#TYPE_SYSTEM_ALERT">TYPE_SYSTEM_ALERT<i class="fa fa-external-link"></i></span></li><li><span class="exturl" data-url="aHR0cHM6Ly9kZXZlbG9wZXIuYW5kcm9pZC5nb29nbGUuY24vcmVmZXJlbmNlL2FuZHJvaWQvdmlldy9XaW5kb3dNYW5hZ2VyLkxheW91dFBhcmFtcy5odG1sI1RZUEVfU1lTVEVNX09WRVJMQVk=" title="https://developer.android.google.cn/reference/android/view/WindowManager.LayoutParams.html#TYPE_SYSTEM_OVERLAY">TYPE_SYSTEM_OVERLAY<i class="fa fa-external-link"></i></span></li><li><span class="exturl" data-url="aHR0cHM6Ly9kZXZlbG9wZXIuYW5kcm9pZC5nb29nbGUuY24vcmVmZXJlbmNlL2FuZHJvaWQvdmlldy9XaW5kb3dNYW5hZ2VyLkxheW91dFBhcmFtcy5odG1sI1RZUEVfU1lTVEVNX0VSUk9S" title="https://developer.android.google.cn/reference/android/view/WindowManager.LayoutParams.html#TYPE_SYSTEM_ERROR">TYPE_SYSTEM_ERROR<i class="fa fa-external-link"></i></span></li></ul></blockquote><p>应用必须使用一个被叫做<span class="exturl" data-url="aHR0cHM6Ly9kZXZlbG9wZXIuYW5kcm9pZC5nb29nbGUuY24vcmVmZXJlbmNlL2FuZHJvaWQvdmlldy9XaW5kb3dNYW5hZ2VyLkxheW91dFBhcmFtcy5odG1sI1RZUEVfQVBQTElDQVRJT05fT1ZFUkxBWQ==" title="https://developer.android.google.cn/reference/android/view/WindowManager.LayoutParams.html#TYPE_APPLICATION_OVERLAY">TYPE_APPLICATION_OVERLAY<i class="fa fa-external-link"></i></span>类型的新窗口类型替代。</p><p>当使用<span class="exturl" data-url="aHR0cHM6Ly9kZXZlbG9wZXIuYW5kcm9pZC5nb29nbGUuY24vcmVmZXJlbmNlL2FuZHJvaWQvdmlldy9XaW5kb3dNYW5hZ2VyLkxheW91dFBhcmFtcy5odG1sI1RZUEVfQVBQTElDQVRJT05fT1ZFUkxBWQ==" title="https://developer.android.google.cn/reference/android/view/WindowManager.LayoutParams.html#TYPE_APPLICATION_OVERLAY">TYPE_APPLICATION_OVERLAY<i class="fa fa-external-link"></i></span>类型的窗口为你的应用程序去显示警告窗口，请记住新窗口的如下特征：</p><blockquote><ul><li>一个应用程序的警告窗口总是显示在系统窗口之下，比如状态栏和输入法。</li><li>系统能够移除和重置窗口大小，使用<span class="exturl" data-url="aHR0cHM6Ly9kZXZlbG9wZXIuYW5kcm9pZC5nb29nbGUuY24vcmVmZXJlbmNlL2FuZHJvaWQvdmlldy9XaW5kb3dNYW5hZ2VyLkxheW91dFBhcmFtcy5odG1sI1RZUEVfQVBQTElDQVRJT05fT1ZFUkxBWQ==" title="https://developer.android.google.cn/reference/android/view/WindowManager.LayoutParams.html#TYPE_APPLICATION_OVERLAY">TYPE_APPLICATION_OVERLAY<i class="fa fa-external-link"></i></span>类型的窗口去提高屏幕演示</li><li>通过打开通知栏窗帘，用户能够访问设置去屏蔽一个应用通过<span class="exturl" data-url="aHR0cHM6Ly9kZXZlbG9wZXIuYW5kcm9pZC5nb29nbGUuY24vcmVmZXJlbmNlL2FuZHJvaWQvdmlldy9XaW5kb3dNYW5hZ2VyLkxheW91dFBhcmFtcy5odG1sI1RZUEVfQVBQTElDQVRJT05fT1ZFUkxBWQ==" title="https://developer.android.google.cn/reference/android/view/WindowManager.LayoutParams.html#TYPE_APPLICATION_OVERLAY">TYPE_APPLICATION_OVERLAY<i class="fa fa-external-link"></i></span>窗口类型去显示警告窗口的显示</li></ul></blockquote><p>针对该行为变化，对上面的示例代码进行了修改，以兼容Android O：</p><p>更改<strong>TYPE_PHONE</strong>为<strong>TYPE_APPLICATION_OVERLAY</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">-  params.type = WindowManager.LayoutParams.TYPE_PHONE;</span><br><span class="line">+  params.type = WindowManager.LayoutParams.TYPE_APPLICATION_OVERLAY;</span><br></pre></td></tr></table></figure><p>运行,效果图如下</p><p><img src="/images/windowmanager-o.png" alt="windowmanager-o"></p><blockquote><p>以上就是简单的对Android WindowManager悬浮窗行为变化的简单总结。如有不足，欢迎指正，谢谢。</p></blockquote>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;本文是关于针对Android WindowManager悬浮窗行为变化的总结。&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="Android" scheme="https://shoewann0402.github.io/categories/Android/"/>
    
      <category term="WindowManager" scheme="https://shoewann0402.github.io/categories/Android/WindowManager/"/>
    
    
      <category term="Android O" scheme="https://shoewann0402.github.io/tags/Android-O/"/>
    
      <category term="WindowManager" scheme="https://shoewann0402.github.io/tags/WindowManager/"/>
    
      <category term="Android M" scheme="https://shoewann0402.github.io/tags/Android-M/"/>
    
  </entry>
  
  <entry>
    <title>Android 模拟器快速启动和主要功能</title>
    <link href="https://shoewann0402.github.io/2017/12/19/quick-boot-top-features-in-android/"/>
    <id>https://shoewann0402.github.io/2017/12/19/quick-boot-top-features-in-android/</id>
    <published>2017-12-19T03:13:19.000Z</published>
    <updated>2017-12-19T10:50:42.000Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>原文来自：<span class="exturl" data-url="aHR0cHM6Ly9hbmRyb2lkLWRldmVsb3BlcnMuZ29vZ2xlYmxvZy5jb20vMjAxNy8xMi9xdWljay1ib290LXRvcC1mZWF0dXJlcy1pbi1hbmRyb2lkLmh0bWw=" title="https://android-developers.googleblog.com/2017/12/quick-boot-top-features-in-android.html">Quick Boot &amp; the Top Features in the Android Emulator<i class="fa fa-external-link"></i></span></p></blockquote><p>今天我们很高兴的宣布Android模拟器快速启动。使用快速启动，您能在6秒内启动模拟器。快速启动通过快照模拟器会话来工作，因此您能够在几秒钟内重新加载。快速启动是在Android Studio 3.0 canary更新通道首次发布，我们很高兴的的在今天的更新中将这一个功能作为稳定版本发布。</p><a id="more"></a><p>除了这个新功能以外，我们也想突出显示最近发布的一些主要功能，自从<span class="exturl" data-url="aHR0cHM6Ly9hbmRyb2lkLWRldmVsb3BlcnMuZ29vZ2xlYmxvZy5jb20vMjAxNS8xMi9hbmRyb2lkLXN0dWRpby0yMC1wcmV2aWV3LWFuZHJvaWQuaHRtbA==" title="https://android-developers.googleblog.com/2015/12/android-studio-20-preview-android.html">两年前<i class="fa fa-external-link"></i></span>对Android模拟器进行了改造，我们继续将焦点放在改善速度、兼容性和添加一些丰富的功能，加速您的应用程序开发和测试。随着最近所有的变化，今天绝对值得去更新Android模拟器到最新版并使用它。</p><h2 id="主要的5个功能"><a href="#主要的5个功能" class="headerlink" title="主要的5个功能"></a>主要的5个功能</h2><blockquote><ul><li><strong>快速启动</strong> —— 今天作为一个稳定功能发布，快速启动允许您在6秒之内恢复您的Android模拟器会话。首次您开始启动Android模拟器的Android虚拟设备，它必须执行冷启动(就像启动设备一样)，但是随后的启动速度很快，系统将会恢复在您最后关闭模拟器时的状态(像唤醒设备一样)。我们通过完全重新设计旧式仿真器快照架构，使用虚拟传感器和GPU加速工作来完成了这个。无需额外的请求，因为快速启动在Android模拟器v27.0.2版本上是默认开启的。</li></ul></blockquote><p><img src="/images/image2.gif" alt="image2.gif"></p><blockquote><ul><li><strong>Android CTS 兼容性</strong> —— 每发布一个版本的Android SDK，我们都将确保Android模拟器已经为您的应用程序做好了需要的开发准备，从测试向后兼容的Android KitKat到集成了最新APIs的开发者预览版。对于增加模拟器系统镜像产品的质量和可靠性，我们现在从Android Nougat (API 24) 或者更高的对<span class="exturl" data-url="aHR0cHM6Ly9zb3VyY2UuYW5kcm9pZC5jb20vY29tcGF0aWJpbGl0eS8=" title="https://source.android.com/compatibility/">Android 兼容性的测试套件<i class="fa fa-external-link"></i></span>(CTS)构建有资格的最终版Android系统镜像 — 相同的测试套件官方Android物理设备必须通过。</li></ul></blockquote><blockquote><ul><li><strong>Google Play支持</strong> —— 我们知道大多数的应用程序开发者使用Google play 服务，在Android模拟器系统镜像上是很难保持服务的最新。为了解决这个问题，我们现在提供的Android系统镜像包括了Play商店的应用程序。Google Play 服务现开始从Android Nougat (API 24)可以使用了。这些新的模拟器镜像，您可以从您模拟器里面的Play 应用商店里面更新Google Play服务，正如您会在物理设备上操作的一样。还有就是，您现在能够使用Google Play应用商店测试结束到结束安装、更新和购买流程。</li></ul></blockquote><blockquote><ul><li><strong>性能提高</strong> —— 使模拟器更快速以及性能是我们团队正在进行的一个目标。我们持续的观察运行在您的开发机器上的模拟器对性能的影响，尤其是内存使用情况。使用最新版的Android模拟器，我们现在按需求分配RAM(内存)，而不是在您的AVD中定义最大的内存大小去分配和固定内存。对于Linux (KVM) 、macOS® (Hypervisor.内核)我们通过挖掘本地虚拟管理程序来实现这个，以及对Microsoft® Windows®增强Intel® HAXM (v6.2.1 或者更高版本)，它使用新的按需要分配内存。</li></ul></blockquote><p>额外的还有，再过去的几个版本中，我们有改善CPU和I/O性能，同时增强了GPU的性能，包括了对OpenGL ES 3.0的支持。看一下像ADB推送这样常见的任务，突出了Android CPU和I/O管道的改进：</p><p><img src="/images/image5.png" alt="image5.png"></p><p>对于GPU性能，我们创建了一个简单的<span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL2dvb2dsZS9ncHUtZW11bGF0aW9uLXN0cmVzcy10ZXN0" title="https://github.com/google/gpu-emulation-stress-test">GPU仿真压力测试应用程序<i class="fa fa-external-link"></i></span>去测量时间的推移。我们发现最最新版本的模拟器能够渲染比之前更高速的帧率，它是少数模拟器之一能够准确的按照Android规范去渲染OpenGL ES。</p><p><img src="/images/image1.gif" alt="image1.gif"></p><p><img src="/images/gpu_emulator_stress_test_chart.png" alt="gpu_emulator_stress_test_chart.png"></p><h2 id="更多的功能点"><a href="#更多的功能点" class="headerlink" title="更多的功能点"></a>更多的功能点</h2><p>除了这些主要的功能以外，这儿还有一大堆额外的功能，我们在过去的一年中已经添加到了Android 模拟器，您可能还不知道：</p><blockquote><ul><li><strong>Wi-Fi支持</strong> —— 从API 24的系统镜像开始，您能创建一个包含了连接到一个虚拟的数据网络和一个虚拟的Wi-Fi访问点的AVD</li></ul></blockquote><blockquote><ul><li><strong>Google cast 的支持</strong> —— 当使用一个Google Play 系统镜像，您能够在相同的Wi-Fi网络下够投屏幕和音频内容到Chromecast设备。</li></ul></blockquote><blockquote><ul><li><strong>拖拽APKs和文件</strong> —— 简单的拖拽一个apk到Android模拟器的窗口去触发一个app应用程序的安装。您也能够拖拽任意其它文件，并在您的Android虚拟设备里的/Downloads文件夹下发现它们。</li></ul></blockquote><blockquote><ul><li><strong>主机复制&amp;粘贴</strong> —— 您能够复制&amp;粘贴文本在Android模拟器和您的开发机器之间。</li></ul></blockquote><blockquote><ul><li><strong>虚拟的两个手指捏&amp;缩放</strong> —— 当您的应用程序像集成了Google Maps，按下Ctrl键(在Microsoft® Windows®或者Linux上)或者⌘ (在macOS®上)，并在屏幕上出现手指叠加以帮助捏和缩放操作。</li></ul></blockquote><blockquote><ul><li><strong>GPS位置</strong> —— 手动选择一个GPS点或者在Android模拟器的位置下选项卡下设置GPS点。</li></ul></blockquote><blockquote><ul><li><strong>虚拟传感器</strong> —— 在扩展控制面板上是一个支持传感器专用的页面，包括了加速度，方向，接近度以及更多</li></ul></blockquote><blockquote><ul><li><strong>摄像头支持</strong> —— 您能够使用一个摄像头或者您的笔记本内置的摄像头作为一个在AVD里面虚拟的摄像头。在AVD设置页面里面的高级设置页面验证您的相机设置。</li></ul></blockquote><blockquote><ul><li><strong>主机键盘</strong> —— 您能够使用您真实的键盘去输入文本内容到Android虚拟设备。</li></ul></blockquote><blockquote><ul><li><strong>虚拟短信和拨号</strong> —— 在扩展控制面板，您能够触发一个虚拟的短信或者拨号的去测试您应用里电话的依赖。</li></ul></blockquote><blockquote><ul><li><strong>屏幕缩放</strong> —— 在主工具栏，点击放大镜图标进入放大模式，然后选择一个您需要检测的屏幕区域。</li></ul></blockquote><blockquote><ul><li><strong>窗口重置大小</strong> —— 简单的拖拽Android模拟器窗口的一个角去改变您想要的大小</li></ul></blockquote><blockquote><ul><li><strong>网络代理的支持</strong> —— 通过到代理选项卡下的设置页面，添加一个自定义的HTTP代理到您的Android模拟器会话。</li></ul></blockquote><blockquote><ul><li><strong>Bug 报告</strong> —— 您能够通过使用在扩展控制面板的Bug报告部分，快速的为您的应用程序生成一个bug报告，并分享到您的团队或者发送反馈到Google</li></ul></blockquote><p>了解更多关于Android模拟器的内容，参考<span class="exturl" data-url="aHR0cHM6Ly9kZXZlbG9wZXIuYW5kcm9pZC5jb20vc3R1ZGlvL3J1bi9lbXVsYXRvci5odG1s" title="https://developer.android.com/studio/run/emulator.html">模拟器文档<i class="fa fa-external-link"></i></span></p><h2 id="从这里开始"><a href="#从这里开始" class="headerlink" title="从这里开始"></a>从这里开始</h2><p>这些所有的功能和改善都可以使用了，去下载并现在使用Android 模拟器v27.0.2+，您能够从Android Studio中的SDK Manager里面获得。对于一个快速的体验，我们建议您创建和运行x86版本的模拟器系统镜像，使用最新版本的Android 模拟器，安装 Intel® HAXM(如果适用)和显卡驱动。</p><p>我们感谢您反馈任何您喜欢的意见建议，问题或者您希望看到的功能。如果您发现了一个bug、issue或者有一个功能请求随时<span class="exturl" data-url="aHR0cHM6Ly9kZXZlbG9wZXIuYW5kcm9pZC5jb20vc3R1ZGlvL3JlcG9ydC1idWdzLmh0bWwjZW11bGF0b3ItYnVncw==" title="https://developer.android.com/studio/report-bugs.html#emulator-bugs">提出问题<i class="fa fa-external-link"></i></span>,我们无疑没有完成，但是我们希望您对到目前为止的改进感到兴奋。</p><blockquote><p>以上是对Google官网博客文章的翻译，如果不足，欢迎指正，谢谢</p></blockquote>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;原文来自：&lt;a href=&quot;https://android-developers.googleblog.com/2017/12/quick-boot-top-features-in-android.html&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Quick Boot &amp;amp; the Top Features in the Android Emulator&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;今天我们很高兴的宣布Android模拟器快速启动。使用快速启动，您能在6秒内启动模拟器。快速启动通过快照模拟器会话来工作，因此您能够在几秒钟内重新加载。快速启动是在Android Studio 3.0 canary更新通道首次发布，我们很高兴的的在今天的更新中将这一个功能作为稳定版本发布。&lt;/p&gt;
    
    </summary>
    
      <category term="Android" scheme="https://shoewann0402.github.io/categories/Android/"/>
    
      <category term="Android Emulator" scheme="https://shoewann0402.github.io/categories/Android/Android-Emulator/"/>
    
    
      <category term="Android Studio" scheme="https://shoewann0402.github.io/tags/Android-Studio/"/>
    
      <category term="Android" scheme="https://shoewann0402.github.io/tags/Android/"/>
    
      <category term="Android Emulator" scheme="https://shoewann0402.github.io/tags/Android-Emulator/"/>
    
  </entry>
  
  <entry>
    <title>GDD China 2017之旅</title>
    <link href="https://shoewann0402.github.io/2017/12/18/gdd-china-2017-in-shanghai-trip-record/"/>
    <id>https://shoewann0402.github.io/2017/12/18/gdd-china-2017-in-shanghai-trip-record/</id>
    <published>2017-12-18T15:34:51.000Z</published>
    <updated>2018-09-18T02:03:15.024Z</updated>
    
    <content type="html"><![CDATA[<p>2016年，那个时候我还在上海。去年的GDD上海场我没有去参加，当时是有些遗憾；今年2017年的GDD如期而至，两天都在上海举办，而我已经不在上海，回到了成都。这时的我决定去参加，因为我是谷歌爱好者，梦寐有机会去参加一次谷歌总部的活动，既然出国不行，那在国内举办活动更近了，并且这次大会我可以和我一直只能在电视和社交软件上的关注的谷歌大佬面对面，更不容错过！</p><a id="more"></a><p>通过GDD大会邮件的报名、筛选，我有幸成为了大会的嘉宾之一，GDD China 2017 活动举办的时间越来越近了。12月12日下午下班，没来得及吃饭，我就直奔机场，踏上成都飞往上海的航程。21：00的飞机，到上海已经23:10分，然后深夜地铁已经结束运营了，只好乘坐的士到以前上海的同事住的地方，已经是第二天凌晨12:00多了。</p><p>13日，GDD China 2017大会举办的第一天，地点在上海跨国采购会展中心。迎着朝阳，我来到了会场地点。首先需要通过安检方可进入会场，在会场外，随处可见Google的元素，Android机器人、Google Map定位图标，GDD China 2017大会代表中国元素的图案，旗帜，还有一些帐篷。会展大楼入口上面贴着醒目的“<strong>Google Developer Days China 2017</strong>”的Logo</p><p><img src="/images/mmexport1513120781516.jpg" alt="aa"></p><p><img src="/images/IMG_20171213_080050.jpg" alt="bb"></p><p>走进会场内，一楼进门口正对的是大会3D的Logo，从左侧看是Google，从右侧看是GDD2017，旁边是签到处，我排好队在签到处提供了签到二维码领到了大会的证件以及Google的纪念礼包，里面包含了DIY音响、贴纸等。之后，到了二楼领了同声传译机，去了三楼的会场层。</p><p>我来的还算比较早，在三楼有Google各种产品的展台，AndroidThings&amp;IoT、Android Wear、Android Assistant、Codelab、GDG等等。时间越来越近了，大会参加的人也越来越多了，10:00大会即将开始，我们进入了主会场听取大会的开幕主题演讲。主会场容纳了2000-3000人，随着代表着中国元素的舞蹈拉开了GDD China 2017大会的序幕。</p><p><img src="/images/IMG_20171213_081434.jpg" alt="cc"></p><p><img src="/images/IMG_20171213_083451.jpg" alt="dd"></p><p>这种气氛仿佛是就是在Google I/O现场，我见到了Google产品总监Andrew Bowers, Google大中华区总裁石博盟(Scott Beaumont),还有李飞飞博士，Google Cloud人工智能和机器学习首席科学家，两次提到了“AI 没有国界，AI 福祉亦无边界。”，并当场宣布了：谷歌AI中国中心的成立。现场如爆裂般的欢呼。</p><p><img src="/images/IMG_20171213_104152.jpg" alt="ee"></p><p>主会场的主题演讲之后，接下来两天的活动也算正式开始了。<br>听了一场由Pete LePage演讲的主题分享之后，就到了午餐时间。在每个活动现场的展会证上都有两天的用餐券，免费提供午餐，在会场的一楼。会场数千人从会场到就餐区，享受Google提供的西式自助餐带来的惬意。</p><p><img src="/images/IMG_20171213_113848.jpg" alt="ff"></p><p>午餐之后，距离下午的分会场活动开始还有一段时间，就在会场转了转。Google的产品展示区，你可以通过下载APP玩游戏活动糖果、通过使用Google翻译扫描明细片上地点的名称在大会现场找到当地的邮票就可以活动谷歌的抱枕、还有单人/多人的QuickDraw、根据你弹奏的曲目自动通过人工智能的方式做出一段相似的旋律、在3D空间内体验艺术的宇宙大爆炸、Tensorflow通过采集人脸数据，自动识别人脸、物联网设备的猜拳和作画等</p><p><img src="/images/IMG_20171213_122106.jpg" alt="gg"></p><p><img src="/images/IMG_20171213_122202.jpg" alt="hh"></p><p><img src="/images/IMG_20171213_122319.jpg" alt="ii"></p><p><img src="/images/IMG_20171213_122329.jpg" alt="jj"></p><p><img src="/images/IMG_20171213_122545.jpg" alt="kk"></p><p><img src="/images/IMG_20171213_122555.jpg" alt="ll"></p><p>很多很多只能在Google总部体验到的产品，都能在现场体验到。在AndroidThings展台和分会场领取一张AndroidThings的兑换券，就能去兑换一套价值不菲的AndroidThings开发套件。通过扫描证件后面的二维码反馈大会意见和建议成功就能获得Google定制的电脑包一个，不过到最后我都没有去领。</p><p><img src="/images/IMG_20171213_145635.jpg" alt="mm"></p><p>下午参加了几场分会场的活动，其中也包含了比较熟悉的演讲嘉宾Daniel Galpin、Hoi lam、Wayne Piekarski、Laurence Moroney。</p><p><img src="/images/IMG_20171213_150238.jpg" alt="nn"></p><p>本次大会还发布了Tensorflow中文网站 —— tensorflow.google.cn，并创建了Tensorflow公众号，为中国开发者提供了Tensorflow的新闻和技术资源。</p><p>After Party，晚宴时间。仿照I/O的方式，主会场变成了party场地，台下有香槟红酒、可乐雪碧、蛋糕水果自助餐，街机电竞游戏，投篮球比赛。台上乐队尽情演奏，灯光和LED显示屏伴随着音乐也嗨了起来，在音乐声中大家也慢慢的散场，每个人都提着Google提供的大礼包，结束了第一天的活动。</p><p><img src="/images/IMG_20171213_183932.jpg" alt="oo"></p><p><img src="/images/wx_camera_1513162978228.jpg" alt="pp"></p><p>14日，GDD大会的第二天，也是最后一天。今天的目标除了听大会喜欢的演讲嘉宾分享技术上新东西，复习和学习以外，还有——当然是找演讲嘉宾他们合影了。</p><p>这两天的活动，由于部分主题人数爆满，临时新增加了分会场，像人工智能、机器学习、Google Cloud等等，虽然我是主要做Android Mobile开发的，但在这次大会上我没有去听Android Oreo相关的话题，应该最多的还是AndroidThings、Tensorflow相关的。</p><p><img src="/images/wx_camera_1513215610762.jpg" alt="qq"></p><p>最后，<br>荣幸的是，我成功的和Laurence Moroney、Wayne Piekarski合影了。<br>遗憾的是，我错过了Daniel Galpin、Hoi lam、还有Ankur Kotwal的交流。</p><p><img src="/images/20171215_095625-COLLAGE.jpg" alt="rr"></p><p>Laurence Moroney说14日当天晚上要离开，准备回去过圣诞节！Merry Christmas ~</p><p>Wayne Piekarski握了一个手，问我最后一场是他的演讲，要去不去参加，我说当然。</p><p>在离开会场时Wayne还给我发androidThings的卡劵去领，我说我已经有一个了，然后挥手道别,两天的GDD活动结束了，我体会到了很多，很多收获和感想。特别是Andrew Bowers和Anna D Goldie，中文讲的真好。</p><p>正如stormzhang说的那样：如果你没去GDD，那真是一种遗憾。</p><p>GDD 明年见 ~</p><blockquote><p>以上就是个人第一次参加GDD活动的一个简单总结</p></blockquote>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;2016年，那个时候我还在上海。去年的GDD上海场我没有去参加，当时是有些遗憾；今年2017年的GDD如期而至，两天都在上海举办，而我已经不在上海，回到了成都。这时的我决定去参加，因为我是谷歌爱好者，梦寐有机会去参加一次谷歌总部的活动，既然出国不行，那在国内举办活动更近了，并且这次大会我可以和我一直只能在电视和社交软件上的关注的谷歌大佬面对面，更不容错过！&lt;/p&gt;
    
    </summary>
    
      <category term="GDD" scheme="https://shoewann0402.github.io/categories/GDD/"/>
    
    
      <category term="GDD" scheme="https://shoewann0402.github.io/tags/GDD/"/>
    
      <category term="GDD China 2017" scheme="https://shoewann0402.github.io/tags/GDD-China-2017/"/>
    
      <category term="Google Developer Days" scheme="https://shoewann0402.github.io/tags/Google-Developer-Days/"/>
    
  </entry>
  
  <entry>
    <title>介绍Android Oreo(Go版)与Android8.1的发布</title>
    <link href="https://shoewann0402.github.io/2017/12/05/Introducing-android-oreo-go-edition/"/>
    <id>https://shoewann0402.github.io/2017/12/05/Introducing-android-oreo-go-edition/</id>
    <published>2017-12-05T13:11:50.000Z</published>
    <updated>2017-12-05T13:19:35.000Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>原文来自：<span class="exturl" data-url="aHR0cHM6Ly93d3cuYmxvZy5nb29nbGUvcHJvZHVjdHMvYW5kcm9pZC9pbnRyb2R1Y2luZy1hbmRyb2lkLW9yZW8tZ28tZWRpdGlvbi8=" title="https://www.blog.google/products/android/introducing-android-oreo-go-edition/">Introducing Android Oreo (Go edition) with the release of Android 8.1<i class="fa fa-external-link"></i></span></p></blockquote><p>自Android的创建，我们的使命是将计算的力量带给每一个人。作为一个全球操作系统，Android已经发展到全球超过20亿激活设备，印度的用户人数超过了美国。</p><p>为了确保数十亿人能够访问到计算，入门级设备是功能齐全的智能手机，可以浏览网页和使用应用程序。在<span class="exturl" data-url="aHR0cHM6Ly93d3cuYmxvZy5nb29nbGUvcHJvZHVjdHMvYW5kcm9pZC8yYm4tbWlsZXN0b25lLw==" title="https://www.blog.google/products/android/2bn-milestone/">今年的Google I/O大会上<i class="fa fa-external-link"></i></span>,我们提前看了一个被我们称之为”Android Go”的项目，并让这个项目成为可能。我们激动的宣布这个软件体验——<span class="exturl" data-url="aHR0cHM6Ly93d3cuYW5kcm9pZC5jb20vdmVyc2lvbnMvb3Jlby04LTAvZ28tZWRpdGlvbg==" title="https://www.android.com/versions/oreo-8-0/go-edition">Android Oreo(Go版)<i class="fa fa-external-link"></i></span>——准备好了,将在明天作为Android 8.1发布的一个部分发布。</p><a id="more"></a><p>具有512MB到1GB内存的Android Oreo设备将随着Go的全面优化而来,这个Android Oreo(Go版)体验是由三个关键部分组成：</p><ul><li><p><strong>操作系统：</strong>对于操作系统的性能和存储提高,数据管理功能和内置安全优势。</p></li><li><p><strong>Google 应用：</strong>一组新的Google应用程序,设计更轻且与首次上网的人的独特需求相关。</p></li><li><p><strong>Google Play商店：</strong>一款调整版本的Google Play商店允许你下载任意的应用程序,但是也突出了在你设备上设计最好的应用程序。</p></li></ul><h2 id="Go-大，性能更快，更多存储，数据管理和安全性"><a href="#Go-大，性能更快，更多存储，数据管理和安全性" class="headerlink" title="Go 大，性能更快，更多存储，数据管理和安全性"></a>Go 大，性能更快，更多存储，数据管理和安全性</h2><p>我们增强了Android Oreo（Go版）在入门级设备上对于速度和可靠性，意味着在Android Oreo（Go版）的设备上运行的平均应用程序现在快了15%，这儿有很多这样各种各样的优化——它们真的加起来了。如果所有的入门级Android设备启动应用程序的速度提高15%,将节约全球累计100万小时的时间——每天！</p><p>入门级设备,一旦你考虑到操作系统的大小和预装的应用程序，它们通常有着非常小的存储空间可以使用。对于那些想要更大空间为了他们的音乐、应用程序以及照片的人来说这个就很沮丧了。因此，我们将优化Android Oreo（Go版）并增强我们预安装的Google应用程序占用至少50%的空间。最终的结果是，我们已经将入门级设备上面的可用空间增加了一倍。</p><p><img src="/images/Screen_Shot_2017-12-05_at_11.54.52_AM.width-1000.png" alt="Screen_Shot_2017-12-05_at_11.54.52_AM.width-1000.png"></p><p>设备运行了Android Oreo（Go版）也伴随了默认开启的Google的数据节省器功能的到来。比如说,在Chrome中的数据节省器每年节约了平均每个用户超过600MB的数据。你也能够通过使用我们内置的数据节省功能管理在后台使用数据的应用程序，给你更多控制你的数据是如何被使用的。</p><p>Android Oreo是Android最安全的版本,因此当你购买一款Android Oreo（Go版）的设备，你将能够获得所有相同的安全功能,并且当然所有的Android Oreo（Go版）的设备都内置了获取<span class="exturl" data-url="aHR0cHM6Ly93d3cuYW5kcm9pZC5jb20vcGxheS1wcm90ZWN0Lw==" title="https://www.android.com/play-protect/">Google Play Protect<i class="fa fa-external-link"></i></span>。Google Play Protect一直保持你的设备工作,数据和应用程序安全。它能够扫描你的应用程序安装,甚至当你是离线状态,不管你从哪儿下载了它们。</p><h2 id="Go-和-谷歌"><a href="#Go-和-谷歌" class="headerlink" title="Go 和 谷歌"></a>Go 和 谷歌</h2><p>我们将重新设计大多数我们流行的Google应用程序去解决当地的需要。预安装在Android Oreo（Go版）设备,这套通过Google优化的应用程序包括Google Go,Google Assistant Go,YouTuBe Go,Google Map Go,Gmail Go,Gboard,Google Play,Chrome和新的File Go应用程序。</p><p>我们新的和重新想象的Google应用程序，我们将关注于使它们不仅仅更小,但是也光滑快速。比如说,Google Go——一款新的应用程序去查找里想要的信息——通过提升40%优化数据,重量大小不到5MB,并且使用简单、可点击的方式就能很快速的找到流行和趋势信息。对于Android(Go版)的Google Assistant,你能够快速的发送消息、打电话、设置闹钟以及更多利用你的声音和一个单一的屏幕触碰。</p><p>我们的存储节省功能是由Google扩展操作系统之外的一个全新的文件管理应用程序——<span class="exturl" data-url="aHR0cHM6Ly93d3cuYmxvZy5nb29nbGUvdG9waWNzL25leHQtYmlsbGlvbi11c2Vycy9yZWFkeS1zZXQtZmlsZXMtZ28v" title="https://www.blog.google/topics/next-billion-users/ready-set-files-go/">File Go<i class="fa fa-external-link"></i></span>——帮助你清理空间，保持有组织。无论是来自你手机删除垃圾邮件的建议，重复的图像或者是未使用的应用程序,File Go是Android Oreo(Go版)的存储最大化功能的完美补充。</p><p><img src="/images/Blogpost_Play.width-1000.png" alt="Blogpost_Play.width-1000.png"></p><h2 id="Go-Play"><a href="#Go-Play" class="headerlink" title="Go Play"></a>Go Play</h2><p>在Google商店,你能够下载任意的应用程序,并且我们也创建了一个新的部分建议流行的应用程序，调整为入门设备上运行良好。</p><p>我们很高兴的看到我们大多数的合作伙伴使用了我们<span class="exturl" data-url="aHR0cHM6Ly9kZXZlbG9wZXIuYW5kcm9pZC5jb20vZGV2ZWxvcC9xdWFsaXR5LWd1aWRlbGluZXMvYnVpbGRpbmctZm9yLWJpbGxpb25zLmh0bWw=" title="https://developer.android.com/develop/quality-guidelines/building-for-billions.html">建了数十亿方针<i class="fa fa-external-link"></i></span>，要么优化现有的应用程序，要么去创建一个新的应用程序在入门级设备上运行良好。希望将他们的经验带给数十亿新的智能手机用户。</p><h2 id="准备-设置-Go"><a href="#准备-设置-Go" class="headerlink" title="准备.设置.Go"></a>准备.设置.Go</h2><p>在Android 8.1中推出Android Oreo(Go版)，合作伙伴将在不久就能够在全球的入门级设备上发布这个新版本，我们不能等待我们的合作伙伴的设备在未来的的几个月上架。</p><p>如果你是一个开发者，我们一起为下一个十亿人构建。</p><blockquote><p>以上是对Google官网博客文章的翻译，如果不足，欢迎指正，谢谢</p></blockquote>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;原文来自：&lt;a href=&quot;https://www.blog.google/products/android/introducing-android-oreo-go-edition/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Introducing Android Oreo (Go edition) with the release of Android 8.1&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;自Android的创建，我们的使命是将计算的力量带给每一个人。作为一个全球操作系统，Android已经发展到全球超过20亿激活设备，印度的用户人数超过了美国。&lt;/p&gt;
&lt;p&gt;为了确保数十亿人能够访问到计算，入门级设备是功能齐全的智能手机，可以浏览网页和使用应用程序。在&lt;a href=&quot;https://www.blog.google/products/android/2bn-milestone/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;今年的Google I/O大会上&lt;/a&gt;,我们提前看了一个被我们称之为”Android Go”的项目，并让这个项目成为可能。我们激动的宣布这个软件体验——&lt;a href=&quot;https://www.android.com/versions/oreo-8-0/go-edition&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Android Oreo(Go版)&lt;/a&gt;——准备好了,将在明天作为Android 8.1发布的一个部分发布。&lt;/p&gt;
    
    </summary>
    
      <category term="Android" scheme="https://shoewann0402.github.io/categories/Android/"/>
    
      <category term="Android Oreo" scheme="https://shoewann0402.github.io/categories/Android/Android-Oreo/"/>
    
    
      <category term="Android" scheme="https://shoewann0402.github.io/tags/Android/"/>
    
      <category term="Android Oreo Go" scheme="https://shoewann0402.github.io/tags/Android-Oreo-Go/"/>
    
      <category term="Android Go" scheme="https://shoewann0402.github.io/tags/Android-Go/"/>
    
  </entry>
  
  <entry>
    <title>公布架构组件1.0稳定</title>
    <link href="https://shoewann0402.github.io/2017/11/07/announcing-architecture-components-10/"/>
    <id>https://shoewann0402.github.io/2017/11/07/announcing-architecture-components-10/</id>
    <published>2017-11-07T09:09:47.000Z</published>
    <updated>2017-11-07T09:37:34.000Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>原文来自：<span class="exturl" data-url="aHR0cHM6Ly9hbmRyb2lkLWRldmVsb3BlcnMuZ29vZ2xlYmxvZy5jb20vMjAxNy8xMS9hbm5vdW5jaW5nLWFyY2hpdGVjdHVyZS1jb21wb25lbnRzLTEwLmh0bWw=" title="https://android-developers.googleblog.com/2017/11/announcing-architecture-components-10.html">Announcing Architecture Components 1.0 Stable<i class="fa fa-external-link"></i></span></p></blockquote><p>Android运行在数十亿台设备上,从高端手机到飞机座椅靠背。在这个庞大的设备范围Android操作系统积极的管理资源已取得了良好的表现，有的时候能构建出强大复杂的应用程序。</p><p>为了使它变得更加简单，我们在Google I/O大会上启动了一个预览版的架构组件，在应用程序架构上提供指导。包括了像生命周期管理和数据持久化等通用任务的库。总而言之，这些基础的组件通过较少的代码样本去写模块化应用程序使它成为可能。因此开发者们能够关注于创新而不是重新造轮子 —— 并且我们希望在未来保持在这个基础上去构建。</p><a id="more"></a><p>今天我们很高兴的宣布了<code>Room</code>和<code>Lifecycle</code><span class="exturl" data-url="aHR0cDovL2RldmVsb3Blci5hbmRyb2lkLmNvbS9hcmNo" title="http://developer.android.com/arch">架构组件<i class="fa fa-external-link"></i></span>库到了1.0稳定。这些API已经为生产应用程序和库做好了准备，是我们建议开发者寻找架构用程序架构的帮助以及本地存储(尽管这里这里是建议，但是不要求)。<code>Lifecycle</code>现在也能够和<span class="exturl" data-url="aHR0cHM6Ly9kZXZlbG9wZXIuYW5kcm9pZC5jb20vdG9waWMvbGlicmFyaWVzL3N1cHBvcnQtbGlicmFyeS9pbmRleC5odG1s" title="https://developer.android.com/topic/libraries/support-library/index.html">支持库<i class="fa fa-external-link"></i></span>集成，因此你能够使用像AppCompatActivity这样标准的类去使用它们。</p><p>尽管我们在今天声明它们稳定，公测的组件已经在应用程序中一起使用了，有数十亿次安装。顶端开发者，像Zappos,已经能花费更多的时间去感谢架构组件什么是最重要的:<br><img src="/images/zappos-logo.jpg" alt="zappos-logo.jpg"></p><p><em>在Android架构组件发布之前，我们有自己的ViewModel实现，我们使用Loaders和Dependency注入，通过更改配置去保存我们的ViewModel。我们最近切换到了Android架构组件ViewModel实现，所有的样板都消失了。我们发现我们可以花费更多的时间在设计、业务逻辑以及测试上面，在写样板和担心Android生命周期上的问题也会少一点了</em></p><p><em>我们也开始去使用LiveData将它直接勾进Android生命周期里。我们使用它去回收和展示网络数据，并且不必再去关心网络呼叫订阅管理 —— Zappos公司Android软件工程师大卫亨利</em></p><p>架构组件提供了一个示例，灵活而适用的方法让开发者们免去了一些共同问题，因此他们能够关注于构建更棒的体验，这个是依靠于应用程序架构向导的核心构建块。</p><h2 id="Lifecycle"><a href="#Lifecycle" class="headerlink" title="Lifecycle"></a>Lifecycle</h2><p>每一个android开发者必须要处理操作系统开始、停止以及销毁它们的活动。这就意味着管理组件的状态——比如观察被使用去更新UI界面——如同你移动通过生命周期一样。<span class="exturl" data-url="aHR0cHM6Ly9kZXZlbG9wZXIuYW5kcm9pZC5jb20vdG9waWMvbGlicmFyaWVzL2FyY2hpdGVjdHVyZS9saWZlY3ljbGUuaHRtbA==" title="https://developer.android.com/topic/libraries/architecture/lifecycle.html">Lifecycle<i class="fa fa-external-link"></i></span>(生命周期)能够创建<em>生命周期-感知</em>组件来管理它们自己的生命周期，减少泄漏或者崩溃的可能性。Lifecycle库是像LiveData等其它架构组件的基础</p><h2 id="LiveData"><a href="#LiveData" class="headerlink" title="LiveData"></a>LiveData</h2><p><span class="exturl" data-url="aHR0cHM6Ly9kZXZlbG9wZXIuYW5kcm9pZC5jb20vdG9waWMvbGlicmFyaWVzL2FyY2hpdGVjdHVyZS9saXZlZGF0YS5odG1s" title="https://developer.android.com/topic/libraries/architecture/livedata.html">LiveData<i class="fa fa-external-link"></i></span>(动态数据)是一个支持数据并提供更新可观察的生命周期-感知。你的UI代码订阅更改并提供LiveData一个参考到<span class="exturl" data-url="aHR0cHM6Ly9kZXZlbG9wZXIuYW5kcm9pZC5jb20vcmVmZXJlbmNlL2FuZHJvaWQvYXJjaC9saWZlY3ljbGUvTGlmZWN5Y2xlLmh0bWw=" title="https://developer.android.com/reference/android/arch/lifecycle/Lifecycle.html">Lifecycle<i class="fa fa-external-link"></i></span>。因为LiveData是生命周期-感知，当它的生命周期被开始或者被恢复，它将提供更新，但是当生命周期主被销毁，则停止提供更新。LiveData是一个简单的方式去构建被动的UI界面，更安全更高效。</p><h2 id="ViewModel"><a href="#ViewModel" class="headerlink" title="ViewModel"></a>ViewModel</h2><p><span class="exturl" data-url="aHR0cHM6Ly9kZXZlbG9wZXIuYW5kcm9pZC5jb20vdG9waWMvbGlicmFyaWVzL2FyY2hpdGVjdHVyZS92aWV3bW9kZWwuaHRtbA==" title="https://developer.android.com/topic/libraries/architecture/viewmodel.html">ViewModel<i class="fa fa-external-link"></i></span>(视图模型)像Activity和Fragment一样从生命周期的实体分离视图数据和逻辑的所有权。一个ViewModel是被保留的直到与它相关联的Acitivty和Fragment永久的被抛弃——这就意味着视图数据能够像一个Fragment由于旋转而重新被创建幸存。ViewModel不仅仅是消除生命周期共同问题，它们帮助构建更模块化方便测试。</p><h2 id="Room"><a href="#Room" class="headerlink" title="Room"></a>Room</h2><p>几乎所有的应用都需要在本地存储数据，当自从版本1开始Android绑定了SQLite和平台，直接使用它是很痛苦的。<span class="exturl" data-url="aHR0cHM6Ly9kZXZlbG9wZXIuYW5kcm9pZC5jb20vdG9waWMvbGlicmFyaWVzL2FyY2hpdGVjdHVyZS9yb29tLmh0bWw=" title="https://developer.android.com/topic/libraries/architecture/room.html">Room<i class="fa fa-external-link"></i></span>(房间)是一个简单的对象映射层，利用较少的样板提供满功率的SQLite。特性像编译时间查询验证并内置迁移，使构建一个强大的持久层更加容易。当与LiveData集成，让Room提供数据库支持、可观察的生命周期感知。Room对于管理本地存储，融合了简单、强大和稳健。我们希望你能够尝试它一下。</p><h2 id="App架构向导以及更多"><a href="#App架构向导以及更多" class="headerlink" title="App架构向导以及更多"></a>App架构向导以及更多</h2><p>最后但并不是不重要的，我们创建了一个<span class="exturl" data-url="aHR0cHM6Ly9kZXZlbG9wZXIuYW5kcm9pZC5jb20vdG9waWMvbGlicmFyaWVzL2FyY2hpdGVjdHVyZS9ndWlkZS5odG1s" title="https://developer.android.com/topic/libraries/architecture/guide.html">应用程序架构指南<i class="fa fa-external-link"></i></span> 为所有的开发者提供实用的核心原则，有关使用架构组件的具体指南，因为我们从你们那儿清楚的听到了一致的答复指南是重要的。今天我们适当的更新了<span class="exturl" data-url="aHR0cHM6Ly9kZXZlbG9wZXIuYW5kcm9pZC5jb20v" title="https://developer.android.com/">开发者文档<i class="fa fa-external-link"></i></span>去指出架构组件。我们在<span class="exturl" data-url="aHR0cDovL2RldmVsb3Blci5hbmRyb2lkLmNvbS9hcmNo" title="http://developer.android.com/arch">架构组件站点<i class="fa fa-external-link"></i></span>也有一套丰富的视频、代码实验室和示例应用程序可用，来获得更多。</p><h2 id="看这个空间"><a href="#看这个空间" class="headerlink" title="看这个空间"></a>看这个空间</h2><p>尽管第一组架构组件现在是稳定，我们知道这儿还有更多工作需要做。在过去的几个月中，我们听取了<span class="exturl" data-url="aHR0cHM6Ly9kZXZlbG9wZXIuYW5kcm9pZC5jb20vdG9waWMvbGlicmFyaWVzL2FyY2hpdGVjdHVyZS9mZWVkYmFjay5odG1s" title="https://developer.android.com/topic/libraries/architecture/feedback.html">你的反馈<i class="fa fa-external-link"></i></span>进行了提高，我们也在最近启动了一个新的架构组件,<span class="exturl" data-url="aHR0cHM6Ly9kZXZlbG9wZXIuYW5kcm9pZC5jb20vdG9waWMvbGlicmFyaWVzL2FyY2hpdGVjdHVyZS9wYWdpbmcuaHRtbA==" title="https://developer.android.com/topic/libraries/architecture/paging.html">PagedList<i class="fa fa-external-link"></i></span>，对于alpha,回应你们的反馈，用RecyclerView处理大数据集太困难了，这仅仅是开始——我们有更多基本的组件在开发，我们将在期待在接下来的几个月中宣布。</p><p>我们对架构组件的期望是让开发者在移动设备上能够专注于提供独特的全新体验。我们很荣幸我们能够最终宣布它们作为正式生产使用,我们要感谢社区，一路上给了一些很棒的反馈，我们期待这继续讨论这篇文章的评论。最后，对于那些等待这个正式启动的人来说，<span class="exturl" data-url="aHR0cDovL2RldmVsb3Blci5hbmRyb2lkLmNvbS9hcmNo" title="http://developer.android.com/arch">从今天开始<i class="fa fa-external-link"></i></span></p><blockquote><p>以上是对Anroid 官网博客文章的翻译，如果不足，欢迎指正，谢谢</p></blockquote>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;原文来自：&lt;a href=&quot;https://android-developers.googleblog.com/2017/11/announcing-architecture-components-10.html&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Announcing Architecture Components 1.0 Stable&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Android运行在数十亿台设备上,从高端手机到飞机座椅靠背。在这个庞大的设备范围Android操作系统积极的管理资源已取得了良好的表现，有的时候能构建出强大复杂的应用程序。&lt;/p&gt;
&lt;p&gt;为了使它变得更加简单，我们在Google I/O大会上启动了一个预览版的架构组件，在应用程序架构上提供指导。包括了像生命周期管理和数据持久化等通用任务的库。总而言之，这些基础的组件通过较少的代码样本去写模块化应用程序使它成为可能。因此开发者们能够关注于创新而不是重新造轮子 —— 并且我们希望在未来保持在这个基础上去构建。&lt;/p&gt;
    
    </summary>
    
      <category term="Android" scheme="https://shoewann0402.github.io/categories/Android/"/>
    
      <category term="Architecture Components" scheme="https://shoewann0402.github.io/categories/Android/Architecture-Components/"/>
    
    
      <category term="Develop" scheme="https://shoewann0402.github.io/tags/Develop/"/>
    
      <category term="Android Developer" scheme="https://shoewann0402.github.io/tags/Android-Developer/"/>
    
      <category term="Announcements" scheme="https://shoewann0402.github.io/tags/Announcements/"/>
    
      <category term="Architecture Components" scheme="https://shoewann0402.github.io/tags/Architecture-Components/"/>
    
      <category term="Best Practices" scheme="https://shoewann0402.github.io/tags/Best-Practices/"/>
    
  </entry>
  
  <entry>
    <title>介绍Android即时应用SDK 1.1</title>
    <link href="https://shoewann0402.github.io/2017/10/13/introducing-android-instant-apps-sdk-11/"/>
    <id>https://shoewann0402.github.io/2017/10/13/introducing-android-instant-apps-sdk-11/</id>
    <published>2017-10-13T02:43:19.000Z</published>
    <updated>2017-10-13T06:23:00.000Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>原文来自：<span class="exturl" data-url="aHR0cHM6Ly9hbmRyb2lkLWRldmVsb3BlcnMuZ29vZ2xlYmxvZy5jb20vMjAxNy8xMC9pbnRyb2R1Y2luZy1hbmRyb2lkLWluc3RhbnQtYXBwcy1zZGstMTEuaHRtbA==" title="https://android-developers.googleblog.com/2017/10/introducing-android-instant-apps-sdk-11.html">Introducing Android Instant Apps SDK 1.1<i class="fa fa-external-link"></i></span></p></blockquote><p>自从我们在Google I/O上面<span class="exturl" data-url="aHR0cHM6Ly9hbmRyb2lkLWRldmVsb3BlcnMuZ29vZ2xlYmxvZy5jb20vMjAxNy8wNS9hbmRyb2lkLWluc3RhbnQtYXBwcy1pcy1vcGVuLXRvLWFsbC5odG1s" title="https://android-developers.googleblog.com/2017/05/android-instant-apps-is-open-to-all.html">公开启动<i class="fa fa-external-link"></i></span>,我们已经努力工作去提升开发者构建即时应用的体验。今天我们激动的宣布Android即时应用SDK1.1可用。一些高度请求的功能，像提升NDK的支持、配置APKs以此减少二进制的大小，以及一个全新的API，当用户从一个即时应用程序过渡到已安装好应用程序，去保持用户的上下文。</p><a id="more"></a><h2 id="介绍配置APKs"><a href="#介绍配置APKs" class="headerlink" title="介绍配置APKs"></a>介绍配置APKs</h2><p>对于一个非常棒的即时应用体验，应用二进制需要精益和良好的结构。这也是为什么我们要介绍配置APKs</p><p>配置APKs允许开发者隔离设备－验证资源和依赖在APKs里面的本地库。对于一个应用使用配置APKs,Android即时应用核心将只会加载资源和本地库相关的给用户的设备，从而减少即时应用程序在设备上的总大小。</p><p>我们当前支持配置APKs的显示密度，CPU的体系结构(ABI),以及语言。这些，我们看到在已加载的二进制大小平均降低了10%。给定应用程序的实际节省依赖于资源文件数和本地库，能够被配置。</p><p>以一个示例来说，一个用户在一部LDPI屏幕密度的ARM设备上设置了中文语言，接收与设备无关的代码和资源，然后只能获取配置APKs是ARM本地库、中文语言、以及LDPI资源。它们将不能够接收到其他任意的配置APKs，比如x86的库，西班牙语言的字符串，或者HDPI的资源。</p><p>为你的应用设置配置APKs只需要简单的改变你的gradle文件的设置。跟随我们<span class="exturl" data-url="aHR0cHM6Ly9kZXZlbG9wZXIuYW5kcm9pZC5jb20vdG9waWMvaW5zdGFudC1hcHBzL2d1aWRlcy9jb25maWctc3BsaXRzLmh0bWw=" title="https://developer.android.com/topic/instant-apps/guides/config-splits.html">公开的文档<i class="fa fa-external-link"></i></span>步骤。</p><h2 id="安装之后的持久化用户上下文"><a href="#安装之后的持久化用户上下文" class="headerlink" title="安装之后的持久化用户上下文"></a>安装之后的持久化用户上下文</h2><p>在Android奥尼奥，即时版本应用的内置存储可以直接用于安装版本应用程序。这次发布的SDK,我们能够在旧版本的Android核心上启用这个功能，包括棒棒糖、棉花糖、和牛轧糖的设备。</p><p>提取即时应用程序的内置存储，安装应用程序现在能够调用<span class="exturl" data-url="aHR0cHM6Ly9kZXZlbG9wZXJzLmdvb2dsZS5jb20vYW5kcm9pZC9yZWZlcmVuY2UvY29tL2dvb2dsZS9hbmRyb2lkL2dtcy9pbnN0YW50YXBwcy9JbnN0YW50QXBwc0NsaWVudCNnZXRJbnN0YW50QXBwRGF0YSg=" title="https://developers.google.com/android/reference/com/google/android/gms/instantapps/InstantAppsClient#getInstantAppData(">InstantAppsClient.getInstantAppData()<i class="fa fa-external-link"></i></span>)使用即时应用程序Google Play服务API，以及获得一个即时应用程序内置存储的ZIP文件。</p><p>检出我们<span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL2dvb2dsZXNhbXBsZXMvYW5kcm9pZC1pbnN0YW50LWFwcHM=" title="https://github.com/googlesamples/android-instant-apps">示例代码<i class="fa fa-external-link"></i></span>和<span class="exturl" data-url="aHR0cHM6Ly9kZXZlbG9wZXJzLmdvb2dsZS5jb20vYW5kcm9pZC9yZWZlcmVuY2UvY29tL2dvb2dsZS9hbmRyb2lkL2dtcy9pbnN0YW50YXBwcy9JbnN0YW50QXBwc0NsaWVudCNnZXRJbnN0YW50QXBwRGF0YSg=" title="https://developers.google.com/android/reference/com/google/android/gms/instantapps/InstantAppsClient#getInstantAppData(">文档<i class="fa fa-external-link"></i></span>)获取如何使用这个API的更多详细。</p><h2 id="开始构建你的Android即时应用"><a href="#开始构建你的Android即时应用" class="headerlink" title="开始构建你的Android即时应用"></a>开始构建你的Android即时应用</h2><p>在最新版的SDK上构建你的即时应用程序是简单的，只需要在Android Studio里面打开SDK Manager，然后升级你的Instant App Development SDK到1.1.0。我们迫不及待的想看到你为即时应用程序构建这些新的功能特性。</p><blockquote><p>以上是对Anroid 官网博客文章的翻译，如果不足，欢迎指正，谢谢</p></blockquote>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;原文来自：&lt;a href=&quot;https://android-developers.googleblog.com/2017/10/introducing-android-instant-apps-sdk-11.html&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Introducing Android Instant Apps SDK 1.1&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;自从我们在Google I/O上面&lt;a href=&quot;https://android-developers.googleblog.com/2017/05/android-instant-apps-is-open-to-all.html&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;公开启动&lt;/a&gt;,我们已经努力工作去提升开发者构建即时应用的体验。今天我们激动的宣布Android即时应用SDK1.1可用。一些高度请求的功能，像提升NDK的支持、配置APKs以此减少二进制的大小，以及一个全新的API，当用户从一个即时应用程序过渡到已安装好应用程序，去保持用户的上下文。&lt;/p&gt;
    
    </summary>
    
      <category term="Android" scheme="https://shoewann0402.github.io/categories/Android/"/>
    
    
      <category term="Android Studio" scheme="https://shoewann0402.github.io/tags/Android-Studio/"/>
    
      <category term="Android" scheme="https://shoewann0402.github.io/tags/Android/"/>
    
      <category term="Develop" scheme="https://shoewann0402.github.io/tags/Develop/"/>
    
      <category term="Android Instant Apps" scheme="https://shoewann0402.github.io/tags/Android-Instant-Apps/"/>
    
      <category term="Play Console" scheme="https://shoewann0402.github.io/tags/Play-Console/"/>
    
      <category term="Studio" scheme="https://shoewann0402.github.io/tags/Studio/"/>
    
  </entry>
  
  <entry>
    <title>谷歌助理能够帮助您控制Android媒体应用程序</title>
    <link href="https://shoewann0402.github.io/2017/10/12/the-google-assistant-can-help-control/"/>
    <id>https://shoewann0402.github.io/2017/10/12/the-google-assistant-can-help-control/</id>
    <published>2017-10-11T17:43:41.000Z</published>
    <updated>2019-02-17T02:29:02.335Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>原文来自：<span class="exturl" data-url="aHR0cHM6Ly9hbmRyb2lkLWRldmVsb3BlcnMuZ29vZ2xlYmxvZy5jb20vMjAxNy8xMC90aGUtZ29vZ2xlLWFzc2lzdGFudC1jYW4taGVscC1jb250cm9sLmh0bWw=" title="https://android-developers.googleblog.com/2017/10/the-google-assistant-can-help-control.html">The Google Assistant can help control your Android media apps<i class="fa fa-external-link"></i></span></p></blockquote><p>谷歌助理可用贯穿通了手机，音响，安卓电视以及更多。它能够帮助用户在一天中完成更多的工作 —— 这儿它们需要添加一些事情到去完成的列表，打开电灯，或者播放一首歌曲。</p><p>音乐是特别的,助理有大量的提供。它能够通过设备(“播放摇滚乐”)理解媒体命令，并支持媒体控制(像暂停、跳过、快进、赞成)，用户也能通过谷歌助理控制安卓媒体播放。例如，您告诉谷歌助理”暂停回放”，无需抬起手指就能暂停回放。或者说”在Universal音乐播放器上播放摇滚乐”来播放音乐</p><a id="more"></a><p>为了让用户在使用您的媒体应用中的谷歌助理时能够控制回放，您可以使用<span class="exturl" data-url="aHR0cHM6Ly9tZWRpdW0uY29tL2dvb2dsZS1kZXZlbG9wZXJzL3VuZGVyc3RhbmRpbmctbWVkaWFzZXNzaW9uLXBhcnQtMS0zLWU0ZDI3MjVmMThlNA==" title="https://medium.com/google-developers/understanding-mediasession-part-1-3-e4d2725f18e4">MediaSession<i class="fa fa-external-link"></i></span>API去让这件事发生。我们建议您在制作应用程序与Google Assistant的集成时，使用MediaSession。</p><h2 id="在您的应用程序中如何使用MediaSession-？"><a href="#在您的应用程序中如何使用MediaSession-？" class="headerlink" title="在您的应用程序中如何使用MediaSession ？"></a>在您的应用程序中如何使用MediaSession ？</h2><p>您必须实现一个MediaSession,在<span class="exturl" data-url="aHR0cHM6Ly9kZXZlbG9wZXIuYW5kcm9pZC5jb20vZ3VpZGUvdG9waWNzL21lZGlhLWFwcHMvaW50ZXJhY3Rpbmctd2l0aC1hc3Npc3RhbnQuaHRtbCN1c2VfYV9tZWRpYV9zZXNzaW9u" title="https://developer.android.com/guide/topics/media-apps/interacting-with-assistant.html#use_a_media_session">与谷歌助理进行交互时<i class="fa fa-external-link"></i></span>处理所描述的一组规定的动作。</p><p>这里是一些示例项目，能够帮您开始在您的媒体应用程序里面使用MediaSession</p><blockquote><ul><li><span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL2dvb2dsZXNhbXBsZXMvYW5kcm9pZC1NZWRpYUJyb3dzZXJTZXJ2aWNlLw==" title="https://github.com/googlesamples/android-MediaBrowserService/">媒体浏览器服务示例<i class="fa fa-external-link"></i></span></li><li><span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL2dvb2dsZXNhbXBsZXMvYW5kcm9pZC1Vbml2ZXJzYWxNdXNpY1BsYXllcg==" title="https://github.com/googlesamples/android-UniversalMusicPlayer">Universal 音乐播放器示例<i class="fa fa-external-link"></i></span></li><li><span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL2dvb2dsZXNhbXBsZXMvbGVhbmJhY2stYXNzaXN0YW50" title="https://github.com/googlesamples/leanback-assistant">助理与Leanback样本集成示例<i class="fa fa-external-link"></i></span></li></ul></blockquote><p>对于想了解学习更多关于MediaSession，这里有一些好的资源：</p><blockquote><ul><li><span class="exturl" data-url="aHR0cHM6Ly9tZWRpdW0uY29tL2dvb2dsZS1kZXZlbG9wZXJzL3VuZGVyc3RhbmRpbmctbWVkaWFzZXNzaW9uLXBhcnQtMS0zLWU0ZDI3MjVmMThlNA==" title="https://medium.com/google-developers/understanding-mediasession-part-1-3-e4d2725f18e4">理解MediaSession<i class="fa fa-external-link"></i></span></li><li><span class="exturl" data-url="aHR0cHM6Ly9kZXZlbG9wZXIuYW5kcm9pZC5jb20vZ3VpZGUvdG9waWNzL21lZGlhLWFwcHMvd29ya2luZy13aXRoLWEtbWVkaWEtc2Vzc2lvbi5odG1s" title="https://developer.android.com/guide/topics/media-apps/working-with-a-media-session.html">使用MediaSession<i class="fa fa-external-link"></i></span></li><li><span class="exturl" data-url="aHR0cHM6Ly9hbmRyb2lkLWRldmVsb3BlcnMuZ29vZ2xlYmxvZy5jb20vMjAxNy8xMC92aWRlby1wbGF5YmFjay13aXRoLWdvb2dsZS1hc3Npc3RhbnQtb24uaHRtbA==" title="https://android-developers.googleblog.com/2017/10/video-playback-with-google-assistant-on.html">使用谷歌助理在安卓电视上进行视频回放<i class="fa fa-external-link"></i></span></li></ul></blockquote><h2 id="谷歌助理如何使用MediaSession？"><a href="#谷歌助理如何使用MediaSession？" class="headerlink" title="谷歌助理如何使用MediaSession？"></a>谷歌助理如何使用MediaSession？</h2><p>谷歌助理使用MediaSession时和其他外部控制器(比如安卓可穿戴设备)相同的方式使用MediaSession。每一个控制器都会导致您的应用程序状态变化。<br>并且这儿需要有一个方式去响应这些变化。这就是MediaSession的发挥作用的地方。</p><p>通过使用MediaSession,谷歌助理能够控制您的应用程序的媒体播放，以及保持同步其当前状态</p><h2 id="如何使用MediaSession测试我的应用程序？"><a href="#如何使用MediaSession测试我的应用程序？" class="headerlink" title="如何使用MediaSession测试我的应用程序？"></a>如何使用MediaSession测试我的应用程序？</h2><p>一旦您实现了MediaSession您将可能想去测试，如何在您的应用程序以外去控制媒体播放，<span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL2dvb2dsZXNhbXBsZXMvYW5kcm9pZC1tZWRpYS1jb250cm9sbGVy" title="https://github.com/googlesamples/android-media-controller">媒体控制器测试<i class="fa fa-external-link"></i></span>工具被创建去模拟外部控制您的媒体播放，您可以验证当其他应用程序(比如谷歌助理)与您的应用程序就行互动时，它将可以按预期方式工作。</p><blockquote><p>以上是对Anroid 官网博客文章的翻译，如果不足，欢迎指正，谢谢</p></blockquote>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;原文来自：&lt;a href=&quot;https://android-developers.googleblog.com/2017/10/the-google-assistant-can-help-control.html&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;The Google Assistant can help control your Android media apps&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;谷歌助理可用贯穿通了手机，音响，安卓电视以及更多。它能够帮助用户在一天中完成更多的工作 —— 这儿它们需要添加一些事情到去完成的列表，打开电灯，或者播放一首歌曲。&lt;/p&gt;
&lt;p&gt;音乐是特别的,助理有大量的提供。它能够通过设备(“播放摇滚乐”)理解媒体命令，并支持媒体控制(像暂停、跳过、快进、赞成)，用户也能通过谷歌助理控制安卓媒体播放。例如，您告诉谷歌助理”暂停回放”，无需抬起手指就能暂停回放。或者说”在Universal音乐播放器上播放摇滚乐”来播放音乐&lt;/p&gt;
    
    </summary>
    
      <category term="Android" scheme="https://shoewann0402.github.io/categories/Android/"/>
    
    
      <category term="Android" scheme="https://shoewann0402.github.io/tags/Android/"/>
    
      <category term="Android Assistant" scheme="https://shoewann0402.github.io/tags/Android-Assistant/"/>
    
      <category term="MediaSession" scheme="https://shoewann0402.github.io/tags/MediaSession/"/>
    
  </entry>
  
  <entry>
    <title>Google发布Google I/O 2017 安卓源代码</title>
    <link href="https://shoewann0402.github.io/2017/08/19/google-releases-source-for-google-io-md/"/>
    <id>https://shoewann0402.github.io/2017/08/19/google-releases-source-for-google-io-md/</id>
    <published>2017-08-19T05:45:31.000Z</published>
    <updated>2017-08-19T06:00:53.000Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>原文来自：<span class="exturl" data-url="aHR0cHM6Ly9hbmRyb2lkLWRldmVsb3BlcnMuZ29vZ2xlYmxvZy5jb20vMjAxNy8wOC9nb29nbGUtcmVsZWFzZXMtc291cmNlLWZvci1nb29nbGUtaW8uaHRtbA==" title="https://android-developers.googleblog.com/2017/08/google-releases-source-for-google-io.html">Google releases source for Google I/O 2017 for Android<i class="fa fa-external-link"></i></span></p></blockquote><p>今天我们发布官方<span class="exturl" data-url="aHR0cHM6Ly9wbGF5Lmdvb2dsZS5jb20vc3RvcmUvYXBwcy9kZXRhaWxzP2lkPWNvbS5nb29nbGUuc2FtcGxlcy5hcHBzLmlvc2NoZWQmYW1wO2hsPWVu" title="https://play.google.com/store/apps/details?id=com.google.samples.apps.iosched&amp;hl=en">Google I/O 2017<i class="fa fa-external-link"></i></span> Android应用程序<span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL2dvb2dsZS9pb3NjaGVk" title="https://github.com/google/iosched">源代码<i class="fa fa-external-link"></i></span></p><p>今年这个应用基本上修改了现有的功能，并且添加了一些新的功能。它也利用了<span class="exturl" data-url="aHR0cHM6Ly9maXJlYmFzZS5nb29nbGUuY29tLw==" title="https://firebase.google.com/">Firebase<i class="fa fa-external-link"></i></span>去拓展技术堆栈。在这篇文章中，我们将高亮在这个应用程序的几个显著变化，以及它们设计的注意实事项。</p><a id="more"></a><p>对于2017版本最多突出的新功能是事件<strong>约束</strong>系统，这样被设计有助于节省参会者的时间，并提供精简的会议体验。注册参会能够在之前预约会话并添加到等待列表中。在会议期间，一个预约提供了加快进入会议，而不用长时间去等待。预约的数据将会和参会者会议徽章同步，允许事件工作人员使用NFC手机验证预约，不仅仅是预约功能非常受欢迎，但是预约数据帮助了事件工作人员在I/O大会之前和之间改变会话室的大小，以次来适应实际的座位需求。</p><p>预约的功能是使用<span class="exturl" data-url="aHR0cHM6Ly9maXJlYmFzZS5nb29nbGUuY29tL3Byb2R1Y3RzL2RhdGFiYXNlLw==" title="https://firebase.google.com/products/database/">Firebase实时数据库<i class="fa fa-external-link"></i></span>(RTDB)和<span class="exturl" data-url="aHR0cHM6Ly9maXJlYmFzZS5nb29nbGUuY29tL3Byb2R1Y3RzL2Z1bmN0aW9ucy8=" title="https://firebase.google.com/products/functions/">Firebase云功能<i class="fa fa-external-link"></i></span>实现的。RTDB提供了通过用户的设备简单的同步——我们仅仅是在我们的代码中实现了一个监听来接收更新数据库。RTDB也提供了开箱即用离线支持，允许会议数据当在旅行是面对间歇性网络连接也可以使用。云端功能在后台处理用户预约的请求过程，使用交易去确保状态的正确性(防止恶作剧用户抓住太多的座位！)并和事件系统徽章通信。</p><p>对去年而言，我们使用了内容提供者(ContentProvider)作为一个抽象层覆盖所有应用数据，也就意味着我们必须指出如何使用内容提供者去整合RTDB数据。我们需要在有两个本地缓存数据之间进行协商：1）来源于内容提供者访问现存本地SQLite数据库，2）通过RTDB被创建的本地缓存去促进离线访问。我们决定在内容提供者之下整合所有的应用数据：无论何时在RTDB里用户预约的数据改变，我们将更新内容提供者，使它成为在任何时间应用程序数据的唯一真实来源。这就意味着我们需要去在一个唯一的屏幕对RTDB保持打开连接，会话详细信息界面，用户可能正在积极地管理他们的预约。预约数据通过内容提供着支持显示在应用程序的其他部分。在离线模式下，或者是在与RTDB的片断或延迟连接的情况下，我们能够从内容提供着获取用户的最后一个预约的已知状态。</p><p>我们还必须指出将RTDB整合到整个IOSched同步逻辑中的良好模式，尤其是自从RTDB伴随着非常不同的同步模式，而不是我们在应用程序中使用的ping-fetch方法。我们决定去继续使用<span class="exturl" data-url="aHR0cHM6Ly9jbG91ZC5nb29nbGUuY29tL2VuZHBvaW50cy8=" title="https://cloud.google.com/endpoints/">云端点<i class="fa fa-external-link"></i></span>通过设备去同步用户的数据，网络和iOS客户端（数据本身存储在<span class="exturl" data-url="aHR0cHM6Ly9jbG91ZC5nb29nbGUuY29tL2FwcGVuZ2luZS9kb2NzL3N0YW5kYXJkL2phdmEvZGF0YXN0b3JlLw==" title="https://cloud.google.com/appengine/docs/standard/java/datastore/">数据存储区<i class="fa fa-external-link"></i></span>中)。当RTDB提供了开箱即用数据同步，我们想确保所有设备上的用户预约数据都是最新的，<em>甚至当应用程序不是在前台时</em>，我们利用云功能去整合RTDB预约数据到同步流：一旦用户改变了在RTDB中预约数据，该功能更新了端点，触发了<span class="exturl" data-url="aHR0cHM6Ly9maXJlYmFzZS5nb29nbGUuY29tL3Byb2R1Y3RzL2Nsb3VkLW1lc3NhZ2luZy8=" title="https://firebase.google.com/products/cloud-messaging/">Firebase云消息<i class="fa fa-external-link"></i></span>下游消息到所有用户的设备上，然后调度数据同步。</p><p>今年的应用程序还推出了一个<strong>Feed</strong>功能去通知用户关于I/O的逐个小时的发展(大多数应用的用户是远程的，Feed只是他们进入会议的一个窗口)，Feed也是通过RTDB提供动力，数据使用了一个简单的CMS推送到服务器。我们使用了一个云功能去监控RTDB feed数据;当feed数据在服务器被更新，云功能就会发送一条云消息下游消息到客户端，视觉上为用户呈现新的Feed项。</p><p>在2015和2016年里，我们为IOSched已经通过了一个MVP架构，我们在今年继续使用。这个架构提供我们很好的分离关注，方便测试，并且大致来说使我们的代码更清洁和更容易去维护。对于Feed功能，我们决定利用一个更轻量级的MVP去实验实现，灵感来源于<span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL2dvb2dsZXNhbXBsZXMvYW5kcm9pZC1hcmNoaXRlY3R1cmU=" title="https://github.com/googlesamples/android-architecture">Android Architecture Blueprints<i class="fa fa-external-link"></i></span>,它提供了必要的模块化，同时非常容易概念化。这里的目标是教学和实践:我们想为开发者展示替代MVP模式，我们也想去展示一个适合我们对此功能的需求的架构。</p><p>首次，IOSched大量使用了<span class="exturl" data-url="aHR0cHM6Ly9maXJlYmFzZS5nb29nbGUuY29tL2RvY3MvcmVtb3RlLWNvbmZpZy8=" title="https://firebase.google.com/docs/remote-config/">Firebase远程配置<i class="fa fa-external-link"></i></span>。以往，我们发现了自己当非会话数据——无线信息不能够去通知用户，穿梭时间表，折扣代码等等。- 在会议之前或会议期间改变。强制一个应用升级更新是不可行的，我们只想让应用内默认值可以更新。使用远程配置很容易的就为我们解决了这个问题。</p><p>在最后，我们最终得到一个三层系统，通知用户有关变更:</p><blockquote><ul><li>会议数据和用户数据的改变是来源于云消息和数据同步(ping和fetch模型)去进行通信。</li></ul></blockquote><blockquote><ul><li>Feed数据的变化是来源于RTDB的控制</li></ul></blockquote><blockquote><ul><li>更改应用内的产量来源于远程配置的控制</li></ul></blockquote><h2 id="未来计划"><a href="#未来计划" class="headerlink" title="未来计划"></a>未来计划</h2><p>即使我们正在发布2017的代码，我们在未来几个月仍然有工作领先于我们，我们将在后台进程(并使我们的应用程序“O”符合)中去更新代码去遵循现代模式。并且在未来，我们将采用Android的<span class="exturl" data-url="aHR0cHM6Ly9kZXZlbG9wZXIuYW5kcm9pZC5jb20vdG9waWMvbGlicmFyaWVzL2FyY2hpdGVjdHVyZS9pbmRleC5odG1s" title="https://developer.android.com/topic/libraries/architecture/index.html">架构组件<i class="fa fa-external-link"></i></span>去简化应用程序的整体设计，开发者可以按照<span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL2dvb2dsZS9pb3NjaGVk" title="https://github.com/google/iosched">GitHub<i class="fa fa-external-link"></i></span>上的代码进行更改。</p><blockquote><p>以上是对Anroid 官网博客文章的翻译，如果不足，欢迎指正，谢谢</p></blockquote>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;原文来自：&lt;a href=&quot;https://android-developers.googleblog.com/2017/08/google-releases-source-for-google-io.html&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Google releases source for Google I/O 2017 for Android&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;今天我们发布官方&lt;a href=&quot;https://play.google.com/store/apps/details?id=com.google.samples.apps.iosched&amp;amp;hl=en&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Google I/O 2017&lt;/a&gt; Android应用程序&lt;a href=&quot;https://github.com/google/iosched&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;源代码&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;今年这个应用基本上修改了现有的功能，并且添加了一些新的功能。它也利用了&lt;a href=&quot;https://firebase.google.com/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Firebase&lt;/a&gt;去拓展技术堆栈。在这篇文章中，我们将高亮在这个应用程序的几个显著变化，以及它们设计的注意实事项。&lt;/p&gt;
    
    </summary>
    
      <category term="Android" scheme="https://shoewann0402.github.io/categories/Android/"/>
    
      <category term="Google I/O" scheme="https://shoewann0402.github.io/categories/Android/Google-I-O/"/>
    
    
      <category term="Android" scheme="https://shoewann0402.github.io/tags/Android/"/>
    
      <category term="Google I/O" scheme="https://shoewann0402.github.io/tags/Google-I-O/"/>
    
      <category term="source code" scheme="https://shoewann0402.github.io/tags/source-code/"/>
    
  </entry>
  
  <entry>
    <title>Android O开发者预览版4可用,官方Android O即将到来！</title>
    <link href="https://shoewann0402.github.io/2017/07/25/developer-preview-4-now-available/"/>
    <id>https://shoewann0402.github.io/2017/07/25/developer-preview-4-now-available/</id>
    <published>2017-07-25T06:00:03.000Z</published>
    <updated>2017-07-25T13:27:28.000Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>原文来自：<span class="exturl" data-url="aHR0cHM6Ly9hbmRyb2lkLWRldmVsb3BlcnMuZ29vZ2xlYmxvZy5jb20vMjAxNy8wNy9kZXZlbG9wZXItcHJldmlldy00LW5vdy1hdmFpbGFibGUuaHRtbA==" title="https://android-developers.googleblog.com/2017/07/developer-preview-4-now-available.html">Developer Preview 4 now available, official Android O coming soon!<i class="fa fa-external-link"></i></span></p></blockquote><p>当我们在Android O平台上完成最后的首尾工作时，我们在今天推出了开发者预览版4去帮助您确保您的应用程序已经准备好了。</p><p>这个版本是我们<span class="exturl" data-url="aHR0cHM6Ly9kZXZlbG9wZXIuYW5kcm9pZC5jb20vcHJldmlldy9taWdyYXRpb24uaHRtbA==" title="https://developer.android.com/preview/migration.html">在今年夏天晚些时候<i class="fa fa-external-link"></i></span>为消费者启动官方Android O平台之前的最后一个预览版本，借此机会去尽快结束您的测试并发布您的更新，给用户一个平稳过渡到Android O</p><a id="more"></a><p>如果您有一个设备已经在<span class="exturl" data-url="aHR0cDovL3d3dy5hbmRyb2lkLmNvbS9iZXRh" title="http://www.android.com/beta">Android Beta Program<i class="fa fa-external-link"></i></span>上面注册了，您将会在接下来的几天收到一个到开发者预览版4的更新升级。如果您还没有注册您的设备，仅仅访问<span class="exturl" data-url="aHR0cDovL3d3dy5hbmRyb2lkLmNvbS9iZXRh" title="http://www.android.com/beta">Android Beta 站点<i class="fa fa-external-link"></i></span>去注册并获取更新升级。</p><p>在即将到来的Android O 正式发布版本上查看更多信息！！！</p><h1 id="这次升级了什么？"><a href="#这次升级了什么？" class="headerlink" title="这次升级了什么？"></a>这次升级了什么？</h1><p>开发者预览版4是Android O的发布候选版本，您能够使用它及时为即将发布的官方版本发布完成您的开发和测试。它包括了最终版本的系统行为、bug修复和优化，最终版的APIs(Api Level 26)已经在<span class="exturl" data-url="aHR0cHM6Ly9hbmRyb2lkLWRldmVsb3BlcnMuZ29vZ2xlYmxvZy5jb20vMjAxNy8wNi9hbmRyb2lkLW8tYXBpcy1hcmUtZmluYWwtZ2V0LXlvdXItYXBwcy5odG1s" title="https://android-developers.googleblog.com/2017/06/android-o-apis-are-final-get-your-apps.html">开发者预览版3<i class="fa fa-external-link"></i></span>上面可以使用了。</p><p>今天我们发布了开发者预览版4设备系统镜像，并和正式版的Android 26.0.0支持库。在接下来的几天的路上增加了SDK的更新升级、tools和Android模拟器系统进行。</p><p>我们也介绍了一个新版本的<span class="exturl" data-url="aHR0cDovL2RldmVsb3BlcnMuYW5kcm9pZC5jb20vdGVzdGluZw==" title="http://developers.android.com/testing">Android测试支持库<i class="fa fa-external-link"></i></span>，包括了像Android Test Orchestrator,多进程 Espresso以及更多的新特性。查看详细即将到来。</p><h1 id="在Android-O上测试您的应用"><a href="#在Android-O上测试您的应用" class="headerlink" title="在Android O上测试您的应用"></a>在Android O上测试您的应用</h1><p>今天开发者预览版4系统镜像给您了一个优秀的方式在接近于最终版本的Android O上面去测试您当前的应用。通过现在的测试，您能够确保您的应用提供您想作为一个用户开始去升级到官方Android O平台的体验。</p><p>在<span class="exturl" data-url="aHR0cDovL2FuZHJvaWQuY29tL2JldGE=" title="http://android.com/beta">Android Beta Program<i class="fa fa-external-link"></i></span>上面去注册一个以支持的设备，并在今天通过OTA云端升级的方式获取更新，从Google play安装您当前的应用程序，并测试用户流。应用程序应该能够运行并且看起来很棒，您应该处理Android O的<span class="exturl" data-url="aHR0cHM6Ly9kZXZlbG9wZXIuYW5kcm9pZC5jb20vcHJldmlldy9iZWhhdmlvci1jaGFuZ2VzLmh0bWw=" title="https://developer.android.com/preview/behavior-changes.html">行为变化<i class="fa fa-external-link"></i></span>配置——在特定，特别要注意<span class="exturl" data-url="aHR0cHM6Ly9kZXZlbG9wZXIuYW5kcm9pZC5jb20vcHJldmlldy9iZWhhdmlvci1jaGFuZ2VzLmh0bWwjYWJsbA==" title="https://developer.android.com/preview/behavior-changes.html#abll">后台位置限制<i class="fa fa-external-link"></i></span>、<span class="exturl" data-url="aHR0cHM6Ly9kZXZlbG9wZXIuYW5kcm9pZC5jb20vcHJldmlldy9mZWF0dXJlcy9ub3RpZmljYXRpb24tY2hhbm5lbHMuaHRtbA==" title="https://developer.android.com/preview/features/notification-channels.html">通知渠道<i class="fa fa-external-link"></i></span>和<span class="exturl" data-url="aHR0cHM6Ly9kZXZlbG9wZXIuYW5kcm9pZC5jb20vcHJldmlldy9iZWhhdmlvci1jaGFuZ2VzLmh0bWwjbmV0d29ya2luZy1hbGw=" title="https://developer.android.com/preview/behavior-changes.html#networking-all">网络<i class="fa fa-external-link"></i></span>的改变、<span class="exturl" data-url="aHR0cHM6Ly9kZXZlbG9wZXIuYW5kcm9pZC5jb20vcHJldmlldy9iZWhhdmlvci1jaGFuZ2VzLmh0bWwjc2VjdXJpdHktYWxs" title="https://developer.android.com/preview/behavior-changes.html#security-all">安全<i class="fa fa-external-link"></i></span>以及<span class="exturl" data-url="aHR0cHM6Ly9kZXZlbG9wZXIuYW5kcm9pZC5jb20vcHJldmlldy9iZWhhdmlvci1jaGFuZ2VzLmh0bWwjcHJpdmFjeS1hbGw=" title="https://developer.android.com/preview/behavior-changes.html#privacy-all">标示符<i class="fa fa-external-link"></i></span>。</p><p>一旦您解决了任意问题，利用当前目标等级发布您的应用更新，以便用户他们在接收到Android O的时候可以使用。</p><h1 id="利用Android-O特性和APIs提高您的应用"><a href="#利用Android-O特性和APIs提高您的应用" class="headerlink" title="利用Android O特性和APIs提高您的应用"></a>利用Android O特性和APIs提高您的应用</h1><p>用户在运行最新版本的Android,在下载应用程序、消费内容，并进行购买方面通常是最活跃的。他们也是对于在他们喜欢的应用关于支持最新版本Android特性发声最多的。利用Android O,用户期待着像<span class="exturl" data-url="aHR0cHM6Ly9kZXZlbG9wZXIuYW5kcm9pZC5jb20vcHJldmlldy9mZWF0dXJlcy9ub3RpZmljYXRpb24tY2hhbm5lbHMuaHRtbA==" title="https://developer.android.com/preview/features/notification-channels.html">通知渠道<i class="fa fa-external-link"></i></span>、<span class="exturl" data-url="aHR0cHM6Ly9kZXZlbG9wZXIuYW5kcm9pZC5jb20vcHJldmlldy9mZWF0dXJlcy9ub3RpZmljYXRpb24tYmFkZ2VzLmh0bWw=" title="https://developer.android.com/preview/features/notification-badges.html">点<i class="fa fa-external-link"></i></span>、<span class="exturl" data-url="aHR0cHM6Ly9kZXZlbG9wZXIuYW5kcm9pZC5jb20vcHJldmlldy9mZWF0dXJlcy9waW5uaW5nLXNob3J0Y3V0cy13aWRnZXRzLmh0bWw=" title="https://developer.android.com/preview/features/pinning-shortcuts-widgets.html">快捷方式固定<i class="fa fa-external-link"></i></span>、<span class="exturl" data-url="aHR0cHM6Ly9kZXZlbG9wZXIuYW5kcm9pZC5jb20vcHJldmlldy9hcGktb3ZlcnZpZXcuaHRtbCNvcGlw" title="https://developer.android.com/preview/api-overview.html#opip">画中画<i class="fa fa-external-link"></i></span>和<span class="exturl" data-url="aHR0cHM6Ly9kZXZlbG9wZXIuYW5kcm9pZC5jb20vcHJldmlldy9mZWF0dXJlcy9hdXRvZmlsbC5odG1sI29wdGltaXppbmdfeW91cl9hcHBfZm9yX2F1dG9maWxs" title="https://developer.android.com/preview/features/autofill.html#optimizing_your_app_for_autofill">自动填充<i class="fa fa-external-link"></i></span>以及其他。这些特性也能随着时间的推移，更多用户升级到Android O，有助于增加与应用的互动。</p><p><img src="/images/android-o-dp-4-2.gif" alt="android-o-dp-4-2"></p><p><img src="/images/android-o-dp-4-3.gif" alt="android-o-dp-4-3"></p><p>利用Android的特性提高您的应用程序能够帮助您推动和用户的互动，提供新的互动，给他们更多的控制和安全，并提高性能，功能特性像<span class="exturl" data-url="aHR0cHM6Ly9kZXZlbG9wZXIuYW5kcm9pZC5jb20vcHJldmlldy9mZWF0dXJlcy9hZGFwdGl2ZS1pY29ucy5odG1s" title="https://developer.android.com/preview/features/adaptive-icons.html">图标适配<i class="fa fa-external-link"></i></span>、<span class="exturl" data-url="aHR0cHM6Ly9kZXZlbG9wZXIuYW5kcm9pZC5jb20vcHJldmlldy9mZWF0dXJlcy9kb3dubG9hZGFibGUtZm9udHMuaHRtbA==" title="https://developer.android.com/preview/features/downloadable-fonts.html">可下载字体<i class="fa fa-external-link"></i></span>和<span class="exturl" data-url="aHR0cHM6Ly9kZXZlbG9wZXIuYW5kcm9pZC5jb20vcHJldmlldy9mZWF0dXJlcy9hdXRvc2l6aW5nLXRleHR2aWV3Lmh0bWw=" title="https://developer.android.com/preview/features/autosizing-textview.html">自动大小的文本控件<i class="fa fa-external-link"></i></span>能够简化您的开发和最小化您的APK大小。电池对于用户也是一个最关心的，因此他们将欣赏您的应用程序已经对于<span class="exturl" data-url="aHR0cHM6Ly9kZXZlbG9wZXIuYW5kcm9pZC5jb20vcHJldmlldy9mZWF0dXJlcy9iYWNrZ3JvdW5kLmh0bWw=" title="https://developer.android.com/preview/features/background.html">后台执行限制<i class="fa fa-external-link"></i></span>进行了优化，和其他<span class="exturl" data-url="aHR0cHM6Ly9kZXZlbG9wZXIuYW5kcm9pZC5jb20vcHJldmlldy9iZWhhdmlvci1jaGFuZ2VzLmh0bWwjby1hcHBz" title="https://developer.android.com/preview/behavior-changes.html#o-apps">O应用程序的重要系统行为的变化<i class="fa fa-external-link"></i></span>。</p><p>访问<span class="exturl" data-url="aHR0cHM6Ly9kZXZlbG9wZXIuYW5kcm9pZC5jb20vcHJldmlldy9pbmRleC5odG1s" title="https://developer.android.com/preview/index.html">O开发者预览站点<i class="fa fa-external-link"></i></span>去学习关于所有的新特性以及API，并如何编译它们到您的应用程序中。</p><h1 id="利用Android-Studio-加速您的开发"><a href="#利用Android-Studio-加速您的开发" class="headerlink" title="利用Android Studio 加速您的开发"></a>利用Android Studio 加速您的开发</h1><p>当您已经准备去构建Android O了，我们建议您升级到最新版的<span class="exturl" data-url="aHR0cHM6Ly9hbmRyb2lkLWRldmVsb3BlcnMuZ29vZ2xlYmxvZy5jb20vMjAxNy8wNS9hbmRyb2lkLXN0dWRpby0zLTAtY2FuYXJ5MS5odG1s" title="https://android-developers.googleblog.com/2017/05/android-studio-3-0-canary1.html">Android Studio 3.0<i class="fa fa-external-link"></i></span>,从<span class="exturl" data-url="aHR0cHM6Ly9kZXZlbG9wZXIuYW5kcm9pZC5jb20vc3R1ZGlvL3ByZXZpZXcvaW5kZXguaHRtbA==" title="https://developer.android.com/studio/preview/index.html">canary 通道<i class="fa fa-external-link"></i></span>下载可用。除了从<span class="exturl" data-url="aHR0cHM6Ly9kZXZlbG9wZXIuYW5kcm9pZC5jb20vc3R1ZGlvL3ByZXZpZXcvZmVhdHVyZXMvYW5kcm9pZC1wcm9maWxlci5odG1s" title="https://developer.android.com/studio/preview/features/android-profiler.html">性能分析工具<i class="fa fa-external-link"></i></span>去提高应用程序，支持<span class="exturl" data-url="aHR0cDovL2FuZHJvaWQtZGV2ZWxvcGVycy5nb29nbGVibG9nLmNvbS8yMDE3LzA1L2FuZHJvaWQtYW5ub3VuY2VzLXN1cHBvcnQtZm9yLWtvdGxpbi5odG1s" title="http://android-developers.googleblog.com/2017/05/android-announces-support-for-kotlin.html">Kotlin程序语言<i class="fa fa-external-link"></i></span>,并且Gradle构建优化，Android Studio3.0利用<span class="exturl" data-url="aHR0cHM6Ly9hbmRyb2lkLWRldmVsb3BlcnMuZ29vZ2xlYmxvZy5jb20vMjAxNy8wNS9hbmRyb2lkLWluc3RhbnQtYXBwcy1pcy1vcGVuLXRvLWFsbC5odG1s" title="https://android-developers.googleblog.com/2017/05/android-instant-apps-is-open-to-all.html">即时应用<i class="fa fa-external-link"></i></span>、<span class="exturl" data-url="aHR0cHM6Ly9kZXZlbG9wZXIuYW5kcm9pZC5jb20vcHJldmlldy9mZWF0dXJlcy93b3JraW5nLXdpdGgtZm9udHMuaHRtbA==" title="https://developer.android.com/preview/features/working-with-fonts.html">XML字体<i class="fa fa-external-link"></i></span>、<span class="exturl" data-url="aHR0cHM6Ly9kZXZlbG9wZXIuYW5kcm9pZC5jb20vcHJldmlldy9mZWF0dXJlcy9kb3dubG9hZGFibGUtZm9udHMuaHRtbA==" title="https://developer.android.com/preview/features/downloadable-fonts.html">可下载字体<i class="fa fa-external-link"></i></span>和<span class="exturl" data-url="aHR0cHM6Ly9kZXZlbG9wZXIuYW5kcm9pZC5jb20vcHJldmlldy9mZWF0dXJlcy9hZGFwdGl2ZS1pY29ucy5odG1s" title="https://developer.android.com/preview/features/adaptive-icons.html">图标适配<i class="fa fa-external-link"></i></span>使它开发起来更方便。</p><p>我们也建议升级到正式版的<span class="exturl" data-url="aHR0cHM6Ly9kZXZlbG9wZXIuYW5kcm9pZC5jb20vdG9waWMvbGlicmFyaWVzL3N1cHBvcnQtbGlicmFyeS9yZXZpc2lvbnMuaHRtbA==" title="https://developer.android.com/topic/libraries/support-library/revisions.html">Android支持库26.0.0<i class="fa fa-external-link"></i></span>,现在从<span class="exturl" data-url="aHR0cHM6Ly9kZXZlbG9wZXIuYW5kcm9pZC5jb20vc3R1ZGlvL2J1aWxkL2RlcGVuZGVuY2llcy5odG1sI2dvb2dsZS1tYXZlbg==" title="https://developer.android.com/studio/build/dependencies.html#google-maven">Google的Maven仓库<i class="fa fa-external-link"></i></span>到最新版本的SDK和工具以及模拟器系统镜像可用，在接下来的这几天可用了。</p><p>您能够升级您的项目的编译SDK版本到API 26去针对官方Android O API进行编译。我们也建议的您升级您的应用程序的目标sdk版本到API 26去选择和测试您的应用与Android O具体的<span class="exturl" data-url="aHR0cHM6Ly9kZXZlbG9wZXIuYW5kcm9pZC5jb20vcHJldmlldy9iZWhhdmlvci1jaGFuZ2VzLmh0bWw=" title="https://developer.android.com/preview/behavior-changes.html">行为更改<i class="fa fa-external-link"></i></span>。对于如何设置环境去使用Android O进行编译查看详细的<span class="exturl" data-url="aHR0cHM6Ly9kZXZlbG9wZXIuYW5kcm9pZC5jb20vcHJldmlldy9taWdyYXRpb24uaHRtbCNiZmE=" title="https://developer.android.com/preview/migration.html#bfa">迁移指南<i class="fa fa-external-link"></i></span>。</p><h1 id="发布您的应用升级到Google-Play"><a href="#发布您的应用升级到Google-Play" class="headerlink" title="发布您的应用升级到Google Play"></a>发布您的应用升级到Google Play</h1><p>Google Play对于应用程序针对编译或者目标API 26是开启的，当您准备好了，您就能够发布您的APK更新升级到您的alpha、beta或者产品通道。</p><p>确保您升级的应用运行在Android O上的和您之前的旧版本一样好。我们建议您使用<span class="exturl" data-url="aHR0cHM6Ly9kZXZlbG9wZXIuYW5kcm9pZC5jb20vZGlzdHJpYnV0ZS9lbmdhZ2UvYmV0YS5odG1s" title="https://developer.android.com/distribute/engage/beta.html">Google Play的beta测试特性<i class="fa fa-external-link"></i></span>去从一个小部分用户获取最早的反馈。然后做一个分阶段的推出。我们期待看到您的应用更新！</p><h1 id="如何获取开发者预览版4"><a href="#如何获取开发者预览版4" class="headerlink" title="如何获取开发者预览版4"></a>如何获取开发者预览版4</h1><p>如果您还没有准备好，获取开发者预览版4是很简单的！只需要访问<span class="exturl" data-url="aHR0cHM6Ly9hbmRyb2lkLmNvbS9iZXRh" title="https://android.com/beta">android.com/beta<i class="fa fa-external-link"></i></span>并选择您已经注册的手机或者平板。和往常一样，您也能够下载和<span class="exturl" data-url="aHR0cHM6Ly9kZXZlbG9wZXIuYW5kcm9pZC5jb20vcHJldmlldy9kb3dubG9hZC5odG1s" title="https://developer.android.com/preview/download.html">手动刷入这个升级<i class="fa fa-external-link"></i></span>。Android O 开发者预览版是对于Pixel, Pixel XL, Pixel C, Nexus 5X, Nexus 6P, Nexus Player以及Android模拟器可用。当我们发布官方Android O版本的时候，已注册的设备将会自动更新。</p><p>感谢您在整个预览中的所有投入，继续去分享您的<span class="exturl" data-url="aHR0cHM6Ly9kZXZlbG9wZXIuYW5kcm9pZC5jb20vcHJldmlldy9mZWVkYmFjay5odG1s" title="https://developer.android.com/preview/feedback.html">反馈和请求<i class="fa fa-external-link"></i></span>,我们很爱它！</p><blockquote><p>以上是对Anroid 官网博客文章的翻译，如果不足，欢迎指正，谢谢</p></blockquote>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;原文来自：&lt;a href=&quot;https://android-developers.googleblog.com/2017/07/developer-preview-4-now-available.html&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Developer Preview 4 now available, official Android O coming soon!&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;当我们在Android O平台上完成最后的首尾工作时，我们在今天推出了开发者预览版4去帮助您确保您的应用程序已经准备好了。&lt;/p&gt;
&lt;p&gt;这个版本是我们&lt;a href=&quot;https://developer.android.com/preview/migration.html&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;在今年夏天晚些时候&lt;/a&gt;为消费者启动官方Android O平台之前的最后一个预览版本，借此机会去尽快结束您的测试并发布您的更新，给用户一个平稳过渡到Android O&lt;/p&gt;
    
    </summary>
    
      <category term="Android" scheme="https://shoewann0402.github.io/categories/Android/"/>
    
      <category term="Android O" scheme="https://shoewann0402.github.io/categories/Android/Android-O/"/>
    
      <category term="Android Studio" scheme="https://shoewann0402.github.io/categories/Android/Android-O/Android-Studio/"/>
    
    
      <category term="Android O" scheme="https://shoewann0402.github.io/tags/Android-O/"/>
    
      <category term="AndroidO" scheme="https://shoewann0402.github.io/tags/AndroidO/"/>
    
      <category term="Developer Preview" scheme="https://shoewann0402.github.io/tags/Developer-Preview/"/>
    
      <category term="Android O Developer Preview" scheme="https://shoewann0402.github.io/tags/Android-O-Developer-Preview/"/>
    
      <category term="DP4" scheme="https://shoewann0402.github.io/tags/DP4/"/>
    
  </entry>
  
  <entry>
    <title>Android Things Hackster社区</title>
    <link href="https://shoewann0402.github.io/2017/07/01/android-things-hackster-community/"/>
    <id>https://shoewann0402.github.io/2017/07/01/android-things-hackster-community/</id>
    <published>2017-07-01T00:06:34.000Z</published>
    <updated>2017-07-01T00:22:02.000Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>原文来自: <span class="exturl" data-url="aHR0cHM6Ly9hbmRyb2lkLWRldmVsb3BlcnMuZ29vZ2xlYmxvZy5jb20vMjAxNy8wNi9hbmRyb2lkLXRoaW5ncy1oYWNrc3Rlci1jb21tdW5pdHkuaHRtbA==" title="https://android-developers.googleblog.com/2017/06/android-things-hackster-community.html">Android Things Hackster Community<i class="fa fa-external-link"></i></span></p></blockquote><p><span class="exturl" data-url="aHR0cHM6Ly9kZXZlbG9wZXIuYW5kcm9pZC5jb20vdGhpbmdzL2luZGV4Lmh0bWw=" title="https://developer.android.com/things/index.html">Android Things<i class="fa fa-external-link"></i></span>通过提供相同的Android开发工具、一流的Android框架和Google APIs使开发者在移动设备上取得成功，建立连接到嵌入式设备更加容易。自从12月初启动了预览版，社区已经将一些惊人的想法转变成了使用平台上面令人兴奋的原型。</p><a id="more"></a><p>对于使这些制作者和开发者能够使用Android Things去分享和相互学习，我们与<span class="exturl" data-url="aHR0cHM6Ly9oYWNrc3Rlci5pby8=" title="https://hackster.io/">Hackster.io<i class="fa fa-external-link"></i></span>合作去创建一个社区，有志向的物联网开发者能够去展示他们的项目并通过其他人的工作获得启发。Hackster.io是一个有20万工程师和开发者的社区，专门去构建硬件连接互联网的项目。他们也通过直播研讨会设计比赛寻求教育和挑战成员。</p><p>我们急切的想看到你提出来的项目。更重要的是，我们是很兴奋的去看到你的工作怎么样启发其他开发者用Android Things去创建一些很棒的东西。访问我们<span class="exturl" data-url="aHR0cHM6Ly9oYWNrc3Rlci5pby9nb29nbGU=" title="https://hackster.io/google">Hackster.io社区<i class="fa fa-external-link"></i></span>去看一下其他人已经构建好了的惊人的项目，并在今天加入社区！</p><p><img src="/images/android-things-hackster-io-page.png" alt="android-things-hackster-io-page.png"></p><h2 id="Android-Things-在线研讨会"><a href="#Android-Things-在线研讨会" class="headerlink" title="Android Things 在线研讨会"></a>Android Things 在线研讨会</h2><p>2017年7月7日上午10点，我们将和Hackster.io合作主持一场名为<strong>Android Things引导物联网产品</strong>的在线研讨会。在此期间，你将学习到我们如何设计Android Things，去解决尝试构建物联网产品的开发者遇到的许多痛苦的经历。你将也就机会去发送有关平台和生态系统的问题，<span class="exturl" data-url="aHR0cHM6Ly9hdHRlbmRlZS5nb3Rvd2ViaW5hci5jb20vcmVnaXN0ZXIvMzc3MjQ5OTU0NTA0OTE2NzEwNw==" title="https://attendee.gotowebinar.com/register/3772499545049167107">今天注册<i class="fa fa-external-link"></i></span>加入我们这个激动人心的活动！</p><blockquote><p>以上是对Anroid 官网博客文章的翻译，如果不足，欢迎指正，谢谢</p></blockquote>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;原文来自: &lt;a href=&quot;https://android-developers.googleblog.com/2017/06/android-things-hackster-community.html&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Android Things Hackster Community&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;a href=&quot;https://developer.android.com/things/index.html&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Android Things&lt;/a&gt;通过提供相同的Android开发工具、一流的Android框架和Google APIs使开发者在移动设备上取得成功，建立连接到嵌入式设备更加容易。自从12月初启动了预览版，社区已经将一些惊人的想法转变成了使用平台上面令人兴奋的原型。&lt;/p&gt;
    
    </summary>
    
      <category term="Android" scheme="https://shoewann0402.github.io/categories/Android/"/>
    
      <category term="AndroidThings" scheme="https://shoewann0402.github.io/categories/Android/AndroidThings/"/>
    
      <category term="IoT" scheme="https://shoewann0402.github.io/categories/Android/AndroidThings/IoT/"/>
    
    
      <category term="Android Things" scheme="https://shoewann0402.github.io/tags/Android-Things/"/>
    
      <category term="IoT" scheme="https://shoewann0402.github.io/tags/IoT/"/>
    
      <category term="hackster" scheme="https://shoewann0402.github.io/tags/hackster/"/>
    
  </entry>
  
  <entry>
    <title>Android Things 控制台开发者预览版</title>
    <link href="https://shoewann0402.github.io/2017/06/29/android-things-console-developer-preview/"/>
    <id>https://shoewann0402.github.io/2017/06/29/android-things-console-developer-preview/</id>
    <published>2017-06-29T00:56:37.000Z</published>
    <updated>2017-06-29T01:07:56.000Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>原文来自: <span class="exturl" data-url="aHR0cHM6Ly9hbmRyb2lkLWRldmVsb3BlcnMuZ29vZ2xlYmxvZy5jb20vMjAxNy8wNi9hbmRyb2lkLXRoaW5ncy1jb25zb2xlLWRldmVsb3Blci1wcmV2aWV3Lmh0bWw=" title="https://android-developers.googleblog.com/2017/06/android-things-console-developer-preview.html">Android Things Console developer preview<i class="fa fa-external-link"></i></span></p></blockquote><p>今天我们启动了<span class="exturl" data-url="aHR0cHM6Ly9wYXJ0bmVyLmFuZHJvaWQuY29tL3RoaW5ncy9jb25zb2xl" title="https://partner.android.com/things/console">Android Things 控制台<i class="fa fa-external-link"></i></span>开发者预览版，这个控制台允许开发者去管理在他们的Android Things IoT设备上运行的软件，包括创建工厂镜像，以及升级操作系统和开发者提供的APK。设备需要运行一个来源于Android Things 控制台下载的系统镜像，为了未来接收更新升级，比如即将到来的开发者预览版5。Google为over-the-air(OTA)空中升级提供了所有的基础设施，因此，开发者能够着重于它们具体的应用,不必去建立自己的实现 —— 使得它们的物联网设备会比之前更快更安全的进入市场。</p><a id="more"></a><p>让我们来逛一圈控制台，看看它提供了哪些功能：</p><h1 id="产品创建和产品设置"><a href="#产品创建和产品设置" class="headerlink" title="产品创建和产品设置"></a>产品创建和产品设置</h1><p>开发者首先定义一个产品，包括选择设备依赖的名称以及System-on-Moule(SoM)系统对模块的类型。大多数的开发者当他们在构建物联网设备的时候希望使用Google Play服务，在这里作为可选的功能被配置，OEM分区的大小也被配置，必须有足够巨大去包括任意一个APK未来增长的大小</p><p><img src="/images/product_creation_and_product_settings_image1.png" alt="product_creation_and_product_settings_image1.png"></p><h1 id="工厂镜像"><a href="#工厂镜像" class="headerlink" title="工厂镜像"></a>工厂镜像</h1><p>一部设备需要初始化基本固件，才能从你的控制台上接收正确产品的未来更新升级。对于初学者，你能够简单的使用“创建构建配置”去构建具有你的产品配置的空包的默认工厂镜像。这个工厂镜像然后能够被下载，并刷入到你的设备，你能够通过sideloading一个APK文件开始在它上面开发。</p><p>稍候，一旦你有准备你将要部署到你的产品中的所有设备的应用程序，你能够上传捆绑到控制台。这个捆绑是一个ZIP压缩文件包含了一个主要的APK文件，用户空间驱动程序在一个APK文件中作为一个服务，任意一个额外的APK文件通过主要的APK文件被启动。一个<span class="exturl" data-url="aHR0cHM6Ly9zb3VyY2UuYW5kcm9pZC5jb20vZGV2aWNlcy90ZWNoL290YS9kZXZpY2VfY29kZSNib290LWFuaW1hdGlvbg==" title="https://source.android.com/devices/tech/ota/device_code#boot-animation">启动动画.zip<i class="fa fa-external-link"></i></span>文件也是被支持的，将会在系统启动过程中被展示。上传的捆绑ZIP文件用于生成完整系统映像能够部署到设备。更多有关于捆绑ZIP文件内容的信息在<span class="exturl" data-url="aHR0cHM6Ly9kZXZlbG9wZXIuYW5kcm9pZC5jb20vdGhpbmdzL2NvbnNvbGUvYXBwX2J1bmRsZS5odG1s" title="https://developer.android.com/things/console/app_bundle.html">文档<i class="fa fa-external-link"></i></span>中可用。</p><p><img src="/images/product_creation_and_product_settings_image2.png" alt="product_creation_and_product_settings_image2.png"></p><h1 id="OTA升级"><a href="#OTA升级" class="headerlink" title="OTA升级"></a>OTA升级</h1><p>这个选项卡允许开发者去选择:应将哪个系统镜像推送到产品设备的队列。开发者选择了一个，然后“推送到设备”开始这个流程，然后将更新升级安全的推送到了所有的设备上，安装到A/B分区中的一个，并在设备重启的时候进行激活。如果检测到任何故障，这个设备将会自动回滚到上一个已知版本，因此为你更新是一直是可能的。开发者将能够测试新的Android Things发布版，并决定设备是否应该自动更新。</p><p><img src="/images/product_creation_and_product_settings_image3.png" alt="product_creation_and_product_settings_image3.png"></p><h1 id="反馈"><a href="#反馈" class="headerlink" title="反馈"></a>反馈</h1><p>Android Things控制台当前是一个预览版，我们正在做很多功能和自定义的工作。我们鼓励所有的Android Things开发者去检出Android Things控制台并提供反馈。你能够提交<span class="exturl" data-url="aHR0cHM6Ly9jb2RlLmdvb2dsZS5jb20vcC9hbmRyb2lkL2lzc3Vlcy9lbnRyeT90ZW1wbGF0ZT1BbmRyb2lkJTIwVGhpbmdzJTIwYnVnJTIwcmVwb3J0" title="https://code.google.com/p/android/issues/entry?template=Android%20Things%20bug%20report">错误报告<i class="fa fa-external-link"></i></span>和<span class="exturl" data-url="aHR0cHM6Ly9jb2RlLmdvb2dsZS5jb20vcC9hbmRyb2lkL2lzc3Vlcy9lbnRyeT90ZW1wbGF0ZT1BbmRyb2lkJTIwVGhpbmdzJTIwZmVhdHVyZSUyMHJlcXVlc3Q=" title="https://code.google.com/p/android/issues/entry?template=Android%20Things%20feature%20request">新功能请求<i class="fa fa-external-link"></i></span>,在<span class="exturl" data-url="aHR0cDovL3N0YWNrb3ZlcmZsb3cuY29tL3F1ZXN0aW9ucy90YWdnZWQvYW5kcm9pZC10aGluZ3M=" title="http://stackoverflow.com/questions/tagged/android-things">Stack Overflow<i class="fa fa-external-link"></i></span>提出任何问题。对于学习更多有关于Android Things控制台,阅读详细<span class="exturl" data-url="aHR0cHM6Ly9kZXZlbG9wZXIuYW5kcm9pZC5jb20vdGhpbmdzL2NvbnNvbGUvaW5kZXguaHRtbA==" title="https://developer.android.com/things/console/index.html">文档<i class="fa fa-external-link"></i></span>，我们也鼓励每一个人去加入在Google+上面的<span class="exturl" data-url="aHR0cHM6Ly9nLmNvL2lvdGRldg==" title="https://g.co/iotdev">Google的物联网开发者交流社区<i class="fa fa-external-link"></i></span>，一个很棒的资源来获得更新和讨论想法。</p><blockquote><p>以上是对Anroid 官网博客文章的翻译，如果不足，欢迎指正，谢谢</p></blockquote>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;原文来自: &lt;a href=&quot;https://android-developers.googleblog.com/2017/06/android-things-console-developer-preview.html&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Android Things Console developer preview&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;今天我们启动了&lt;a href=&quot;https://partner.android.com/things/console&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Android Things 控制台&lt;/a&gt;开发者预览版，这个控制台允许开发者去管理在他们的Android Things IoT设备上运行的软件，包括创建工厂镜像，以及升级操作系统和开发者提供的APK。设备需要运行一个来源于Android Things 控制台下载的系统镜像，为了未来接收更新升级，比如即将到来的开发者预览版5。Google为over-the-air(OTA)空中升级提供了所有的基础设施，因此，开发者能够着重于它们具体的应用,不必去建立自己的实现 —— 使得它们的物联网设备会比之前更快更安全的进入市场。&lt;/p&gt;
    
    </summary>
    
      <category term="Android" scheme="https://shoewann0402.github.io/categories/Android/"/>
    
      <category term="AndroidThings" scheme="https://shoewann0402.github.io/categories/Android/AndroidThings/"/>
    
      <category term="IoT" scheme="https://shoewann0402.github.io/categories/Android/AndroidThings/IoT/"/>
    
    
      <category term="Developer Preview" scheme="https://shoewann0402.github.io/tags/Developer-Preview/"/>
    
      <category term="Android Things" scheme="https://shoewann0402.github.io/tags/Android-Things/"/>
    
      <category term="IoT" scheme="https://shoewann0402.github.io/tags/IoT/"/>
    
  </entry>
  
  <entry>
    <title>Android N 静默安装和卸载</title>
    <link href="https://shoewann0402.github.io/2017/06/27/android-n-installSilent-and-uninstallSilent/"/>
    <id>https://shoewann0402.github.io/2017/06/27/android-n-installSilent-and-uninstallSilent/</id>
    <published>2017-06-27T09:49:01.000Z</published>
    <updated>2017-06-28T08:55:46.000Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>最近在做静默安装和卸载功能的时候，应用程序放到系统分区(/system/priv-app/)执行pm命令实现静默安装和卸载的方式在7.0上安装、卸载失败。Google 在N上加强了安全权限，对此用本文来记录如何解决7.0上的静默安装和静默卸载。</p></blockquote><a id="more"></a><h1 id="静默安装"><a href="#静默安装" class="headerlink" title="静默安装"></a>静默安装</h1><h2 id="复现错误"><a href="#复现错误" class="headerlink" title="复现错误"></a>复现错误</h2><p>通过7.0之前的安装方法，执行静默安装sdcard下的一个应用，然后安装失败，抛出以下异常log:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">06-27 11:01:10.483 D/MainActivity: onClick: /sdcard/com.ifeng.news2.apk</span><br><span class="line">06-27 11:01:10.489 D/PackageUtils: Enter----&gt;&gt;&gt;installSilent()</span><br><span class="line">06-27 11:01:10.489 D/PackageUtils: installSilent—————&gt;&gt;&gt;&gt;/sdcard/com.ifeng.news2.apk</span><br><span class="line">06-27 11:01:10.494 D/PackageUtils: command---&gt;&gt;&gt;LD_LIBRARY_PATH=/vendor/lib*:/system/lib* pm install -r /sdcard/com.ifeng.news2.apk</span><br><span class="line">06-27 11:01:11.552 E/PackageUtils: installSilent successMsg:, ErrorMsg:Error: java.lang.SecurityException: Permission Denial: runInstallCreate from pm command asks to run as user -1 but is calling from user 0; this requires android.permission.INTERACT_ACROSS_USERS_FULL</span><br></pre></td></tr></table></figure><p>Error: java.lang.SecurityException: Permission Denial: runInstallCreate from pm command asks to run as user -1 but is calling from user 0; this requires android.permission.INTERACT_ACROSS_USERS_FULL</p><h2 id="解决错误"><a href="#解决错误" class="headerlink" title="解决错误"></a>解决错误</h2><p>参考：<span class="exturl" data-url="aHR0cDovL2Jsb2cuY3Nkbi5uZXQvY2d4emxsL2FydGljbGUvZGV0YWlscy81NTIyNDc0Nw==" title="http://blog.csdn.net/cgxzll/article/details/55224747">Android7.0的静默安装失败问题研究<i class="fa fa-external-link"></i></span></p><p>得知pm安装的命令：<strong>Runtime.getRuntime().exec(“pm install -i 包名 –user 0 apkpath”)</strong></p><p>一开始，我被这个“<strong>包名</strong>”坑了:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">06-27 14:58:44.239 D/MainActivity: onClick: /sdcard/com.ifeng.news2.apk</span><br><span class="line">06-27 14:58:44.243 D/PackageUtils: Enter----&gt;&gt;&gt;installSilent()</span><br><span class="line">06-27 14:58:44.243 D/PackageUtils: installSilent—————&gt;&gt;&gt;&gt;/sdcard/com.ifeng.news2.apk</span><br><span class="line">06-27 14:58:44.252 D/PackageUtils: command---&gt;&gt;&gt;LD_LIBRARY_PATH=/vendor/lib*:/system/lib* pm install -i com.ifeng.news2 --user 0 /sdcard/com.ifeng.news2.apk</span><br><span class="line">06-27 14:58:45.458 E/PackageUtils: installSilent successMsg:, ErrorMsg:Error: java.lang.SecurityException: Package com.ifeng.news2 does not belong to 10045</span><br></pre></td></tr></table></figure><p><strong>Error: java.lang.SecurityException: Package com.ifeng.news2 does not belong to 10045</strong></p><p>那么，我们来看看<strong>belong to 10045</strong>的包是什么？</p><p><img src="/images/Screenshot20170627150302.png" alt="Screenshot20170627150302.png"></p><p>可以看到<strong>10045</strong>对应的包是我当前的这个测试应用的包名<strong>com.wt.testshortcut</strong>，而不是指定需要安装apk应用的包名<strong>com.ifeng.news2</strong></p><p>因此，我们再改之:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">06-27 16:17:58.843 D/MainActivity: onClick: /sdcard/com.ifeng.news2.apk</span><br><span class="line">06-27 16:17:58.846 D/PackageUtils: Enter----&gt;&gt;&gt;installSilent()</span><br><span class="line">06-27 16:17:58.846 D/PackageUtils: installSilent—————&gt;&gt;&gt;&gt;/sdcard/com.ifeng.news2.apk</span><br><span class="line">06-27 16:17:58.856 D/PackageUtils: command---&gt;&gt;&gt;LD_LIBRARY_PATH=/vendor/lib*:/system/lib* pm install -i com.wt.testshortcut --user 0 /sdcard/com.ifeng.news2.apk</span><br><span class="line">06-27 16:18:18.359 E/ApkStatusReceiver: packageName--&gt;com.ifeng.news2</span><br><span class="line">06-27 16:18:18.359 E/ApkStatusReceiver: onReceive--&gt;android.intent.action.PACKAGE_ADDED</span><br></pre></td></tr></table></figure><p>从上面的log可以看出，我自定义的<strong>ApkStatusReceiver</strong>监听包安装、卸载、替换的广播，收到了一个包名为<strong>com.ifeng.news2</strong>的应用被添加，也就是我刚刚我们需要静默安装上去的应用，此时手机已确认该应用被成功安装。</p><p>最终pm install的命令就是：<strong>pm install -i 作为安装者的应用包名 –user 0 需要安装的应用在移动设备上的路径</strong></p><h2 id="源码部分"><a href="#源码部分" class="headerlink" title="源码部分"></a>源码部分</h2><p><img src="/images/Screenshot20170627140757.png" alt="Screenshot20170627140757.png"></p><p>以上截图，可以看到第<strong>01515</strong>行的pm安装命令: <strong>pm install [-lrtsfd] [-i PACKAGE] [–user USER_ID] [PATH]</strong></p><p><img src="/images/Screenshot20170627141935.png" alt="Screenshot20170627141935.png"></p><p>以上截图，可以看到<strong>-i: specify the installer package name</strong> (指定安装程序包名称),而不是指定被安装程序包名称，由此也可以推断出上面的安装命令</p><h2 id="后记"><a href="#后记" class="headerlink" title="后记"></a>后记</h2><blockquote><ul><li>不要忘记在AndroidManifest.xml添加 “android.permission.INTERACT_ACROSS_USERS_FULL” 权限</li><li>如果项目不是在Android源码里面编译的，而是直接在Android Studio上面开发完成，然后push到/system/priv-app/下面的，在执行sdcard下apk的安装，是需要请求外置存储读写权限的，若没有开启，将会抛出异常：</li></ul></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">PackageUtils: installSilent successMsg:, ErrorMsg:Error: failed to write; /sdcard/com.ifeng.news2.apk (Permission denied)</span><br></pre></td></tr></table></figure><p><strong>Error: failed to write; /sdcard/com.ifeng.news2.apk (Permission denied)</strong></p><p>最后，我们来看看在Terminal终端执行pm install的情况：</p><p><img src="/images/Screenshot20170627193851.png" alt="Screenshot20170627193851.png"></p><p>可以看到，之前在7.0上面执行失败的命令和成功命令都能够在Terminal终端上面执行静默安装成功。</p><p>以上就是关于7.0上静默安装的内容，接下来看看静默卸载 …..</p><h1 id="静默卸载"><a href="#静默卸载" class="headerlink" title="静默卸载"></a>静默卸载</h1><h2 id="复现错误-1"><a href="#复现错误-1" class="headerlink" title="复现错误"></a>复现错误</h2><p>在7.0上使用pm uninstall package 命令，会抛出一下异常log:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">06-27 20:12:02.631 D/MainActivity: onClick: com.ifeng.news2</span><br><span class="line">06-27 20:12:02.634 D/PackageUtils: Enter----&gt;&gt;&gt;uninstallSilent()</span><br><span class="line">06-27 20:12:02.634 D/PackageUtils: command---&gt;&gt;&gt;LD_LIBRARY_PATH=/vendor/lib*:/system/lib* pm uninstall -k com.ifeng.news2</span><br><span class="line">06-27 20:12:03.728 D/PackageUtils: commandResult---&gt;&gt;&gt;com.wt.testshortcut.ShellUtils$CommandResult@aac543c</span><br><span class="line">06-27 20:12:03.743 E/PackageUtils: uninstallSilent successMsg:, ErrorMsg:Security exception: Permission Denial: runUninstall from pm command asks to run as user -1 but is calling from user 0; this requires android.permission.INTERACT_ACROSS_USERS_FULLjava.lang.SecurityException: Permission Denial: runUninstall from pm command asks to run as user -1 but is calling from user 0; this requires android.permission.INTERACT_ACROSS_USERS_FULLat com.android.server.am.UserController.handleIncomingUser(UserController.java:1267)at com.android.server.am.ActivityManagerService.handleIncomingUser(ActivityManagerService.java:17433)at android.app.ActivityManager.handleIncomingUser(ActivityManager.java:3395)at com.android.server.pm.PackageManagerShellCommand.translateUserId(PackageManagerShellCommand.java:1157)at com.android.server.pm.PackageManagerShellCommand.runUninstall(PackageManagerShellCommand.java:771)at com.android.server.pm.PackageManagerShellCommand.onCommand(PackageManagerShellCommand.java:118)at android.os.ShellCommand.exec(ShellCommand.java:94)at com.android.server.pm.PackageManagerService.onShellCommand(PackageManagerService.java:18747)at android.os.Binder.shellCommand(Binder.java:468)at android.os.Binder.onTransact(Binder.java:367)at android.content.pm.IPackageManager$Stub.onTransact(IPackageManager.java:2387)at com.android.server.pm.PackageManagerService.onTransact(PackageManagerService.java:3197)at android.os.Binder.execTransact(Binder.java:565)at java.lang.reflect.Method.invoke(Native Method)at com.qihoo360.mobilesafe.loadedmgr.b.s.a(SourceFile:287)at com.qihoo360.mobilesafe.loaded.SystemServerJar$FilterInstance.filterExecTransact(SourceFile:463)at com.qihoo360.mobilesafe.loadednative.NativeManager.execTransact(SourceFile:203)</span><br></pre></td></tr></table></figure><p>通过以上的log，分析可以看出，出现的错误和上面静默安装的错误相同，都是:</p><p>ErrorMsg:Security exception: Permission Denial: runUninstall from pm command asks to run as user -1 but is calling from user 0; this requires android.permission.INTERACT_ACROSS_USERS_FULL</p><h2 id="解决错误-1"><a href="#解决错误-1" class="headerlink" title="解决错误"></a>解决错误</h2><p>我们现在来看上面静默安装(#源码部分)的第一张图，看到第<strong>01522</strong>行，命令显示的是:<strong>pm uninstall [-k] [–user USER_ID] PACKAGE</strong></p><p>确定我们的判断是没有问题的，在7.0上执行pm指令的时候，都需要跟上<strong>[–user USER_ID]</strong></p><p><img src="/images/Screenshot20170627202038.png" alt="Screenshot20170627202038.png"></p><p>注：其中<strong>[-k]</strong>是代表时候需要保留需要卸载应用包名的数据</p><p>因此，我们修改执行命令，同静默安装一样增加<strong>–user 0</strong>:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">06-27 20:28:59.893 D/MainActivity: onClick: com.ifeng.news2</span><br><span class="line">06-27 20:28:59.899 D/PackageUtils: Enter----&gt;&gt;&gt;uninstallSilent()</span><br><span class="line">06-27 20:28:59.899 D/PackageUtils: command---&gt;&gt;&gt;LD_LIBRARY_PATH=/vendor/lib*:/system/lib* pm uninstall -k --user 0 com.ifeng.news2</span><br><span class="line">06-27 20:29:01.006 D/PackageUtils: commandResult---&gt;&gt;&gt;com.wt.testshortcut.ShellUtils$CommandResult@67c71a1</span><br><span class="line">06-27 20:29:01.019 E/PackageUtils: uninstallSilent successMsg:, ErrorMsg:Exception occurred while dumping:java.lang.NullPointerExceptionat com.android.internal.util.Preconditions.checkNotNull(Preconditions.java:94)at com.android.server.AppOpsService.checkPackage(AppOpsService.java:999)at android.app.AppOpsManager.checkPackage(AppOpsManager.java:1682)at com.android.server.pm.PackageInstallerService.uninstall(PackageInstallerService.java:879)at com.android.server.pm.PackageManagerShellCommand.runUninstall(PackageManagerShellCommand.java:792)at com.android.server.pm.PackageManagerShellCommand.onCommand(PackageManagerShellCommand.java:118)at android.os.ShellCommand.exec(ShellCommand.java:94)at com.android.server.pm.PackageManagerService.onShellCommand(PackageManagerService.java:18747)at android.os.Binder.shellCommand(Binder.java:468)at android.os.Binder.onTransact(Binder.java:367)at android.content.pm.IPackageManager$Stub.onTransact(IPackageManager.java:2387)at com.android.server.pm.PackageManagerService.onTransact(PackageManagerService.java:3197)at android.os.Binder.execTransact(Binder.java:565)at java.lang.reflect.Method.invoke(Native Method)at com.qihoo360.mobilesafe.loadedmgr.b.s.a(SourceFile:287)at com.qihoo360.mobilesafe.loaded.SystemServerJar$FilterInstance.filterExecTransact(SourceFile:463)at com.qihoo360.mobilesafe.loadednative.NativeManager.execTransact(SourceFile:203)</span><br></pre></td></tr></table></figure></p><p>通过以上的log分析出，是在执行到<strong>Preconditions.checkNotNull()</strong>方法的时候抛出了异常的。</p><p>下面我们一起来看看这个流程，逆向倒推：</p><p>Preconditions.checkNotNull() &lt;=== AppOpsService.checkPackage() &lt;=== AppOpsManager.checkPackage() &lt;=== PackageInstallerService.uninstall() &lt;=== PackageManagerShellCommand.runUninstall() &lt;=== PackageManagerShellCommand.onCommand()</p><h3 id="源码分析"><a href="#源码分析" class="headerlink" title="源码分析"></a>源码分析</h3><p>通过对源码的分析，定位到了<strong>PackageInstallerService.uninstall()</strong>方法</p><p><img src="/images/Screenshot20170627204704.png" alt="Screenshot20170627204704.png"></p><p>PackageInstallerService.uninstall()里面调用AppOpsManager.checkPackage()，需要传递<strong>callerPackageName</strong>的参数，因为它是null了，导致后面CheckNotNull()方法抛出了java.lang.NullPointerException异常</p><p><img src="/images/Screenshot20170627205539.png" alt="Screenshot20170627205539.png"></p><p>这个<strong>callerPackageName</strong>，不是我需要去卸载应用的包名，而是我需要去执行卸载操作的应用的包名。分析上面的pm uninstall命令，也并没有明确指定哪儿需要传入我当前应用的包名。</p><p>好吧，我也尝试像静默安装一样添加当前包名的参数，使用Terminal终端来执行pm uninstall命令卸载:</p><p><img src="/images/Screenshot20170627210607.png" alt="Screenshot20170627210607.png"></p><p>结果！命令无效 …..</p><p>再来往前看PackageManagerShellCommand.runUninstall()这个方法</p><p><img src="/images/Screenshot20170628111723.png" alt="Screenshot20170628111723.png"></p><p>这个方法是运行卸载，取出command命令里面的每一段。其中可以看到option选项只有“-k”、“–user”，“packageName”是我们需要指定卸载掉的包名。再往下看到最底部，有一个uninstall的方法，里面的第二个参数传的是“null”,它正好是我们需要传过去的<strong>callerPackageName</strong>。</p><p>是不是这个地方设置了null,导致了后面为null呢？</p><p>我尝试着给这个null赋值一个固定的包名:com.wt.testshortcut</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">06-28 12:13:39.306 1393-1717/system_process D/PackageManagerShellCommand: =====&gt;opt: -k</span><br><span class="line">06-28 12:13:39.306 1393-1717/system_process D/PackageManagerShellCommand: =====&gt;opt: --user</span><br><span class="line">06-28 12:13:39.306 1393-1717/system_process D/PackageManagerShellCommand: =====&gt;packageName: com.ifeng.news2</span><br><span class="line">06-28 12:13:39.306 1393-1717/system_process D/PackageManagerShellCommand: =====&gt;splitName: null</span><br><span class="line">06-28 12:13:39.306 1393-1717/system_process D/PackageInstallerService: ======&gt;packageName: com.ifeng.news2</span><br><span class="line">06-28 12:13:39.306 1393-1717/system_process D/PackageInstallerService: ======&gt;callerPackageName: com.wt.testshortcut</span><br><span class="line">06-28 12:13:39.306 1393-1717/system_process D/PackageInstallerService: ======&gt;callingUid: 10045</span><br><span class="line">06-28 12:13:39.306 1393-1717/system_process D/PackageInstallerService: ======&gt;callerPackageName: com.wt.testshortcut</span><br></pre></td></tr></table></figure><p>此时的callerPackageName固定为com.wt.testshortcut，结果倒是没有报null的错误了，但是命令还是无效，并且应用还出现了ANR现象 …..</p><p>尝试着给这个null赋值一个固定的包名的做法是不行的</p><p>经过同事的讨论分析，只要满足PackageInstallerService.uninstall()中不走进对callingUid的判断，不去AppOpsManager.checkPackage()代码即可。也就是需要<strong>callingUid=Process.SHELL_UID（0）</strong>或者<strong>callingUid=Process.ROOT_UID (2000)</strong></p><p>最后的解决方式：代码里在使用<strong>pm uninstall [-k] –user 0 PackageName</strong>的基础上,并在AndroidMainifest.xml下添加<strong>android:shareUerId=”android.uid.shell”</strong>，并需要在系统里进行Android<strong>源码编译</strong>,成功的完成了静默卸载。</p><h2 id="后记-1"><a href="#后记-1" class="headerlink" title="后记"></a>后记</h2><p>记得之前在Android M 上也是静默卸载失败，当时替换为下面的这种方式解决了卸载的问题:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">Intent intent = <span class="keyword">new</span> Intent();</span><br><span class="line">intent.setFlags(Intent.FLAG_ACTIVITY_NEW_TASK);</span><br><span class="line">PendingIntent sender = PendingIntent.getActivity(context, <span class="number">0</span>, intent, <span class="number">0</span>);</span><br><span class="line">PackageInstaller mPackageInstaller = context.getPackageManager().getPackageInstaller();</span><br><span class="line">mPackageInstaller.uninstall(pkgName, sender.getIntentSender());<span class="comment">// 卸载APK</span></span><br><span class="line">Log.d(TAG, <span class="string">"uninstallApk: "</span> + pkgName);</span><br></pre></td></tr></table></figure><p>参考：<span class="exturl" data-url="aHR0cHM6Ly96aHVhbmxhbi56aGlodS5jb20vcC8yMTU4NTk3MA==" title="https://zhuanlan.zhihu.com/p/21585970">Android M静默卸载解决方案的探索<i class="fa fa-external-link"></i></span></p><p>但是上面的这种方式在Android N上也没有任何效果了。</p><p>针对上面静默卸载的方式，大家有兴趣再分析看看有没有其他的解决办法。</p><blockquote><p>本文为原创文章，转载请注明出处，如有不足，欢迎指正，感谢你的阅读。</p></blockquote>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;最近在做静默安装和卸载功能的时候，应用程序放到系统分区(/system/priv-app/)执行pm命令实现静默安装和卸载的方式在7.0上安装、卸载失败。Google 在N上加强了安全权限，对此用本文来记录如何解决7.0上的静默安装和静默卸载。&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="Android" scheme="https://shoewann0402.github.io/categories/Android/"/>
    
      <category term="Android N" scheme="https://shoewann0402.github.io/categories/Android/Android-N/"/>
    
    
      <category term="installSilent" scheme="https://shoewann0402.github.io/tags/installSilent/"/>
    
      <category term="uninstallSilent" scheme="https://shoewann0402.github.io/tags/uninstallSilent/"/>
    
      <category term="android N" scheme="https://shoewann0402.github.io/tags/android-N/"/>
    
      <category term="android 7.x" scheme="https://shoewann0402.github.io/tags/android-7-x/"/>
    
  </entry>
  
  <entry>
    <title>开启：AndroidThings之路</title>
    <link href="https://shoewann0402.github.io/2017/06/24/start-android-things-way/"/>
    <id>https://shoewann0402.github.io/2017/06/24/start-android-things-way/</id>
    <published>2017-06-24T13:36:57.000Z</published>
    <updated>2017-06-24T15:40:44.000Z</updated>
    
    <content type="html"><![CDATA[<p>  一直以来都知道有AndroidThings这个东西，之前也并未有时间去过多了解。可能是因为它是涉及到物联网相关的知识，个人主要做Android软件开发，对硬件也了解甚少，并且手上也没有开发板。最近兴趣来了，也就入手了一个开发板，毕竟作为Google的物联网系统，Android开发者也是有必要去了解一下AndroidThings</p><a id="more"></a><p>我是入手的树莓派3B(Rpi3)</p><p><img src="/images/raspberry-pi-3-board.png" alt="raspberry-pi-3-board"></p><p>这里关于AndroidThings相关的入门知识，就不再次阐述了，可以参考以下站点：</p><blockquote><ul><li><span class="exturl" data-url="aHR0cHM6Ly9kZXZlbG9wZXIuYW5kcm9pZC5nb29nbGUuY24vdGhpbmdzL2luZGV4Lmh0bWw=" title="https://developer.android.google.cn/things/index.html">AndroidThings官网<i class="fa fa-external-link"></i></span> </li><li>[谷歌IoT开发技术专家 (GDE) 王玉成 (York Wang)的专题讲解] (<span class="exturl" data-url="aHR0cDovL2Jsb2cuY3Nkbi5uZXQvY29sdW1uL2RldGFpbHMvMTQ2MjUuaHRtbA==" title="http://blog.csdn.net/column/details/14625.html">http://blog.csdn.net/column/details/14625.html<i class="fa fa-external-link"></i></span>)</li></ul></blockquote><p>这里说一下我在搭建AndroidThings遇到的问题和解决方法,其实也相当于是王玉成(York Wang)在他csdn博客里的那篇<span class="exturl" data-url="aHR0cDovL2Jsb2cuY3Nkbi5uZXQvd2ZpbmcvYXJ0aWNsZS9kZXRhaWxzLzU4MjUwNjU4" title="http://blog.csdn.net/wfing/article/details/58250658">搭建文章<i class="fa fa-external-link"></i></span>，评论里面提到的没有写出来的方法。</p><h1 id="问题重现"><a href="#问题重现" class="headerlink" title="问题重现"></a>问题重现</h1><p>参照教程，我在公司搭建环境，开始折腾AndroidThings: usb连接rpi3开发板供电、本地有线网络连接rpi3开发板提供网络访问、HDMI转VGA线连接rpi3开发板提供屏幕显示。</p><p>一切准备就绪，屏幕亮了，出现了绿色的android,灰色的things和三个进度点。</p><p>内心是相当的激动，仿佛是开启了一个新纪元，这可能只有真正爱技术、爱谷歌、爱折腾的人才能体会的感觉。</p><p>然后进入下一个界面，据说在这个界面下面小字显示的是当前的IP地址，然后根据adb connect命令去连接。可是我找了半天，试了很多次还是显示的“<strong>Not Connected</strong>” </p><p><img src="/images/IMG_20170622_201119.jpg" alt="IMG_20170622_201119.jpg"></p><p>最后那天开箱测试，我还是被逼放弃了… 我猜想，原因很简单：有可能是公司的本地连接需要手动配置IP、默认网关、DNS、子网掩码，导致我目前直接连接上去是没有有效IP访问</p><h1 id="解决问题"><a href="#解决问题" class="headerlink" title="解决问题"></a>解决问题</h1><p>后来，我联系了谷歌GDE专家王玉成 (York Wang)，请教了它，最后解决这个问题。</p><blockquote><ul><li>首先我用笔记本(Windows10)连接wifi，然后用网线连接rpi3开发板和笔记本,将wifi的网络设置为<strong>共享</strong>，这样就能分配一个IP提供给开发板访问网络，电脑跟开发板组成一个局域网</li></ul></blockquote><p><img src="/images/QQ20170624131213.png" alt="QQ20170624131213.png"></p><p><img src="/images/QQ20170624131430.png" alt="QQ20170624131430.png"></p><blockquote><ul><li>打开cmd窗口输入<strong>arp -a</strong>，可以看到当前所有的网络接口</li></ul></blockquote><p><img src="/images/QQ20170624131608.png" alt="QQ20170624131608.png"></p><blockquote><ul><li>然后输入<strong>ipconfig</strong>，查看当前的具体ip情况，找到本地连接(以太网)的ip，然后ip对应下的网段就是rpi3开发板的ip</li></ul></blockquote><p><img src="/images/QQ20170624131748.png" alt="QQ20170624131748.png"></p><blockquote><ul><li>最后我们输入<strong>adb connect <ip></ip></strong>去连接设备，连接成功后，回显示成功信息，并输入<strong>adb shell</strong> 验证，可以看到显示的是<strong>rpi3</strong></li></ul></blockquote><p><img src="/images/QQ20170624132347.png" alt="QQ20170624132347.png"></p><p>参照以上的方式我们就成功的完成了adb连接到androidThings开发板,剩下的就和普通开发android一样了,通过Android Studio建立一个androidThings的项目, 成功的运行了第一个AndroidThings项目到开发板</p><p><img src="/images/Screenshot20170624192229.png" alt="Screenshot20170624192229.png"></p><p>点击一下返回按钮，就回到了桌面(后来我才知道这货居然就是launcher桌面)，可以看到最下面已经能显示具体的网络连接和IP地址了</p><p><img src="/images/Screenshot20170624192312.png" alt="Screenshot20170624192312.png"></p><blockquote><p>以上就是个人在入门androidThings时的笔记记录，如需转载，请注明出处，谢谢！</p></blockquote>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;  一直以来都知道有AndroidThings这个东西，之前也并未有时间去过多了解。可能是因为它是涉及到物联网相关的知识，个人主要做Android软件开发，对硬件也了解甚少，并且手上也没有开发板。最近兴趣来了，也就入手了一个开发板，毕竟作为Google的物联网系统，Android开发者也是有必要去了解一下AndroidThings&lt;/p&gt;
    
    </summary>
    
      <category term="Android" scheme="https://shoewann0402.github.io/categories/Android/"/>
    
      <category term="AndroidThings" scheme="https://shoewann0402.github.io/categories/Android/AndroidThings/"/>
    
      <category term="IoT" scheme="https://shoewann0402.github.io/categories/Android/AndroidThings/IoT/"/>
    
    
      <category term="android" scheme="https://shoewann0402.github.io/tags/android/"/>
    
      <category term="androidThings" scheme="https://shoewann0402.github.io/tags/androidThings/"/>
    
      <category term="rpi3" scheme="https://shoewann0402.github.io/tags/rpi3/"/>
    
  </entry>
  
  <entry>
    <title>WebView安全性的新功能</title>
    <link href="https://shoewann0402.github.io/2017/06/24/whats-new-in-webview-security/"/>
    <id>https://shoewann0402.github.io/2017/06/24/whats-new-in-webview-security/</id>
    <published>2017-06-24T06:27:49.000Z</published>
    <updated>2017-06-25T14:55:20.000Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>原文来自: <span class="exturl" data-url="aHR0cHM6Ly9hbmRyb2lkLWRldmVsb3BlcnMuZ29vZ2xlYmxvZy5jb20vMjAxNy8wNi93aGF0cy1uZXctaW4td2Vidmlldy1zZWN1cml0eS5odG1s" title="https://android-developers.googleblog.com/2017/06/whats-new-in-webview-security.html">What’s new in WebView security<i class="fa fa-external-link"></i></span></p></blockquote><p>应用程序中对于外部和不信任内容的处理经常是重要的功能之一。新闻阅读器显示头条新闻文章、购物应用展示销售物品的目录。作为处理不信任内容而带来的相关风险是一个攻击者能够损害您的应用程序主要的方式之一，即传递给你错误格式的内容。</p><a id="more"></a><p>大多数的应用程序使用<span class="exturl" data-url="aHR0cHM6Ly9kZXZlbG9wZXIuYW5kcm9pZC5jb20vcmVmZXJlbmNlL2FuZHJvaWQvd2Via2l0L1dlYlZpZXcuaHRtbA==" title="https://developer.android.com/reference/android/webkit/WebView.html">WebView<i class="fa fa-external-link"></i></span>来处理,并且我们在多年以来对Android做了很多改进,以此来保护它和你的应用程序抵抗妥协。Android棒棒糖(5.0),我们开始提供WebView作为一个单独的APK，每6周从Play商店更新升级，因此我们能够快速的获取到用户重要的修复。最新的WebView，我们添加了几个更重要的安全性增强功能。</p><h1 id="在Android-O中隔离渲染器进程"><a href="#在Android-O中隔离渲染器进程" class="headerlink" title="在Android O中隔离渲染器进程"></a>在Android O中隔离渲染器进程</h1><p>从Android O开始，WebView将会把渲染器从主应用中分离出来运行在一个隔离的进程中，Android通过利用进程之间的隔离被提供，已经可以用于其他应用。</p><p>与Chrome类似，WebView现在提供了两个等级的隔离：</p><blockquote><ul><li>渲染器引擎已经拆分到了一个分离的进程，主应用程序隔离了来源于渲染进程的错误或者奔溃。对于一个恶意网站使用渲染器去渲染主应用程序，使它变得更加困难。</li></ul></blockquote><p><img src="/images/webview-security-imgage1.png" alt="webview-security-imgage1"></p><blockquote><ul><li>对于进一步包含它，渲染器进程是运行在一个隔离进程沙箱里面，将其限制为有限的资源。比如说，渲染器引擎不能够写入到磁盘或者在它自己的网络上会话。正如Chrome在Android上所使用的一样，它也将绑定到相同的seccomp过滤器(seccomp的blogpost即将推出).sesccomp过滤器可以减少系统调用渲染器进程可以访问的次数，也能够限制系统调用允许的参数。</li></ul></blockquote><h1 id="结合安全浏览"><a href="#结合安全浏览" class="headerlink" title="结合安全浏览"></a>结合安全浏览</h1><p>WebView最新版本结合了Google的<span class="exturl" data-url="aHR0cHM6Ly9zYWZlYnJvd3NpbmcuZ29vZ2xlLmNvbS8=" title="https://safebrowsing.google.com/">安全浏览器<i class="fa fa-external-link"></i></span>保护去检测和警告用户关于有可能危险的站点……。当配置正确时，WebView针对安全浏览器恶意软件和网络钓鱼数据库检测网址，在用户访问一个危险的站点之前显示一个警告消息。在Chrome上，这个有用的信息每个月已经超过了2.5亿次被显示，现在它可以在Android上的WebView里使用了。</p><p><img src="/images/webview-security-imgage2.png" alt="webview-security-imgage2"></p><h1 id="启用安全浏览"><a href="#启用安全浏览" class="headerlink" title="启用安全浏览"></a>启用安全浏览</h1><p>对于在你的应用程序里面所有的WebViews启用安全浏览，在manifest节点下添加：<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">manifest</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">meta-data</span> <span class="attr">android:name</span>=<span class="string">"android.webkit.WebView.EnableSafeBrowsing"</span></span></span><br><span class="line"><span class="tag">                <span class="attr">android:value</span>=<span class="string">"true"</span> /&gt;</span></span><br><span class="line">      . . .</span><br><span class="line">     <span class="tag">&lt;<span class="name">application</span>&gt;</span> . . . <span class="tag">&lt;/<span class="name">application</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">manifest</span>&gt;</span></span><br></pre></td></tr></table></figure></p><p>因为WebView是作为一个单独的APK分发，WebView安全浏览对于运行在Android5.0及其以上的设备今天可以使用了，仅仅只需要在你的manifest添加一行代码，你就能够马上为你的大部分用户升级你的应用，并提高安全性。</p><blockquote><p>以上是对Anroid 官网博客文章的翻译，如果不足，欢迎指正，谢谢</p></blockquote>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;原文来自: &lt;a href=&quot;https://android-developers.googleblog.com/2017/06/whats-new-in-webview-security.html&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;What’s new in WebView security&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;应用程序中对于外部和不信任内容的处理经常是重要的功能之一。新闻阅读器显示头条新闻文章、购物应用展示销售物品的目录。作为处理不信任内容而带来的相关风险是一个攻击者能够损害您的应用程序主要的方式之一，即传递给你错误格式的内容。&lt;/p&gt;
    
    </summary>
    
      <category term="Android" scheme="https://shoewann0402.github.io/categories/Android/"/>
    
      <category term="Android O" scheme="https://shoewann0402.github.io/categories/Android/Android-O/"/>
    
      <category term="WebView" scheme="https://shoewann0402.github.io/categories/Android/Android-O/WebView/"/>
    
    
      <category term="AndroidO" scheme="https://shoewann0402.github.io/tags/AndroidO/"/>
    
      <category term="Security" scheme="https://shoewann0402.github.io/tags/Security/"/>
    
      <category term="Safe Browsing" scheme="https://shoewann0402.github.io/tags/Safe-Browsing/"/>
    
  </entry>
  
  <entry>
    <title>Android O API是最终的，让您的应用程序准备好！</title>
    <link href="https://shoewann0402.github.io/2017/06/09/android-o-apis-are-final-get-your-apps/"/>
    <id>https://shoewann0402.github.io/2017/06/09/android-o-apis-are-final-get-your-apps/</id>
    <published>2017-06-09T04:13:39.000Z</published>
    <updated>2017-06-09T12:36:07.000Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>原文来自: <span class="exturl" data-url="aHR0cHM6Ly9hbmRyb2lkLWRldmVsb3BlcnMuZ29vZ2xlYmxvZy5jb20vMjAxNy8wNi9hbmRyb2lkLW8tYXBpcy1hcmUtZmluYWwtZ2V0LXlvdXItYXBwcy5odG1s" title="https://android-developers.googleblog.com/2017/06/android-o-apis-are-final-get-your-apps.html">Android O APIs are final, get your apps ready!<i class="fa fa-external-link"></i></span></p></blockquote><p>在三周以前的Google I/O大会上，我们<span class="exturl" data-url="aHR0cHM6Ly9hbmRyb2lkLWRldmVsb3BlcnMuZ29vZ2xlYmxvZy5jb20vMjAxNy8wNS93aGF0cy1uZXctaW4tYW5kcm9pZC1vLWRldmVsb3Blci5odG1s" title="https://android-developers.googleblog.com/2017/05/whats-new-in-android-o-developer.html">宣布<i class="fa fa-external-link"></i></span>了Android O开发者预览版2，以及关键的主题<strong>Fluid Experiences和Vitals</strong>，并强调了我们通过<span class="exturl" data-url="aHR0cHM6Ly9hbmRyb2lkLWRldmVsb3BlcnMuZ29vZ2xlYmxvZy5jb20vMjAxNy8wNS9oZXJlLWNvbWVzLXRyZWJsZS1tb2R1bGFyLWJhc2UtZm9yLmh0bWw=" title="https://android-developers.googleblog.com/2017/05/here-comes-treble-modular-base-for.html">Project Treble<i class="fa fa-external-link"></i></span>实现模块化基础的工作。它也是我们发布第一个优质候选人的重要里程碑。我们在主题演讲和分组会议期间，谈论了大量关于Android有什么新的东西——如果你错过了直播流，<span class="exturl" data-url="aHR0cHM6Ly93d3cueW91dHViZS5jb20vdXNlci9hbmRyb2lkZGV2ZWxvcGVycy9wbGF5bGlzdHM/c29ydD1kZCZhbXA7dmlldz01MCZhbXA7c2hlbGZfaWQ9MTQ=" title="https://www.youtube.com/user/androiddevelopers/playlists?sort=dd&amp;view=50&amp;shelf_id=14">这里<i class="fa fa-external-link"></i></span>请务查看完整的会议档案。</p><a id="more"></a><p>今天我们将在最终Android O中推出开发者预览版3，最终的系统镜像，以及Android Studio的更新，以帮助你为今年夏季晚点推出消费者获取准备。观看即将在7月另一个预览更新，将带给你最接近最终版系统的镜像。</p><p>如果你已经在<span class="exturl" data-url="aHR0cDovL2FuZHJvaWQuY29tL2JldGE=" title="http://android.com/beta">Android Beta Program<i class="fa fa-external-link"></i></span>上面注册了你的设备，你将会在段时间内接收到一个开发者预览版3的更新。</p><h1 id="确保你的应用兼容到Android-O"><a href="#确保你的应用兼容到Android-O" class="headerlink" title="确保你的应用兼容到Android O"></a>确保你的应用兼容到Android O</h1><p>随着消费者<span class="exturl" data-url="aHR0cHM6Ly9kZXZlbG9wZXIuYW5kcm9pZC5jb20vcHJldmlldy9taWdyYXRpb24uaHRtbA==" title="https://developer.android.com/preview/migration.html">在接下来的几个月<i class="fa fa-external-link"></i></span>即将启动，关键的第一步就是确保你当前的应用兼容到了Android O,当Android O到达用户他们的设备是，可以然他们无缝的过渡到一个新的平台。</p><p>如果你还没有测试你的应用兼容性，开始使用很简单——仅仅是在Android Beta上面注册一个受支持的设备，通过云端OTA升级到最新版本，然后从Google Play 安装你当前的应用并测试它。 这个应用应该运行，并且看起来很棒，它应该适当的处理Android O的<span class="exturl" data-url="aHR0cHM6Ly9kZXZlbG9wZXIuYW5kcm9pZC5jb20vcHJldmlldy9iZWhhdmlvci1jaGFuZ2VzLmh0bWw=" title="https://developer.android.com/preview/behavior-changes.html">行为变化<i class="fa fa-external-link"></i></span> —— 特别要注意<span class="exturl" data-url="aHR0cHM6Ly9kZXZlbG9wZXIuYW5kcm9pZC5jb20vcHJldmlldy9iZWhhdmlvci1jaGFuZ2VzLmh0bWwjYWJsbA==" title="https://developer.android.com/preview/behavior-changes.html#abll">后台限制<i class="fa fa-external-link"></i></span>、<span class="exturl" data-url="aHR0cHM6Ly9kZXZlbG9wZXIuYW5kcm9pZC5jb20vcHJldmlldy9iZWhhdmlvci1jaGFuZ2VzLmh0bWwjbmV0d29ya2luZy1hbGw=" title="https://developer.android.com/preview/behavior-changes.html#networking-all">网络<i class="fa fa-external-link"></i></span>、<span class="exturl" data-url="aHR0cHM6Ly9kZXZlbG9wZXIuYW5kcm9pZC5jb20vcHJldmlldy9iZWhhdmlvci1jaGFuZ2VzLmh0bWwjc2VjdXJpdHktYWxs" title="https://developer.android.com/preview/behavior-changes.html#security-all">安全<i class="fa fa-external-link"></i></span>和<span class="exturl" data-url="aHR0cHM6Ly9kZXZlbG9wZXIuYW5kcm9pZC5jb20vcHJldmlldy9iZWhhdmlvci1jaGFuZ2VzLmh0bWwjcHJpdmFjeS1hbGw=" title="https://developer.android.com/preview/behavior-changes.html#privacy-all">标示符<i class="fa fa-external-link"></i></span>的变化</p><p>你将会完成任何必要的更新之后，我们建议您立即将兼容版本的应用发布到Google Play —— 而无需更改应用的平台目标</p><h1 id="使用Android-O功能和API来增强您的应用程序"><a href="#使用Android-O功能和API来增强您的应用程序" class="headerlink" title="使用Android O功能和API来增强您的应用程序"></a>使用Android O功能和API来增强您的应用程序</h1><p>通过Android O的功能扩展你的应用，能帮助你驱动更多的参与，提供新的互动，给你的用户更多控制和安全，甚至提高你的应用的性能。</p><p><span class="exturl" data-url="aHR0cHM6Ly9kZXZlbG9wZXIuYW5kcm9pZC5jb20vcHJldmlldy9mZWF0dXJlcy9ub3RpZmljYXRpb24tY2hhbm5lbHMuaHRtbA==" title="https://developer.android.com/preview/features/notification-channels.html">通知渠道<i class="fa fa-external-link"></i></span>和<span class="exturl" data-url="aHR0cHM6Ly9kZXZlbG9wZXIuYW5kcm9pZC5jb20vcHJldmlldy9mZWF0dXJlcy9ub3RpZmljYXRpb24tYmFkZ2VzLmh0bWw=" title="https://developer.android.com/preview/features/notification-badges.html">点<i class="fa fa-external-link"></i></span>给你更多的方式去为你的用户表达新的内容，带领它们返回到你的应用里面去。当用户是多个任务的时候，画中画能够让你的应用保持在屏幕上，<span class="exturl" data-url="aHR0cHM6Ly9kZXZlbG9wZXIuYW5kcm9pZC5jb20vcHJldmlldy9mZWF0dXJlcy9hdXRvZmlsbC5odG1sI29wdGltaXppbmdfeW91cl9hcHBfZm9yX2F1dG9maWxs" title="https://developer.android.com/preview/features/autofill.html#optimizing_your_app_for_autofill">自动填充<i class="fa fa-external-link"></i></span>使他们简单的输入表单数据，并帮助保持他们的数据安全。还可以检出<span class="exturl" data-url="aHR0cHM6Ly9kZXZlbG9wZXIuYW5kcm9pZC5jb20vcHJldmlldy9mZWF0dXJlcy9hZGFwdGl2ZS1pY29ucy5odG1s" title="https://developer.android.com/preview/features/adaptive-icons.html">自适应图标<i class="fa fa-external-link"></i></span>、<span class="exturl" data-url="aHR0cHM6Ly9kZXZlbG9wZXIuYW5kcm9pZC5jb20vcHJldmlldy9mZWF0dXJlcy9mb250cy1pbi14bWwuaHRtbA==" title="https://developer.android.com/preview/features/fonts-in-xml.html">XML字体资源<i class="fa fa-external-link"></i></span>、<span class="exturl" data-url="aHR0cHM6Ly9kZXZlbG9wZXIuYW5kcm9pZC5jb20vcHJldmlldy9mZWF0dXJlcy9kb3dubG9hZGFibGUtZm9udHMuaHRtbA==" title="https://developer.android.com/preview/features/downloadable-fonts.html">可下载字体<i class="fa fa-external-link"></i></span>、<span class="exturl" data-url="aHR0cHM6Ly9kZXZlbG9wZXIuYW5kcm9pZC5jb20vcHJldmlldy9mZWF0dXJlcy9lbW9qaS1jb21wYXQuaHRtbA==" title="https://developer.android.com/preview/features/emoji-compat.html">emoji表情<i class="fa fa-external-link"></i></span>、<span class="exturl" data-url="aHR0cHM6Ly9kZXZlbG9wZXIuYW5kcm9pZC5jb20vcHJldmlldy9mZWF0dXJlcy9hdXRvc2l6aW5nLXRleHR2aWV3Lmh0bWw=" title="https://developer.android.com/preview/features/autosizing-textview.html">自动大小TextView<i class="fa fa-external-link"></i></span>、<span class="exturl" data-url="aHR0cHM6Ly9kZXZlbG9wZXIuYW5kcm9pZC5jb20vbmRrL2d1aWRlcy9hdWRpby9hYXVkaW8vYWF1ZGlvLmh0bWw=" title="https://developer.android.com/ndk/guides/audio/aaudio/aaudio.html">AAudio API<i class="fa fa-external-link"></i></span>和<span class="exturl" data-url="aHR0cHM6Ly9kZXZlbG9wZXIuYW5kcm9pZC5jb20vcHJldmlldy9hcGktb3ZlcnZpZXcuaHRtbA==" title="https://developer.android.com/preview/api-overview.html">很多其他的<i class="fa fa-external-link"></i></span>.您还需要计划支持<span class="exturl" data-url="aHR0cHM6Ly9kZXZlbG9wZXIuYW5kcm9pZC5jb20vcHJldmlldy9mZWF0dXJlcy9iYWNrZ3JvdW5kLmh0bWw=" title="https://developer.android.com/preview/features/background.html">后台执行限制<i class="fa fa-external-link"></i></span>以及<span class="exturl" data-url="aHR0cHM6Ly9kZXZlbG9wZXIuYW5kcm9pZC5jb20vcHJldmlldy9iZWhhdmlvci1jaGFuZ2VzLmh0bWwjby1hcHBz" title="https://developer.android.com/preview/behavior-changes.html#o-apps">对于O应用程序重要系统行为的其他重要更改<i class="fa fa-external-link"></i></span>。</p><p>访问<span class="exturl" data-url="aHR0cHM6Ly9kZXZlbG9wZXIuYW5kcm9pZC5jb20vcHJldmlldy9pbmRleC5odG1s" title="https://developer.android.com/preview/index.html">O 开发者预览版站点<i class="fa fa-external-link"></i></span>去学习有关所有的新功能和APIs，以及如何编译它们到你的应用</p><p><img src="/images/Duo_PiP_500px.gif" alt="Duo_PiP_500px"></p><p><img src="/images/instagram_dot_500px_bestcolors .gif" alt="instagram_dot_500px_bestcolors"></p><center>画中画模式可让用户在多任务时保持使用（上）。通知点让用户在您的应用程序中处于活动状态，并让他们直接跳转应用程序的核心功能（下）。</center><h1 id="开始获取开发者预览版3"><a href="#开始获取开发者预览版3" class="headerlink" title="开始获取开发者预览版3"></a>开始获取开发者预览版3</h1><p>今天的预览版升级包括最终版本的android O平台，最终的API Level 26和上百个bug的修复、优化。你能够从<span class="exturl" data-url="aHR0cHM6Ly9kZXZlbG9wZXIuYW5kcm9pZC5jb20vc3R1ZGlvL2luZGV4Lmh0bWw=" title="https://developer.android.com/studio/index.html">Android Studio<i class="fa fa-external-link"></i></span>里面的SDK管理器下载最终的API26 SDK和从<span class="exturl" data-url="aHR0cHM6Ly9kZXZlbG9wZXIuYW5kcm9pZC5jb20vc3R1ZGlvL2J1aWxkL2RlcGVuZGVuY2llcy5odG1sI2dvb2dsZS1tYXZlbg==" title="https://developer.android.com/studio/build/dependencies.html#google-maven">Google的Maven库<i class="fa fa-external-link"></i></span>下载<span class="exturl" data-url="aHR0cHM6Ly9kZXZlbG9wZXIuYW5kcm9pZC5jb20vdG9waWMvbGlicmFyaWVzL3N1cHBvcnQtbGlicmFyeS9yZXZpc2lvbnMuaHRtbA==" title="https://developer.android.com/topic/libraries/support-library/revisions.html">Android支持库<i class="fa fa-external-link"></i></span>26.0.0beta2。</p><p>通过这些官方Android O API，您可以一起为您开发和测试应用程序所需的一切。一旦你安装了最终版的SDK，你能够升级你的项目的<em>compileSdkVersion</em>到API 26去针对官方Android O API进行编译。我们也建议你升级你的应用的<em>targetSdkVersion</em>到API26去选择和测试您的应用程序与Android O具体<span class="exturl" data-url="aHR0cHM6Ly9kZXZlbG9wZXIuYW5kcm9pZC5jb20vcHJldmlldy9iZWhhdmlvci1jaGFuZ2VzLmh0bWw=" title="https://developer.android.com/preview/behavior-changes.html">行为更改<i class="fa fa-external-link"></i></span>。有关如何设置使用Android O构建环境的详细信息，请参阅<span class="exturl" data-url="aHR0cHM6Ly9kZXZlbG9wZXIuYW5kcm9pZC5jb20vcHJldmlldy9taWdyYXRpb24uaHRtbCNiZmE=" title="https://developer.android.com/preview/migration.html#bfa">迁移指南<i class="fa fa-external-link"></i></span>。</p><p>APIs自从第二个开发者预览版就有改变的，所以如果你有存在的代码使用了Android O预览版的API，看看<span class="exturl" data-url="aHR0cHM6Ly9kZXZlbG9wZXIuYW5kcm9pZC5jb20vc2RrL2FwaV9kaWZmLzI2LWluY3IvY2hhbmdlcy5odG1s" title="https://developer.android.com/sdk/api_diff/26-incr/changes.html">diff报告<i class="fa fa-external-link"></i></span>，看看你的代码哪儿可能会受到影响。</p><p>如果你将使用Android O进行开发，我们建议你升级到最终版本的<span class="exturl" data-url="aHR0cHM6Ly9hbmRyb2lkLWRldmVsb3BlcnMuZ29vZ2xlYmxvZy5jb20vMjAxNy8wNS9hbmRyb2lkLXN0dWRpby0zLTAtY2FuYXJ5MS5odG1s" title="https://android-developers.googleblog.com/2017/05/android-studio-3-0-canary1.html">Android Studio 3.0<i class="fa fa-external-link"></i></span>，现在canary(金丝雀)通道可以使用，除了像提高应用性能的profilling工具、对<span class="exturl" data-url="aHR0cDovL2FuZHJvaWQtZGV2ZWxvcGVycy5nb29nbGVibG9nLmNvbS8yMDE3LzA1L2FuZHJvaWQtYW5ub3VuY2VzLXN1cHBvcnQtZm9yLWtvdGxpbi5odG1s" title="http://android-developers.googleblog.com/2017/05/android-announces-support-for-kotlin.html">Kotlin程序语言<i class="fa fa-external-link"></i></span>的支持和Gradle构建优化等伟大的新功能，Android Studio 3.0包括了对<span class="exturl" data-url="aHR0cHM6Ly9hbmRyb2lkLWRldmVsb3BlcnMuZ29vZ2xlYmxvZy5jb20vMjAxNy8wNS9hbmRyb2lkLWluc3RhbnQtYXBwcy1pcy1vcGVuLXRvLWFsbC5odG1s" title="https://android-developers.googleblog.com/2017/05/android-instant-apps-is-open-to-all.html">即时应用<i class="fa fa-external-link"></i></span>、<span class="exturl" data-url="aHR0cHM6Ly9kZXZlbG9wZXIuYW5kcm9pZC5jb20vcHJldmlldy9mZWF0dXJlcy9hZGFwdGl2ZS1pY29ucy5odG1s" title="https://developer.android.com/preview/features/adaptive-icons.html">自适应图标向导<i class="fa fa-external-link"></i></span>，以及对<span class="exturl" data-url="aHR0cHM6Ly9kZXZlbG9wZXIuYW5kcm9pZC5jb20vcHJldmlldy9mZWF0dXJlcy93b3JraW5nLXdpdGgtZm9udHMuaHRtbA==" title="https://developer.android.com/preview/features/working-with-fonts.html">XML字体<i class="fa fa-external-link"></i></span>和<span class="exturl" data-url="aHR0cHM6Ly9kZXZlbG9wZXIuYW5kcm9pZC5jb20vcHJldmlldy9mZWF0dXJlcy9kb3dubG9hZGFibGUtZm9udHMuaHRtbA==" title="https://developer.android.com/preview/features/downloadable-fonts.html">可下载字体<i class="fa fa-external-link"></i></span>的支持。</p><p><img src="/images/ScreenShot2017-05-16at6.00.17PM.png" alt="Screen Shot 2017-05-16 at 6.00.17 PM.png"></p><center>Android Studio 3.0包括使用Android O功能开发的工具，可让您在应用程序中预览XML字体资源。</center><p>如果你不计划使用这些新功能，您现在可以选择使用稳定通道的<span class="exturl" data-url="aHR0cHM6Ly9kZXZlbG9wZXIuYW5kcm9pZC5jb20vc3R1ZGlvL2luZGV4Lmh0bWw=" title="https://developer.android.com/studio/index.html">Android Studio 2.3.3<i class="fa fa-external-link"></i></span>开发Android O。请注意，使用自适应图标和可下载字体的工具以及XML字体在Android Studio 2.3.3中不可用。</p><h1 id="将您的应用发布到Google-Play中的Alpha，Beta或制作频道"><a href="#将您的应用发布到Google-Play中的Alpha，Beta或制作频道" class="headerlink" title="将您的应用发布到Google Play中的Alpha，Beta或制作频道"></a>将您的应用发布到Google Play中的Alpha，Beta或制作频道</h1><p>现在API是最终的，您可以发布APK更新编译，并可选择定位，API 26适用于您在Google Play中的alpha，beta或甚至制作频道。在预览过程中发布O目标应用程序可让您测试现有设备的兼容性，并将更新推送到运行API 26的设备，例如注册Android测试版的用户。</p><p>为了确保您更新的应用程序在Android O以及旧版本上运行良好，一个常见的策略是使用Google Play的beta测试功能，从一小群用户（包括开发者预览用户）获取早期反馈，然后在向所有用户发布更新的应用程序时进行分阶段推出。</p><h1 id="如何获得预览更新"><a href="#如何获得预览更新" class="headerlink" title="如何获得预览更新"></a>如何获得预览更新</h1><p>通过<span class="exturl" data-url="aHR0cHM6Ly9kZXZlbG9wZXIuYW5kcm9pZC5jb20vZGlzdHJpYnV0ZS9lbmdhZ2UvYmV0YS5odG1s" title="https://developer.android.com/distribute/engage/beta.html">Android Beta Program<i class="fa fa-external-link"></i></span>，开发人员和早期采用者将很快在其设备上获得开发者预览版3。如果您尚未注册，只需访问<span class="exturl" data-url="aHR0cHM6Ly9hbmRyb2lkLmNvbS9iZXRh" title="https://android.com/beta">android.com/beta<i class="fa fa-external-link"></i></span>并选择符合条件的Android手机或平板电脑。一如以往，您也可以手动下载并<span class="exturl" data-url="aHR0cHM6Ly9kZXZlbG9wZXIuYW5kcm9pZC5jb20vcHJldmlldy9kb3dubG9hZC5odG1sI2ZsYXNo" title="https://developer.android.com/preview/download.html#flash">刷入此更新<i class="fa fa-external-link"></i></span>。 O开发者预览版可用于Pixel，Pixel XL，Pixel C，Nexus 5X，Nexus 6P和Nexus Player。</p><p>非常感谢您的所有反馈。我们今年夏天将在消费者发布工作中继续分享<span class="exturl" data-url="aHR0cHM6Ly9kZXZlbG9wZXIuYW5kcm9pZC5jb20vcHJldmlldy9mZWVkYmFjay5odG1s" title="https://developer.android.com/preview/feedback.html">反馈或请求<i class="fa fa-external-link"></i></span>。我们期待在Android O上看到您的应用程序！</p>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;原文来自: &lt;a href=&quot;https://android-developers.googleblog.com/2017/06/android-o-apis-are-final-get-your-apps.html&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Android O APIs are final, get your apps ready!&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;在三周以前的Google I/O大会上，我们&lt;a href=&quot;https://android-developers.googleblog.com/2017/05/whats-new-in-android-o-developer.html&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;宣布&lt;/a&gt;了Android O开发者预览版2，以及关键的主题&lt;strong&gt;Fluid Experiences和Vitals&lt;/strong&gt;，并强调了我们通过&lt;a href=&quot;https://android-developers.googleblog.com/2017/05/here-comes-treble-modular-base-for.html&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Project Treble&lt;/a&gt;实现模块化基础的工作。它也是我们发布第一个优质候选人的重要里程碑。我们在主题演讲和分组会议期间，谈论了大量关于Android有什么新的东西——如果你错过了直播流，&lt;a href=&quot;https://www.youtube.com/user/androiddevelopers/playlists?sort=dd&amp;amp;view=50&amp;amp;shelf_id=14&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;这里&lt;/a&gt;请务查看完整的会议档案。&lt;/p&gt;
    
    </summary>
    
      <category term="Android" scheme="https://shoewann0402.github.io/categories/Android/"/>
    
      <category term="Android O" scheme="https://shoewann0402.github.io/categories/Android/Android-O/"/>
    
      <category term="Android Studio" scheme="https://shoewann0402.github.io/categories/Android/Android-O/Android-Studio/"/>
    
      <category term="Google I/O 2017" scheme="https://shoewann0402.github.io/categories/Android/Android-O/Android-Studio/Google-I-O-2017/"/>
    
    
      <category term="Android O" scheme="https://shoewann0402.github.io/tags/Android-O/"/>
    
      <category term="Develop" scheme="https://shoewann0402.github.io/tags/Develop/"/>
    
      <category term="Featured" scheme="https://shoewann0402.github.io/tags/Featured/"/>
    
      <category term="android o apis" scheme="https://shoewann0402.github.io/tags/android-o-apis/"/>
    
      <category term="AndroidO" scheme="https://shoewann0402.github.io/tags/AndroidO/"/>
    
      <category term="API" scheme="https://shoewann0402.github.io/tags/API/"/>
    
      <category term="Developer Preview" scheme="https://shoewann0402.github.io/tags/Developer-Preview/"/>
    
      <category term="Project Treble" scheme="https://shoewann0402.github.io/tags/Project-Treble/"/>
    
  </entry>
  
  <entry>
    <title>Android 宣布支持Kotlin</title>
    <link href="https://shoewann0402.github.io/2017/05/19/android-announces-support-for-kotlin/"/>
    <id>https://shoewann0402.github.io/2017/05/19/android-announces-support-for-kotlin/</id>
    <published>2017-05-19T05:40:56.000Z</published>
    <updated>2017-05-19T07:31:35.000Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>原文来自: <span class="exturl" data-url="aHR0cHM6Ly9hbmRyb2lkLWRldmVsb3BlcnMuZ29vZ2xlYmxvZy5jb20vMjAxNy8wNS9hbmRyb2lkLWFubm91bmNlcy1zdXBwb3J0LWZvci1rb3RsaW4uaHRtbA==" title="https://android-developers.googleblog.com/2017/05/android-announces-support-for-kotlin.html">Android Announces Support for Kotlin<i class="fa fa-external-link"></i></span></p></blockquote><p>  今天，Android团队很高兴地宣布，我们正式增加对<span class="exturl" data-url="aHR0cHM6Ly9rb3RsaW5sYW5nLm9yZy8=" title="https://kotlinlang.org/">Kotlin<i class="fa fa-external-link"></i></span>编程语言的支持。Kotlin是一种精湛的设计，成熟的语言，我们相信会使Android开发更快更有趣。它已被几个主要开发商采用 —— Expedia，Flipboard，Pinterest，Square等 —— 为他们的生产应用程序。Kotlin也用Java编程语言表现出色;两种语言之间的毫不费力的互操作是在Kotlin的呼吁中占很大一部分。</p><a id="more"></a><p>Kotlin插件现在与Android Studio 3.0捆绑在一起，可立即下载。Kotlin是由JetBrains开发的,和创造IntelliJ是同一些人。所以对于IDE支持科Kotlin来说，并不奇怪。</p><p>除了IDE支持之外，我们还宣布与JetBrains进行合作，将Kotlin推向非盈利基础。 （Kotlin已经在Apache2下开源了）</p><h1 id="对Kotlin说”你好”"><a href="#对Kotlin说”你好”" class="headerlink" title="对Kotlin说”你好”"></a>对Kotlin说”你好”</h1><p>任何使用Java编程语言的人都很熟悉Kotlin。<br><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> helloWorld</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">main</span><span class="params">(args: <span class="type">Array</span>)</span></span> &#123;</span><br><span class="line">   println(<span class="string">"Hello World!"</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>乍一看，你会看到舒适的元素，如大括号，类，包，功能和方法。你会发现，虽然Kotlin是基于熟悉的概念，在这些模型上，它是独一无二的现代化，优雅和务实的。特别地是，Kotlin具有极高的表现力，最小的句法摩擦你的想法和你必须输入什么才能表达这些想法之间。如果在编写代码的时候，你问自己的问题，那就是为什么我必须…？你会很高兴地得知，在Kotlin，许多这些问题的答案是“你不要！”</p><p>例如，也许你已经问为什么要在实现一个简单的类时，要输入一堆getter和setter的样板，以及重写equals（）、hashCode（）和toString（）。以下是Java编程语言的典型示例（为了简洁起见，用微小的字体）。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Customer</span> </span>&#123;</span><br><span class="line">   <span class="keyword">private</span> String name;</span><br><span class="line">   <span class="keyword">private</span> String email;</span><br><span class="line">   <span class="keyword">private</span> String company;</span><br><span class="line"></span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="title">Customer</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">       <span class="keyword">this</span>(name, <span class="string">""</span>, <span class="string">""</span>);</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="title">Customer</span><span class="params">(String name, String email)</span> </span>&#123;</span><br><span class="line">       <span class="keyword">this</span>(name, email, <span class="string">""</span>);</span><br><span class="line"></span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="title">Customer</span><span class="params">(String name, String email, String company)</span> </span>&#123;</span><br><span class="line">       <span class="keyword">this</span>.name = name;</span><br><span class="line">       <span class="keyword">this</span>.email = email;</span><br><span class="line">       <span class="keyword">this</span>.company = company;</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span> </span>&#123;</span><br><span class="line">       <span class="keyword">return</span> name;</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setName</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">       <span class="keyword">this</span>.name = name;</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="function"><span class="keyword">public</span> String <span class="title">getEmail</span><span class="params">()</span> </span>&#123;</span><br><span class="line">       <span class="keyword">return</span> email;</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setEmail</span><span class="params">(String email)</span> </span>&#123;</span><br><span class="line">       <span class="keyword">this</span>.email = email;</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="function"><span class="keyword">public</span> String <span class="title">getCompany</span><span class="params">()</span> </span>&#123;</span><br><span class="line">       <span class="keyword">return</span> company;</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setCompany</span><span class="params">(String company)</span> </span>&#123;</span><br><span class="line">       <span class="keyword">this</span>.company = company;</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="meta">@Override</span></span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">equals</span><span class="params">(Object o)</span> </span>&#123;</span><br><span class="line">       <span class="keyword">if</span> (<span class="keyword">this</span> == o) <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">       <span class="keyword">if</span> (o == <span class="keyword">null</span> || getClass() != o.getClass()) <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line"></span><br><span class="line">       Customer customer = (Customer) o;</span><br><span class="line"></span><br><span class="line">       <span class="keyword">if</span> (name != <span class="keyword">null</span> ? !name.equals(customer.name) : customer.name != <span class="keyword">null</span>) <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">       <span class="keyword">if</span> (email != <span class="keyword">null</span> ? !email.equals(customer.email) : customer.email != <span class="keyword">null</span>) <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">       <span class="keyword">return</span> company != <span class="keyword">null</span> ? company.equals(customer.company) : customer.company == <span class="keyword">null</span>;</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="meta">@Override</span></span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">hashCode</span><span class="params">()</span> </span>&#123;</span><br><span class="line">       <span class="keyword">int</span> result = name != <span class="keyword">null</span> ? name.hashCode() : <span class="number">0</span>;</span><br><span class="line">       result = <span class="number">31</span> * result + (email != <span class="keyword">null</span> ? email.hashCode() : <span class="number">0</span>);</span><br><span class="line">       result = <span class="number">31</span> * result + (company != <span class="keyword">null</span> ? company.hashCode() : <span class="number">0</span>);</span><br><span class="line">       <span class="keyword">return</span> result;</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="meta">@Override</span></span><br><span class="line">   <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line">       <span class="keyword">return</span> <span class="string">"Customer&#123;"</span> +</span><br><span class="line">               <span class="string">"name='"</span> + name + <span class="string">'\''</span> +</span><br><span class="line">               <span class="string">", email='"</span> + email + <span class="string">'\''</span> +</span><br><span class="line">               <span class="string">", company='"</span> + company + <span class="string">'\''</span> +</span><br><span class="line">               <span class="string">'&#125;'</span>;</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在Kotlin中，你没必要键入任何一个，这一行相当于上面的整个类。</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">data</span> <span class="class"><span class="keyword">class</span> <span class="title">Customer</span></span>(<span class="keyword">var</span> name: String, <span class="keyword">var</span> email: String = <span class="string">""</span>,</span><br><span class="line">                    <span class="keyword">var</span> company: String = <span class="string">""</span>)</span><br></pre></td></tr></table></figure><h1 id="历史与参考"><a href="#历史与参考" class="headerlink" title="历史与参考"></a>历史与参考</h1><p>Kotlin已经有了一段时间了，它在2011年被公布，第一个预览于2012年发布。Kotlin 1.0于2016年发布，从1.0开始前进，JetBrains致力于保持向前兼容性稳定的功能。</p><p>你可以在<span class="exturl" data-url="aHR0cHM6Ly9rb3RsaW5sYW5nLm9yZy8=" title="https://kotlinlang.org/">https://kotlinlang.org/<i class="fa fa-external-link"></i></span>找到优秀的培训材料和参考资料,Android团队发现Kotlin Koans教程作为开始编写Kotlin片段的一种快速方式是特别有用的。这些教程的范围从简单到崇高，因为材料从基础到更复杂的Kotlin成语。</p><h1 id="为什么选择Kotlin？"><a href="#为什么选择Kotlin？" class="headerlink" title="为什么选择Kotlin？"></a>为什么选择Kotlin？</h1><p>为什么Android团队决定支持Kotlin？最重要的是，因为我们认为Kotlin是一种伟大的语言，将使Android应用程序更轻松，更愉快。<br>Kotlin也是现有Android生态系统的绝佳搭档，它与Java编程语言100％兼容。您可以根据需要将Kotlin添加到现有的代码库中，并在同一个项目中自由混合两种语言。从使用Java编程语言Just Works™编写的代码调用Kotlin代码。通过一些应用自动翻译的惯例，通过其他方向通常也不需要开发人员的努力(例如，为您创建的属性getter和setter等)。在几个Kotlin注释的帮助下，您还可以自定义如何执行翻译。</p><p>最后，许多开发人员告诉我们，他们喜欢Kotlin语言。 （我们许多Android团队的开发人员也一直在说类似的东西。）已经有一个热衷于Android的Kotlin<span class="exturl" data-url="aHR0cHM6Ly9rb3RsaW4ubGluay9hcnRpY2xlcy9DaHJpc3RpbmEtTGVlLUtvdGxpbi1pbi1Qcm9kdWN0aW9uLmh0bWw=" title="https://kotlin.link/articles/Christina-Lee-Kotlin-in-Production.html">开发人员<i class="fa fa-external-link"></i></span><span class="exturl" data-url="aHR0cHM6Ly9tLnNpZ25hbHZub2lzZS5jb20vaG93LWktZmVsbC1pbi1sb3ZlLXdpdGgtYS1wcm9ncmFtbWluZy1sYW5ndWFnZS04OTMzZDVlNzQ5ZWQ=" title="https://m.signalvnoise.com/how-i-fell-in-love-with-a-programming-language-8933d5e749ed">社区<i class="fa fa-external-link"></i></span>，Android团队在公开活动中常常对Kotlin提出疑问。Android社区已经发言了，我们听了。</p><h1 id="一次快速旅程"><a href="#一次快速旅程" class="headerlink" title="一次快速旅程"></a>一次快速旅程</h1><p>为了帮助您了解Kotlin周围的所有兴奋之处，这里是一次快速的、非常不完整的、特别吸引人的方面的Kotlin旅程：</p><h2 id="可空"><a href="#可空" class="headerlink" title="可空"></a>可空</h2><p>Kotlin编译器强制可以显式声明可以保存空值的变量 —— 因此在运行时<strong>不再有NullPointerExceptions！</strong></p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> neverNull: String = <span class="string">"something"</span></span><br><span class="line"><span class="keyword">var</span> mightBeNull: String? = <span class="literal">null</span> <span class="comment">// "?" indicates this can be null</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (neverNull.length &gt; <span class="number">0</span>) &#123;   <span class="comment">// This is OK</span></span><br><span class="line">    …</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (mightBeNull.length &gt; <span class="number">0</span>) &#123; <span class="comment">// Compiler catches this error for you</span></span><br><span class="line">    …</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="命名参数和默认参数"><a href="#命名参数和默认参数" class="headerlink" title="命名参数和默认参数"></a>命名参数和默认参数</h2><p>我们都看到有太多参数的方法来跟踪。例如：</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">orderPizza</span><span class="params">(size: <span class="type">Size</span>, pepperoni: <span class="type">Boolean</span>, mushrooms: <span class="type">Boolean</span>,</span></span></span><br><span class="line"><span class="function"><span class="params">               ham: <span class="type">Boolean</span>, pineapple: <span class="type">Boolean</span>, pickles: <span class="type">Boolean</span>,</span></span></span><br><span class="line"><span class="function"><span class="params">               sausage: <span class="type">Boolean</span>, peppers: <span class="type">Boolean</span>, onion: <span class="type">Boolean</span>)</span></span></span><br><span class="line">&#123;</span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Wait… did I just order pickles on my pizza?</span></span><br><span class="line"><span class="comment">// Why do we even have that option?</span></span><br><span class="line">orderPizza(Size.LARGE, <span class="literal">true</span>, <span class="literal">false</span>, <span class="literal">false</span>, <span class="literal">false</span>, <span class="literal">true</span>,</span><br><span class="line">           <span class="literal">false</span>, <span class="literal">true</span>, <span class="literal">false</span>)</span><br></pre></td></tr></table></figure><p>将其与使用命名参数和默认参数的类似方案进行比较:<br><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">orderPizza</span><span class="params">(size: <span class="type">Size</span>,</span></span></span><br><span class="line"><span class="function"><span class="params">               pepperoni: <span class="type">Boolean</span> = <span class="literal">false</span>,</span></span></span><br><span class="line"><span class="function"><span class="params">               mushrooms: <span class="type">Boolean</span> = <span class="literal">false</span>,</span></span></span><br><span class="line"><span class="function"><span class="params">               ham: <span class="type">Boolean</span> = <span class="literal">false</span>,</span></span></span><br><span class="line"><span class="function"><span class="params">               pineapple: <span class="type">Boolean</span> = <span class="literal">false</span>,</span></span></span><br><span class="line"><span class="function"><span class="params">               pickles: <span class="type">Boolean</span> = <span class="literal">false</span>,</span></span></span><br><span class="line"><span class="function"><span class="params">               sausage: <span class="type">Boolean</span> = <span class="literal">false</span>,</span></span></span><br><span class="line"><span class="function"><span class="params">               peppers: <span class="type">Boolean</span> = <span class="literal">false</span>,</span></span></span><br><span class="line"><span class="function"><span class="params">               onion: <span class="type">Boolean</span> = <span class="literal">false</span>)</span></span></span><br><span class="line">&#123;</span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">orderPizza(Size.LARGE, ham = <span class="literal">true</span>, mushrooms = <span class="literal">true</span>)</span><br></pre></td></tr></table></figure></p><p>除了帮助避免不幸的比萨结果之外，这更容易阅读。它还减少了您需要编写的重载功能的变体数量。</p><h2 id="当声明"><a href="#当声明" class="headerlink" title="当声明"></a>当声明</h2><p>Kotlin具有允许匹配任意表达式的switch语句的变体。<br><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Please don't put this in your app!</span></span><br><span class="line"><span class="keyword">when</span> &#123;</span><br><span class="line">    password.equals(<span class="string">"password"</span>) -&gt; println(<span class="string">"Insecure password!"</span>)</span><br><span class="line">    password.length &lt; <span class="number">4</span> -&gt; println(<span class="string">"Too short!"</span>)</span><br><span class="line">    <span class="keyword">else</span> -&gt; &#123;</span><br><span class="line">        println(<span class="string">"Secure password!"</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h2 id="智能铸造"><a href="#智能铸造" class="headerlink" title="智能铸造"></a>智能铸造</h2><p>在你刚刚测试它是该类的一个实例之后，为什么你必须在一个类上投下一些东西？在kotlin，你不必这样做了。</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (obj <span class="keyword">is</span> String) &#123;</span><br><span class="line">    <span class="comment">// Compiler casts obj to a String for you.</span></span><br><span class="line">    <span class="comment">// (Would work with &amp;&amp; instead of nested ifs too.)</span></span><br><span class="line">    <span class="keyword">if</span> (obj.length &gt; <span class="number">0</span>) &#123;</span><br><span class="line">        …</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这也概括为when语句：</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Assume reasonable implementations of Cat and Dog</span></span><br><span class="line"><span class="keyword">when</span> (obj) &#123;</span><br><span class="line">   <span class="keyword">is</span> Cat -&gt; obj.meow(...)</span><br><span class="line">   <span class="keyword">is</span> Dog -&gt; obj.woof(...)</span><br><span class="line">   <span class="keyword">else</span> -&gt; &#123;</span><br><span class="line">        …</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="扩展功能"><a href="#扩展功能" class="headerlink" title="扩展功能"></a>扩展功能</h2><p>Kotlin让您基本上将新方法重新定位到现有的类型上,如果像许多人一样，希望String类有一个toPigLatin方法。您现在可以自行添加它，而无需创建一个新的帮助器类来包装String或者在语言委员会中服务的麻烦：<br><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// The "String." prefix indicates that this method should</span></span><br><span class="line"><span class="comment">// extend the existing String class</span></span><br><span class="line"><span class="function"><span class="keyword">fun</span> String.<span class="title">toPigLatin</span><span class="params">()</span></span> : String &#123;</span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">val</span> plainOldString : String = <span class="string">"some text"</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// Can now call toPigLatin as if were a method on String</span></span><br><span class="line">println(plainOldString.toPigLatin())</span><br><span class="line"></span><br><span class="line"><span class="comment">// Or:</span></span><br><span class="line">println(<span class="string">"some text"</span>.toPigLatin())</span><br></pre></td></tr></table></figure></p><h2 id="解构定义"><a href="#解构定义" class="headerlink" title="解构定义"></a>解构定义</h2><p>我们已经看到定义一个简单的数据类是多么容易：</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">data</span> <span class="class"><span class="keyword">class</span> <span class="title">Order</span></span>(<span class="keyword">val</span> itemCode: String, <span class="keyword">val</span> quantity: <span class="built_in">Int</span>,</span><br><span class="line">                 <span class="keyword">val</span> price: <span class="built_in">Float</span>)</span><br></pre></td></tr></table></figure><p>使用这些类之一作为返回类型的函数非常接近于支持多个返回值：</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">getOrder</span><span class="params">(...)</span></span>: Order &#123;</span><br><span class="line">    ...</span><br><span class="line">    <span class="keyword">return</span> Order(itemCode, quantity, price);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>要得到所有的方法，您可以使用解构声明语法。以下语句接受Order对象，提取其三个属性，然后将它们分配给三个变量:what, howMany 和 howMuch 。<br> —— 所有礼貌的Kotlin编译器，这也为您推荐正确的类型。</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">val</span> (what, howMany, howMuch) = getOrder(...)</span><br></pre></td></tr></table></figure><h2 id="Lambdas"><a href="#Lambdas" class="headerlink" title="Lambdas"></a>Lambdas</h2><p>Kotin对于lambdas具有非常简洁的语法，可以很容易地表达强大的功能编程范例。这是一个简单的例子，它使用lambda来测试集合中的所有内容都是String：<br><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">allStrings</span><span class="params">(collection: <span class="type">Collection</span>)</span></span>=</span><br><span class="line">    collection.all &#123; it <span class="keyword">is</span> String &#125;</span><br></pre></td></tr></table></figure></p><p>创建使用类似JSON的语法的构建器的能力也恰好是语法上有效的Kotlin。这个例子在<a href="">这里</a>进行了扩展的讨论：<br><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">generatePage</span><span class="params">(withEmphasis : <span class="type">Boolean</span>)</span></span> &#123;</span><br><span class="line">    <span class="keyword">val</span> result =</span><br><span class="line">        html &#123;</span><br><span class="line">            head &#123;</span><br><span class="line">                title &#123; +<span class="string">"Kotlin Builders"</span> &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            body &#123;</span><br><span class="line">                h1 &#123; +<span class="string">"Kotlin Builders"</span> &#125;</span><br><span class="line">                p &#123;</span><br><span class="line">                    +<span class="string">"This is "</span></span><br><span class="line">                    <span class="keyword">if</span> (withEmphasis) b &#123; +<span class="string">"really "</span> &#125;</span><br><span class="line">                    +<span class="string">"interesting"</span></span><br><span class="line">                    a(href = <span class="string">"https://goo.gl/rHwJio"</span>) &#123; +<span class="string">"More here"</span> &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    println(result)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>这里有几件有趣的事情。 首先，这显示了Kotlin的功能语法如何表达：在这个例子中，“html”，“head”，“body”等都只是用Kotlin编写的函数，而后面是大括号的东西是功能参数（这个 片段使用具有与HTML标签匹配的名称的函数来构建网页的表示，但当然，您可以使用此模式构建任何所需的任何名称的复杂数据结构。）第二个有趣的是“withEmphasis”条件。 这可能看起来像我们正在混合代码（if（withEmphasis）…）与数据（所有的HTML-esque标签），但是这里的“数据”实际上只是更多的代码，因为它只是真正的代码，这可以让你建立 复杂的数据结构使用声明式语法，同时还具有对Kotlin语言的全部功能的内联访问。</p><h1 id="开始获取"><a href="#开始获取" class="headerlink" title="开始获取"></a>开始获取</h1><p>如果您想开始使用Kotlin，您可以<span class="exturl" data-url="aHR0cHM6Ly90cnkua290bGlubGFuZy5vcmcv" title="https://try.kotlinlang.org/">立即在线<i class="fa fa-external-link"></i></span>开始使用代码。只需打绿色三角形即可编译并运行。</p><p>要在您的应用程序中尝试Kotlin，请按照下列步骤操作：</p><blockquote><ul><li>1、<span class="exturl" data-url="aHR0cHM6Ly9kZXZlbG9wZXIuYW5kcm9pZC5jb20vc3R1ZGlvL3ByZXZpZXcvaW5kZXguaHRtbA==" title="https://developer.android.com/studio/preview/index.html">下载Android Studio 3.0<i class="fa fa-external-link"></i></span></li><li>2、打开一个已存在的”.java”文件</li><li>3、调用”Code &gt; Convert Java File to Kotlin File”</li></ul></blockquote><p>然后，IDE将引导您将Kotlin依赖项添加到项目中，然后将代码转换为功能相当的Kotlin代码。（如果适用于更为惯用的Kotlin，IDE将会将所有的调用站点提供给转换的类，例如当静态方法被移动到配对对象时）。</p><p>您还可以在developer.android.com上找到更多有关<span class="exturl" data-url="aHR0cHM6Ly9kZXZlbG9wZXIuYW5kcm9pZC5jb20va290bGluL2dldC1zdGFydGVkLmh0bWw=" title="https://developer.android.com/kotlin/get-started.html">如何开始使用Kotlin<i class="fa fa-external-link"></i></span>的信息。</p><blockquote><p>以上内容根据原文使用Google Translate工具翻译而成</p></blockquote>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;原文来自: &lt;a href=&quot;https://android-developers.googleblog.com/2017/05/android-announces-support-for-kotlin.html&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Android Announces Support for Kotlin&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;  今天，Android团队很高兴地宣布，我们正式增加对&lt;a href=&quot;https://kotlinlang.org/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Kotlin&lt;/a&gt;编程语言的支持。Kotlin是一种精湛的设计，成熟的语言，我们相信会使Android开发更快更有趣。它已被几个主要开发商采用 —— Expedia，Flipboard，Pinterest，Square等 —— 为他们的生产应用程序。Kotlin也用Java编程语言表现出色;两种语言之间的毫不费力的互操作是在Kotlin的呼吁中占很大一部分。&lt;/p&gt;
    
    </summary>
    
      <category term="Android" scheme="https://shoewann0402.github.io/categories/Android/"/>
    
      <category term="Android O" scheme="https://shoewann0402.github.io/categories/Android/Android-O/"/>
    
      <category term="Android Studio" scheme="https://shoewann0402.github.io/categories/Android/Android-O/Android-Studio/"/>
    
      <category term="Google I/O 2017" scheme="https://shoewann0402.github.io/categories/Android/Android-O/Android-Studio/Google-I-O-2017/"/>
    
    
      <category term="Android" scheme="https://shoewann0402.github.io/tags/Android/"/>
    
      <category term="Android Studio 3.0" scheme="https://shoewann0402.github.io/tags/Android-Studio-3-0/"/>
    
      <category term="Develop" scheme="https://shoewann0402.github.io/tags/Develop/"/>
    
      <category term="Featured" scheme="https://shoewann0402.github.io/tags/Featured/"/>
    
      <category term="Kotlin" scheme="https://shoewann0402.github.io/tags/Kotlin/"/>
    
  </entry>
  
</feed>
